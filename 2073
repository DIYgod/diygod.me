<!DOCTYPE html><html class="theme-next pisces" lang="zh-Hans"><head><meta charset="UTF-8"><meta http-equiv="X-UA-Compatible" content="IE=edge"><meta name="viewport" content="width=device-width,initial-scale=1,maximum-scale=1"><meta name="theme-color" content="#fff"><link rel="preload" href="https://cdn.jsdelivr.net/gh/DIYgod/diygod.me@gh-pages/fonts/Candyshop.otf" as="font" type="font/otf" crossorigin="anonymous"><meta http-equiv="Cache-Control" content="no-transform"><meta http-equiv="Cache-Control" content="no-siteapp"><meta name="apple-mobile-web-app-status-bar-style" content="black-translucent"><link href="https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free/css/all.min.css" rel="stylesheet" type="text/css"><link href="https://cdn.jsdelivr.net/npm/social-share.js@1.0.16/dist/css/share.min.css" rel="stylesheet" type="text/css"><link href="/css/main.css?v=0.0.71" rel="stylesheet" type="text/css"><link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png?v=0.0.71"><link rel="icon" type="image/png" sizes="32x32" href="/favicon.ico?v=0.0.71"><link rel="mask-icon" href="/safari-pinned-tab.svg?v=0.0.71" color="#fff"><link rel="manifest" href="/manifest.json"><meta name="keywords" content="DIYgod,blog"><link rel="alternate" href="/atom.xml" title="Hi, DIYgod" type="application/atom+xml"><meta name="description" content="莎士比亚曾经说过：“好记性不如烂笔头。” 第一章 JavaScript简介1.1 JavaScript简史1.2 JavaScript实现 一个完整的JavaScript实现应该由三个不同的部分组成：核心（ECMAScript）、文档对象模型（DOM）、浏览器对象模型（BOM）。  2. ECMAScript：提供核心语言功能；DOM：提供访问和操作网页内容的方法和接口；BOM：提供与浏览器交互的"><meta property="og:type" content="article"><meta property="og:title" content="《JavaScript高级程序设计》读书笔记"><meta property="og:url" content="https://diygod.me/2073"><meta property="og:site_name" content="Hi, DIYgod"><meta property="og:description" content="莎士比亚曾经说过：“好记性不如烂笔头。” 第一章 JavaScript简介1.1 JavaScript简史1.2 JavaScript实现 一个完整的JavaScript实现应该由三个不同的部分组成：核心（ECMAScript）、文档对象模型（DOM）、浏览器对象模型（BOM）。  2. ECMAScript：提供核心语言功能；DOM：提供访问和操作网页内容的方法和接口；BOM：提供与浏览器交互的"><meta property="og:locale"><meta property="article:published_time" content="2015-08-19T00:29:33.000Z"><meta property="article:modified_time" content="2020-10-20T08:21:29.505Z"><meta property="article:author" content="DIYgod"><meta name="twitter:card" content="summary"><script type="text/javascript" id="hexo.configurations">var NexT=window.NexT||{},CONFIG={root:"",scheme:"Pisces",version:"0.0.71",sidebar:{position:"right",display:"always",offset:52,b2t:!1,scrollpercent:!1,onmobile:!1},fancybox:!1,tabs:!0,motion:{enable:!1,async:!1,transition:{post_block:"fadeIn",post_header:"slideDownIn",post_body:"slideDownIn",coll_header:"slideLeftIn",sidebar:"slideUpIn"}},since:"2/9/2014 11:30:00",onlineAPI:"wss://api.diygod.me/online/",site:{title:"",subtitle:"",author:""},duoshuo:{userId:"0",author:"博主"},algolia:{applicationID:"",apiKey:"",indexName:"",hits:{per_page:10},labels:{input_placeholder:"Search for Posts",hits_empty:"We didn't find any results for the search: ${query}",hits_stats:"${hits} results found in ${time} ms"}},leancloud:{enable:!0,appID:"Ti5mwFDXXbpWqeWdaydLNfOS-gzGzoHsz",appKey:"rXpryRyVs5jlk2LAGGI1bfEd"},favicon:{visibilitychange:!0,narmal:"/favicon.ico",hidden:"/failure.ico",show_text:"(/≧▽≦/)咦！又好了！",hide_text:"(●—●)喔哟，崩溃啦！"}}</script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/jquery/dist/jquery.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/disqusjs@1.2.2/dist/disqus.js"></script><link rel="canonical" href="https://diygod.me/2073"><title>《JavaScript高级程序设计》读书笔记 | Hi, DIYgod</title><script>!function(e,a,t,n,g,c,o){e.GoogleAnalyticsObject=g,e.ga=e.ga||function(){(e.ga.q=e.ga.q||[]).push(arguments)},e.ga.l=1*new Date,c=a.createElement(t),o=a.getElementsByTagName(t)[0],c.async=1,c.src="https://www.google-analytics.com/analytics.js",o.parentNode.insertBefore(c,o)}(window,document,"script",0,"ga"),ga("create","UA-48084758-7","auto"),ga("send","pageview")</script><meta name="generator" content="Hexo 5.2.0"></head><body itemscope itemtype="http://schema.org/WebPage" lang="zh-Hans" class="theme-darling"><div class="container sidebar-position-right page-post-detail"><header id="header" class="header" itemscope itemtype="http://schema.org/WPHeader"><div class="header-inner"><nav class="site-nav"><ul id="menu" class="menu"><li class="menu-item menu-item-首页"><a href="/" rel="section"><i class="menu-item-icon fas fa-meteor"></i><br>首页</a></li><li class="menu-item menu-item-实验室"><a href="javascript:;" rel="section"><i class="menu-item-icon fas fa-magic"></i><br>实验室</a><ul class="submenu submenu-实验室"><li class="submenu-item submenu-item-rsshub"><a href="https://docs.rsshub.app/" rel="section" target="_blank">RSSHub</a></li><li class="submenu-item submenu-item-rsshub-radar"><a href="https://chrome.google.com/webstore/detail/rsshub-radar/kefjpfngnndepjbopdmoebkipbgkggaa" rel="section" target="_blank">RSSHub Radar</a></li><li class="submenu-item submenu-item-dplayer"><a href="http://dplayer.js.org/" rel="section" target="_blank">DPlayer</a></li><li class="submenu-item submenu-item-aplayer"><a href="https://aplayer.js.org/" rel="section" target="_blank">APlayer</a></li><li class="submenu-item submenu-item-nas"><a href="https://nas.diygod.me/" rel="section" target="_blank">NAS</a></li><li class="submenu-item submenu-item-jellyfin"><a href="https://jellyfin.diygod.me/" rel="section" target="_blank">Jellyfin</a></li><li class="submenu-item submenu-item-miniflux"><a href="https://miniflux.diygod.me/" rel="section" target="_blank">Miniflux</a></li><li class="submenu-item submenu-item-huginn"><a href="https://huginn.diygod.me/" rel="section" target="_blank">Huginn</a></li><li class="submenu-item submenu-item-监控"><a href="https://status.diygod.me/" rel="section" target="_blank">监控</a></li></ul></li><li class="menu-item menu-item-归档"><a href="/archives/" rel="section"><i class="menu-item-icon fas fa-archive"></i><br>归档</a></li><li class="menu-item menu-item-后宫"><a href="/friends/" rel="section"><i class="menu-item-icon fas fa-mars-stroke"></i><br>后宫</a></li><li class="menu-item menu-item-手办柜"><a href="/gk/" rel="section"><i class="menu-item-icon fas fa-child"></i><br>手办柜</a></li><li class="menu-item menu-item-关于我"><a href="/about/" rel="section"><i class="menu-item-icon fas fa-heartbeat"></i><br>关于我</a></li><li class="menu-item search"><form class="search-form"><input name="keyword" type="text" class="search-input" placeholder="站内搜索"> <button type="submit" class="search-submit"><i class="fas fa-search"></i></button></form></li><li class="menu-item online"><span id="online-count">?</span>人在线</li></ul></nav><div class="site-brand-wrapper"><div class="site-brand-bg"><picture><source srcset="https://cdn.jsdelivr.net/gh/DIYgod/diygod.me@gh-pages/images/header-gyx-s.webp" type="image/webp" media="(max-width: 500px)"><source srcset="https://cdn.jsdelivr.net/gh/DIYgod/diygod.me@gh-pages/images/header-gyx-s.png" type="image/png" media="(max-width: 500px)"><source srcset="https://cdn.jsdelivr.net/gh/DIYgod/diygod.me@gh-pages/images/header-gyx.webp" type="image/webp"><img loading="lazy" src="https://cdn.jsdelivr.net/gh/DIYgod/diygod.me@gh-pages/images/header-gyx.png"></picture></div><div class="site-meta"><div class="custom-logo-site-title"><div class="brand"><span class="logo-line-before"><i></i></span><div class="site-title"><div id="animate-stroke" class="animate"><span><svg><use xlink:href="#strokeH"></use></svg> </span><span><svg><use xlink:href="#strokei"></use></svg> </span><span><svg><use xlink:href="#stroke,"></use></svg> </span><span><svg><use xlink:href="#stroke "></use></svg> </span><span><svg><use xlink:href="#strokeD"></use></svg> </span><span><svg><use xlink:href="#strokeI"></use></svg> </span><span><svg><use xlink:href="#strokeY"></use></svg> </span><span><svg><use xlink:href="#strokeg"></use></svg> </span><span><svg><use xlink:href="#strokeo"></use></svg> </span><span><svg><use xlink:href="#stroked"></use></svg></span></div><div id="animate" class="animate"><span><svg><text id="strokeH">H</text></svg> </span><span><svg><text id="strokei">i</text></svg> </span><span><svg><text id="stroke,">,</text></svg> </span><span><svg><text id="stroke "></text></svg> </span><span><svg><text id="strokeD">D</text></svg> </span><span><svg><text id="strokeI">I</text></svg> </span><span><svg><text id="strokeY">Y</text></svg> </span><span><svg><text id="strokeg">g</text></svg> </span><span><svg><text id="strokeo">o</text></svg> </span><span><svg><text id="stroked">d</text></svg></span></div><div id="guide" class="guide"><span>H</span><span>i</span><span>,</span><span> </span><span>D</span><span>I</span><span>Y</span><span>g</span><span>o</span><span>d</span></div></div><span class="logo-line-after"><i></i></span></div></div><p class="site-subtitle"></p></div><div class="site-nav-toggle"><button><span class="btn-bar"></span> <span class="btn-bar"></span> <span class="btn-bar"></span></button></div></div><div class="site-master" itemprop="author" itemscope itemtype="http://schema.org/Person"><picture><source srcset="https://cdn.jsdelivr.net/gh/DIYgod/diygod.me@gh-pages/images/DIYgod-avatar.webp" type="image/webp"><img loading="lazy" class="site-master-avatar scaleup" itemprop="image" src="https://cdn.jsdelivr.net/gh/DIYgod/diygod.me@gh-pages/images/DIYgod-avatar.jpg" alt=""></picture><h2 class="site-master-description scaleup" itemprop="description">写代码是热爱，写到世界充满爱！</h2></div></div></header><main id="main" class="main"><div class="main-inner"><div class="content-wrap"><div id="content" class="content"><div id="posts" class="posts-expand"><article class="post post-type-normal" itemscope itemtype="http://schema.org/Article"><div class="post-date"><div class="post-month">08月</div><div class="post-day">19</div></div><div class="post-badge"><span itemprop="about" itemscope itemtype="http://schema.org/Thing"><a href="/categories/%E5%88%9B%E4%BD%9C%E9%9B%86/" itemprop="url" rel="index"><span itemprop="name">创作集</span></a></span></div><div class="post-block"><link itemprop="mainEntityOfPage" href="https://diygod.me/2073"><span hidden itemprop="author" itemscope itemtype="http://schema.org/Person"><meta itemprop="name" content=""><meta itemprop="description" content=""><meta itemprop="image" content="https://cdn.jsdelivr.net/gh/DIYgod/diygod.me@gh-pages/images/DIYgod-avatar.jpg"></span><span hidden itemprop="publisher" itemscope itemtype="http://schema.org/Organization"><meta itemprop="name" content="Hi, DIYgod"></span><header class="post-header"><h1 class="post-title" itemprop="name headline">《JavaScript高级程序设计》读书笔记</h1><div class="post-meta"><span class="post-time"><span class="post-meta-item-icon"><i class="far fa-calendar"></i> </span><span class="post-meta-item-text">发表于</span> <time title="创建于" itemprop="dateCreated datePublished" datetime="2015-08-19T00:29:33+00:00">2015-08-19</time> </span><span class="post-wordcount"><span class="post-meta-divider">•</span> <span class="post-meta-item-icon"><i class="far fa-file-word"></i> </span><span class="post-meta-item-text">字数统计</span> <span title="字数统计">7040</span> </span><span id="/2073" class="leancloud_visitors" data-flag-title="《JavaScript高级程序设计》读书笔记"><span class="post-meta-divider">•</span> <span class="post-meta-item-icon"><i class="far fa-eye"></i> </span><span class="post-meta-item-text">被</span> <span class="leancloud-visitors-count"></span> <span class="post-meta-item-text">人看爆</span></span></div></header><div class="post-body" itemprop="articleBody"><div class="post-toc-content"><div class="post-toc-title">文章目录</div><ol class="nav"><li class="nav-item nav-level-2"><a class="nav-link" href="#%E7%AC%AC%E4%B8%80%E7%AB%A0-JavaScript%E7%AE%80%E4%BB%8B"><span class="nav-text">第一章 JavaScript简介</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#1-1-JavaScript%E7%AE%80%E5%8F%B2"><span class="nav-text">1.1 JavaScript简史</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#1-2-JavaScript%E5%AE%9E%E7%8E%B0"><span class="nav-text">1.2 JavaScript实现</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#1-3-JavaScript%E7%89%88%E6%9C%AC"><span class="nav-text">1.3 JavaScript版本</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E5%9C%A8HTML%E4%B8%AD%E4%BD%BF%E7%94%A8JavaScript"><span class="nav-text">第二章 在HTML中使用JavaScript</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#2-1-script%E5%85%83%E7%B4%A0"><span class="nav-text">2.1 script元素</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#2-2-%E5%B5%8C%E5%85%A5%E4%BB%A3%E7%A0%81%E4%B8%8E%E5%A4%96%E9%83%A8%E6%96%87%E4%BB%B6"><span class="nav-text">2.2 嵌入代码与外部文件</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#2-3-%E6%96%87%E6%A1%A3%E6%A8%A1%E5%BC%8F"><span class="nav-text">2.3 文档模式</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#2-4-noscript%E5%85%83%E7%B4%A0"><span class="nav-text">2.4 noscript元素</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#%E7%AC%AC%E4%B8%89%E7%AB%A0-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5"><span class="nav-text">第三章 基本概念</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#3-1-%E8%AF%AD%E6%B3%95"><span class="nav-text">3.1 语法</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#3-2-%E5%85%B3%E9%94%AE%E5%AD%97%E5%92%8C%E4%BF%9D%E7%95%99%E5%AD%97"><span class="nav-text">3.2 关键字和保留字</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#3-3-%E5%8F%98%E9%87%8F"><span class="nav-text">3.3 变量</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#3-4-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B"><span class="nav-text">3.4 数据类型</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#3-5-%E6%93%8D%E4%BD%9C%E7%AC%A6"><span class="nav-text">3.5 操作符</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#3-6-%E8%AF%AD%E5%8F%A5"><span class="nav-text">3.6 语句</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#3-7-%E5%87%BD%E6%95%B0"><span class="nav-text">3.7 函数</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E5%8F%98%E9%87%8F%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E5%86%85%E5%AD%98%E9%97%AE%E9%A2%98"><span class="nav-text">第四章 变量、作用域和内存问题</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#4-1-%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%80%BC"><span class="nav-text">4.1 基本类型和引用类型的值</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#4-2-%E6%89%A7%E8%A1%8C%E7%8E%AF%E5%A2%83%E5%8F%8A%E4%BD%9C%E7%94%A8%E5%9F%9F"><span class="nav-text">4.2 执行环境及作用域</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#4-3-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6"><span class="nav-text">4.3 垃圾回收</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#%E7%AC%AC%E4%BA%94%E7%AB%A0-%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B"><span class="nav-text">第五章 引用类型</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#5-1-Object%E7%B1%BB%E5%9E%8B"><span class="nav-text">5.1 Object类型</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#5-2-Array%E7%B1%BB%E5%9E%8B"><span class="nav-text">5.2 Array类型</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#5-3-Date%E7%B1%BB%E5%9E%8B"><span class="nav-text">5.3 Date类型</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#5-4-RegExp%E7%B1%BB%E5%9E%8B"><span class="nav-text">5.4 RegExp类型</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#5-5-Function%E7%B1%BB%E5%9E%8B"><span class="nav-text">5.5 Function类型</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#5-6-%E5%9F%BA%E6%9C%AC%E5%8C%85%E8%A3%85%E7%B1%BB%E5%9E%8B"><span class="nav-text">5.6 基本包装类型</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#5-7-%E5%8D%95%E4%BD%93%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1"><span class="nav-text">5.7 单体内置对象</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#%E7%AC%AC%E5%85%AD%E7%AB%A0-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1"><span class="nav-text">第六章 面向对象的程序设计</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#6-1-%E7%90%86%E8%A7%A3%E5%AF%B9%E8%B1%A1"><span class="nav-text">6.1 理解对象</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#6-2-%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1"><span class="nav-text">6.2 创建对象</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#6-3-%E7%BB%A7%E6%89%BF"><span class="nav-text">6.3 继承</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#%E7%AC%AC%E4%B8%83%E7%AB%A0-%E5%87%BD%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F"><span class="nav-text">第七章 函数表达式</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#7-1-%E9%80%92%E5%BD%92"><span class="nav-text">7.1 递归</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#7-2-%E9%97%AD%E5%8C%85"><span class="nav-text">7.2 闭包</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#7-3-%E6%A8%A1%E4%BB%BF%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F"><span class="nav-text">7.3 模仿块级作用域</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#7-4-%E9%9D%99%E6%80%81%E5%AF%B9%E8%B1%A1"><span class="nav-text">7.4 静态对象</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0-%E4%BA%8B%E4%BB%B6"><span class="nav-text">第十三章 事件</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#13-1%E4%BA%8B%E4%BB%B6%E6%B5%81"><span class="nav-text">13.1事件流</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#13-2-%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E7%A8%8B%E5%BA%8F"><span class="nav-text">13.2 事件处理程序</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#13-3-%E4%BA%8B%E4%BB%B6%E5%AF%B9%E8%B1%A1"><span class="nav-text">13.3 事件对象</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#13-4-%E4%BA%8B%E4%BB%B6%E7%B1%BB%E5%9E%8B"><span class="nav-text">13.4 事件类型</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B8%80%E7%AB%A0-Ajax%E4%B8%8EComet"><span class="nav-text">第二十一章 Ajax与Comet</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#21-1-XMLHttpRequest%E5%AF%B9%E8%B1%A1"><span class="nav-text">21.1 XMLHttpRequest对象</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#21-4-%E8%B7%A8%E5%9F%9F%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%AB"><span class="nav-text">21.4 跨域资源共享</span></a></li></ol></li></ol></div><p>莎士比亚曾经说过：“好记性不如烂笔头。”</p><h2 id="第一章-JavaScript简介"><a href="#第一章-JavaScript简介" class="headerlink" title="第一章 JavaScript简介"></a>第一章 JavaScript简介</h2><h3 id="1-1-JavaScript简史"><a href="#1-1-JavaScript简史" class="headerlink" title="1.1 JavaScript简史"></a>1.1 JavaScript简史</h3><h3 id="1-2-JavaScript实现"><a href="#1-2-JavaScript实现" class="headerlink" title="1.2 JavaScript实现"></a>1.2 JavaScript实现</h3><ol><li>一个完整的JavaScript实现应该由三个不同的部分组成：核心（ECMAScript）、文档对象模型（DOM）、浏览器对象模型（BOM）。</li></ol><p>2. ECMAScript：提供核心语言功能；DOM：提供访问和操作网页内容的方法和接口；BOM：提供与浏览器交互的方法和接口。</p><h3 id="1-3-JavaScript版本"><a href="#1-3-JavaScript版本" class="headerlink" title="1.3 JavaScript版本"></a>1.3 JavaScript版本</h3><p>&nbsp;</p><h2 id="第二章-在HTML中使用JavaScript"><a href="#第二章-在HTML中使用JavaScript" class="headerlink" title="第二章 在HTML中使用JavaScript"></a>第二章 在HTML中使用JavaScript</h2><h3 id="2-1-script元素"><a href="#2-1-script元素" class="headerlink" title="2.1 script元素"></a>2.1 script元素</h3><ol><li><p>标签的位置：为了避免浏览器在呈现页面时出现明显的延迟，现代Web应用程序一般都把全部JavaScript引用放在&lt;body&gt;元素中页面内容的后面。</p></li><li><p>延迟脚本：defer属性表明脚本在执行时不会影响页面的构造，脚本会被延迟到整个页面都解析完毕后再运行；只适用于外部脚本文件。</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span>=<span class="string">"defer"</span> <span class="attr">src</span>=<span class="string">"example.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>异步脚本：async属性表示当前脚本不必等待其他脚本，也不必阻塞文档呈现，告诉浏览器立即下载文件，且并不保证标记为async的脚本按照他们的先后顺序执行；只适用于外部脚本文件。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">"example1.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">"example2.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-嵌入代码与外部文件"><a href="#2-2-嵌入代码与外部文件" class="headerlink" title="2.2 嵌入代码与外部文件"></a>2.2 嵌入代码与外部文件</h3><h3 id="2-3-文档模式"><a href="#2-3-文档模式" class="headerlink" title="2.3 文档模式"></a>2.3 文档模式</h3><ol start="4"><li>混杂模式与标准模式；开启标准模式：</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML 5 --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-4-noscript元素"><a href="#2-4-noscript元素" class="headerlink" title="2.4 noscript元素"></a>2.4 noscript元素</h3><p>&nbsp;</p><h2 id="第三章-基本概念"><a href="#第三章-基本概念" class="headerlink" title="第三章 基本概念"></a>第三章 基本概念</h2><h3 id="3-1-语法"><a href="#3-1-语法" class="headerlink" title="3.1 语法"></a>3.1 语法</h3><ol><li><p>区分大小写：ECMAScript中的一切都区分大小写。</p></li><li><p>严格模式：在严格模式下，ECMAScript 3 中的一些不确定的行为将得到处理，而且对某些不安全的操作也会抛出错误。在顶部添加如下代码：</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span></span><br></pre></td></tr></table></figure><h3 id="3-2-关键字和保留字"><a href="#3-2-关键字和保留字" class="headerlink" title="3.2 关键字和保留字"></a>3.2 关键字和保留字</h3><h3 id="3-3-变量"><a href="#3-3-变量" class="headerlink" title="3.3 变量"></a>3.3 变量</h3><ol start="3"><li>给未经声明的变量赋值在严格模式下会导致抛出 ReferenceError 错误。</li></ol><h3 id="3-4-数据类型"><a href="#3-4-数据类型" class="headerlink" title="3.4 数据类型"></a>3.4 数据类型</h3><ol start="4"><li><p>typeof操作符，用来检测变量的数据类型。</p></li><li><p>5种简单数据类型：Undefined、Null、Boolean、Number、String；1种复杂数据类型（引用类型）：Object。</p></li></ol><ul><li><p>Undefined类型：使用var声明变量但未对其加以初始化时，这个变量的值就是undefined。</p></li><li><p>Null类型：null值表示一个空对象指针；只要意在保存对象的变量还没有真正保存对象，就应该明确地让该变量保存null值。</p></li><li><p>Boolean类型：其他类型转换为Boolean类型，使用函数Boolean()。</p></li><li><p>Number类型：其他类型转换为Number类型，常用函数parseInt()，转换字符串时，如果第一个字符不是数字字符或者负号，会返回NaN，第二个参数可选，表示进制</p></li><li><p>String类型：字符串是不可变的；其他类型转换为String类型，使用函数toString()或String()或加一个空字符串（1+’’）。</p></li><li><p>Object类型</p></li></ul><p>创建对象的方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br></pre></td></tr></table></figure><p>创建Object对象的实例并为其添加属性或方法，就可以创建自定义对象；</p><p>Object类型是所有它的实例的基础，具有下列属性和方法：</p><ul><li><p>constructor：保留着用于创建当前对象的函数即构造函数；</p></li><li><p>hasOwnProperty(propertyName)：用于检查给定的属性在当前对象实例中是否存在；</p></li><li><p>isPrototypeOf(object)：用于检查传入的对象是否是传入对象的原型；</p></li><li><p>propertyIsEnumerable()；toLocaleString()；</p></li><li><p>toString()：返回对象的字符串表示；</p></li><li><p>valueOf()：返回对象的字符串、数值或布尔值表示；</p></li></ul><h3 id="3-5-操作符"><a href="#3-5-操作符" class="headerlink" title="3.5 操作符"></a>3.5 操作符</h3><ol start="6"><li>在比较字符串时，实际比较的是两个字符串中对应位置的每个字符的字符编码值。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"23"</span> &lt; <span class="string">"3"</span>   <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ol start="7"><li><p>在比较数值和字符串时，字符串都会被被转换成数值，然后再以数值方式与另一个数值比较；如果不能转换成数值，就转换成NaN。</p></li><li><p>任何操作数与NaN进行比较，结果都是false。</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">NaN</span> == <span class="literal">NaN</span>  <span class="comment">// false</span></span><br><span class="line"><span class="literal">NaN</span> === <span class="literal">NaN</span>  <span class="comment">// false</span></span><br><span class="line"><span class="literal">NaN</span> &amp;gt; <span class="literal">NaN</span>  <span class="comment">// false</span></span><br><span class="line"><span class="literal">NaN</span> &amp;lt; <span class="literal">NaN</span>  <span class="comment">// false</span></span><br></pre></td></tr></table></figure><ol start="9"><li>相等（==） 全等（===）：全等只在两个操作数未经转换就相等的情况下返回true。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"55"</span> == <span class="number">55</span>  <span class="comment">// true</span></span><br><span class="line"><span class="string">"55"</span> === <span class="number">55</span>  <span class="comment">// false</span></span><br></pre></td></tr></table></figure><ol start="10"><li>条件操作符</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">variable = boolean_expression ? true_value : false_value;</span><br></pre></td></tr></table></figure><h3 id="3-6-语句"><a href="#3-6-语句" class="headerlink" title="3.6 语句"></a>3.6 语句</h3><ol start="11"><li>由于ECMAScript中不存在块级作用域，因此在循环内部定义的变量也可以在外部访问到：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &amp;lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">	<span class="keyword">var</span> j = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i, j);  <span class="comment">// 10 1</span></span><br></pre></td></tr></table></figure><ol start="12"><li>for-in 语句可以用来枚举对象的属性。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (property <span class="keyword">in</span> expression) &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="13"><li>break 和 continue 语句与 label 语句联合使用：多发生在循环嵌套的情况下。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">outermost:</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &amp;lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &amp;lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (i == <span class="number">5</span> &amp;amp;&amp;amp; j ==<span class="number">5</span>) &#123;</span><br><span class="line">			<span class="keyword">break</span> outermost;</span><br><span class="line">		&#125;</span><br><span class="line">		num++;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(num);  <span class="comment">// 55</span></span><br></pre></td></tr></table></figure><h3 id="3-7-函数"><a href="#3-7-函数" class="headerlink" title="3.7 函数"></a>3.7 函数</h3><ol start="14"><li>函数参数：参数在内部是用一个数组来表示的，函数接收到的始终都是这个数组，而不关心数组中包含哪些函数；通过arguments对象来访问这个参数数组；命名的参数只提供便利，但不是必需的；arguments对象中的值与对应的命名参数的内存空间是独立的，但它们的值会同步。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'arguments:'</span>, <span class="built_in">arguments</span>);</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'name:'</span>, name, <span class="string">'age:'</span>, age);</span><br><span class="line">	name = <span class="string">'DIYgod'</span>;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line">example(<span class="string">'Anotherhome'</span>, <span class="string">'556'</span>, <span class="string">'www.anotherhome.net'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// arguments: ["Anotherhome", "556", "www.anotherhome.net"]</span></span><br><span class="line"><span class="comment">// name: Anotherhome age: 556</span></span><br><span class="line"><span class="comment">// DIYgod</span></span><br></pre></td></tr></table></figure><p>&nbsp;</p><h2 id="第四章-变量、作用域和内存问题"><a href="#第四章-变量、作用域和内存问题" class="headerlink" title="第四章 变量、作用域和内存问题"></a>第四章 变量、作用域和内存问题</h2><h3 id="4-1-基本类型和引用类型的值"><a href="#4-1-基本类型和引用类型的值" class="headerlink" title="4.1 基本类型和引用类型的值"></a>4.1 基本类型和引用类型的值</h3><ol><li>在操作对象时，实际上是在操作对象的引用而不是实际的对象。</li></ol><p>2.从一个变量向另一个变量复制基本类型的值时，会创建这个值的一个副本；从一个变量向另一个变量复制引用类型的值时，复制的是指向存储在堆中的一个对象的指针，复制之后两个变量指向同一个对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o1 = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> o2 = o1;</span><br><span class="line">o1.name = <span class="string">'DIYgod'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(o2.name);  <span class="comment">// DIYgod</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> n1 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> n2 = n1;</span><br><span class="line">n1 = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(n2);  <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><ol start="3"><li>传递参数：参数只能按值传递，参数为对象时，在函数内部访问的是同一个对象。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setName</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">	o.name = <span class="string">'DIYgod'</span>;</span><br><span class="line">	o = &#123;&#125;;</span><br><span class="line">	o.name = <span class="string">'Anotherhome'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = &#123;&#125;;</span><br><span class="line"><span class="keyword">set</span><span class="title">Name</span>(<span class="params">p</span>);</span><br><span class="line"><span class="title">console</span>.<span class="title">log</span>(<span class="params">p.name</span>);  // <span class="title">DIYgod</span></span><br></pre></td></tr></table></figure><ol start="4"><li>确定一个值是哪种基本类型可以使用typeof操作符，而确定一个值是哪种引用类型可以使用instanceof操作符。</li></ol><h3 id="4-2-执行环境及作用域"><a href="#4-2-执行环境及作用域" class="headerlink" title="4.2 执行环境及作用域"></a>4.2 执行环境及作用域</h3><ol start="5"><li><p>执行环境有全局执行环境和函数执行环境之分；每个执行环境都有一个与之关联的变量对象；每次进入一个新执行环境，都会创建一个用于搜索变量和函数的作用域链，作用链的前端是当前执行的代码所在的变量环境，最后一个对象是全局执行环境的变量对象。</p></li><li><p>查询标识符：从作用域链的前端开始，向上逐级查询，找到后搜索结果停止，没有找到则一直追溯到全局环境的变量对象。</p></li></ol><h3 id="4-3-垃圾回收"><a href="#4-3-垃圾回收" class="headerlink" title="4.3 垃圾回收"></a>4.3 垃圾回收</h3><ol start="7"><li><p>最常用的垃圾搜集方式是标记清除：垃圾回收器在运行时会给存储在内存中的所有变量都加上标记，然后去掉环境中的变量以及被环境中的变量引用的变量的标记，而在此之后还有标记的变量被视为准备删除的变量，因为这些变量无法被访问到了。</p></li><li><p>优化内存占用：为执行中的代码只保存必要的数据；一旦数据不再有用，最好通过将其值设置为null来释放其引用——解除引用；解除引用的作用是让其值脱离执行环境，以便垃圾搜集器下次运行时将其回收。</p></li></ol><p>&nbsp;</p><h2 id="第五章-引用类型"><a href="#第五章-引用类型" class="headerlink" title="第五章 引用类型"></a>第五章 引用类型</h2><h3 id="5-1-Object类型"><a href="#5-1-Object类型" class="headerlink" title="5.1 Object类型"></a>5.1 Object类型</h3><ol><li>创建Object实例：使用Object构造函数；对象字面量。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// new 操作符法</span></span><br><span class="line"><span class="keyword">var</span> o1 = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">o1.name = <span class="string">'DIYgod'</span>;</span><br><span class="line">o1.age = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象字面量表示法</span></span><br><span class="line"><span class="keyword">var</span> o1 = &#123;</span><br><span class="line">  name: <span class="string">'DIYgod'</span>,</span><br><span class="line">  age: <span class="number">20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>访问对象属性：点表示法；方括号表示法。建议使用点表示法。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 点表示法</span></span><br><span class="line"><span class="built_in">console</span>.log(o.name);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方括号表示法</span></span><br><span class="line"><span class="built_in">console</span>.log(o[<span class="string">'name'</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> n = <span class="string">'name'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(o[n]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(o[<span class="string">'first name'</span>];</span><br></pre></td></tr></table></figure><h3 id="5-2-Array类型"><a href="#5-2-Array类型" class="headerlink" title="5.2 Array类型"></a>5.2 Array类型</h3><ol start="3"><li>创建数组：使用Array构造函数；使用数组字面量表示法。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a1 = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"><span class="keyword">var</span> a2 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">20</span>);</span><br><span class="line"><span class="keyword">var</span> a3 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">'red'</span>, <span class="string">'blue'</span>, <span class="string">'green'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a4 = [];</span><br><span class="line"><span class="keyword">var</span> a5 = [<span class="string">'red'</span>, <span class="string">'blue'</span>, <span class="string">'green'</span>];</span><br></pre></td></tr></table></figure><ol start="4"><li>利用length在末尾添加新项。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">'a'</span>, <span class="string">'b'</span>];</span><br><span class="line">a[a.length] = <span class="string">'c'</span>;</span><br></pre></td></tr></table></figure><ol start="5"><li><p>检测数组：Array.isArray()（解决了存在两个以上全局执行环境时instanceof检测结果出错的情况）。</p></li><li><p>栈方法和队列方法：push()添加一项到数组末尾；pop()移除数组末尾一项；shift()移除数组第一项；unshift()；添加一项到数组前端。</p></li><li><p>重排序</p></li></ol><ul><li><p>reverse()：反转数组项的顺序。</p></li><li><p>sort()：默认将数组项转换成字符串然后升序排列。可以接收一个比较函数作为参数。</p></li></ul><p>比较函数接收两个参数，如果第一个参数位于第二个参数之前则返回一个负数，相等则返回0，第二个参数位于第一个参数之前则返回一个负数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">15</span>, <span class="number">10</span>, <span class="number">5</span>];</span><br><span class="line">a.sort();</span><br><span class="line"><span class="built_in">console</span>.log(a)  <span class="comment">// [0, 1, 10, 15, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params">value1, value2</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> value1 - value2;</span><br><span class="line">&#125;</span><br><span class="line">a.sort(compare);</span><br><span class="line"><span class="built_in">console</span>.log(a)  <span class="comment">// [0, 1, 5, 10, 15]</span></span><br></pre></td></tr></table></figure><ol start="8"><li>操作方法</li></ol><ul><li>concat()：添加项</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a1 = [<span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'blue'</span>];</span><br><span class="line"><span class="keyword">var</span> a2 = a1.concat(<span class="string">'yellow'</span>, [<span class="string">'black'</span>, <span class="string">'brown'</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(a2)  <span class="comment">// ["red", "green", "blue", "yellow", "black", "brown"]</span></span><br></pre></td></tr></table></figure><ul><li>slice()：截取</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">"red"</span>, <span class="string">"green"</span>, <span class="string">"blue"</span>, <span class="string">"yellow"</span>, <span class="string">"black"</span>, <span class="string">"brown"</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a.slice(<span class="number">1</span>), a.slice(<span class="number">1</span>, <span class="number">4</span>))  <span class="comment">// ["green", "blue", "yellow", "black", "brown"] ["green", "blue", "yellow"]</span></span><br></pre></td></tr></table></figure><ul><li>splice()：删除插入替换</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">"red"</span>, <span class="string">"green"</span>, <span class="string">"blue"</span>, <span class="string">"yellow"</span>, <span class="string">"black"</span>, <span class="string">"brown"</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a.splice(<span class="number">2</span>, <span class="number">1</span>), a);  <span class="comment">// 删除项; ["blue"] ["red", "green", "yellow", "black", "brown"]</span></span><br><span class="line"><span class="built_in">console</span>.log(a.splice(<span class="number">1</span>, <span class="number">0</span>, <span class="string">'yellow'</span>, <span class="string">'orange'</span>), a);  <span class="comment">// 插入项; [] ["red", "yellow", "orange", "green", "yellow", "black", "brown"]</span></span><br><span class="line"><span class="built_in">console</span>.log(a.splice(<span class="number">1</span>, <span class="number">1</span>, <span class="string">'red'</span>, <span class="string">'purple'</span>), a);  <span class="comment">// 替换项; ["yellow"] ["red", "red", "purple", "orange", "green", "yellow", "black", "brown"]</span></span><br></pre></td></tr></table></figure><ol start="9"><li>位置方法：indexOf() lastIndexOf() 接收两个参数：要查找的项和（可选）查找起点位置的索引；indexOf()从前往后查找，lastIndexOf()从后往前查找；返回要查找的项的位置，没找到则返回-1。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">"red"</span>, <span class="string">"purple"</span>, <span class="string">"orange"</span>, <span class="string">"green"</span>, <span class="string">"red"</span>, <span class="string">"yellow"</span>, <span class="string">"black"</span>, <span class="string">"brown"</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a.indexOf(<span class="string">'red'</span>));  <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(a.lastIndexOf(<span class="string">'red'</span>));  <span class="comment">// 4</span></span><br><span class="line"><span class="built_in">console</span>.log(a.indexOf(<span class="string">'red'</span>, <span class="number">1</span>));  <span class="comment">// 4</span></span><br><span class="line"><span class="built_in">console</span>.log(a.lastIndexOf(<span class="string">'red'</span>, <span class="number">1</span>));  <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><ol start="10"><li>迭代方法：every() some() filter() map() forEach()。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> everyResult = a.every(<span class="function"><span class="keyword">function</span> (<span class="params">item, index, array</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (item &amp;gt; <span class="number">2</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(everyResult);  <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> someResult = a.some(<span class="function"><span class="keyword">function</span> (<span class="params">item, index, array</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (item &amp;gt; <span class="number">2</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(someResult);  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> filterResult = a.filter(<span class="function"><span class="keyword">function</span> (<span class="params">item, index, array</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (item &amp;gt; <span class="number">2</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(filterResult);  <span class="comment">// [3, 4, 5, 4, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mapResult = a.map(<span class="function"><span class="keyword">function</span> (<span class="params">item, index, array</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (item * <span class="number">2</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(mapResult);  <span class="comment">// [2, 4, 6, 8, 10, 8, 6, 4, 2]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> forEachResult = a.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item, index, array</span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(forEachResult);  <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><ol start="11"><li>归并方法</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sum1 = a.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">prev, cur, index, array</span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(index);  <span class="comment">// 1 2 3 4</span></span><br><span class="line">	<span class="keyword">return</span> prev + cur;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(sum1);  <span class="comment">// 9</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sum2 = a.reduceRight(<span class="function"><span class="keyword">function</span> (<span class="params">prev, cur, index, array</span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(index);  <span class="comment">// 3 2 1 0</span></span><br><span class="line">	<span class="keyword">return</span> prev + cur;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(sum2);  <span class="comment">// 9</span></span><br></pre></td></tr></table></figure><h3 id="5-3-Date类型"><a href="#5-3-Date类型" class="headerlink" title="5.3 Date类型"></a>5.3 Date类型</h3><ol><li>创建日期对象：月份基于0（一月是0，二月是1…）。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d1 = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> d2 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2015</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">17</span>, <span class="number">55</span>, <span class="number">55</span>);  <span class="comment">// 2015年3月5日下午5点55分55秒</span></span><br></pre></td></tr></table></figure><ol start="2"><li>获取调用时的日期和时间和毫秒数，可以用来分析代码。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> start = <span class="built_in">Date</span>.now();</span><br><span class="line">doSomething();</span><br><span class="line"><span class="keyword">var</span> stop = <span class="built_in">Date</span>.now();</span><br><span class="line"><span class="keyword">var</span> result = stop - start;</span><br></pre></td></tr></table></figure><ol start="3"><li>日期格式化方法：local表示以特定于地区的格式显示。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d2 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2015</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">17</span>, <span class="number">55</span>, <span class="number">55</span>);</span><br><span class="line">d2.toString();  <span class="comment">// "Thu Mar 05 2015 17:55:55 GMT+0800 (CST)"</span></span><br><span class="line">d2.toDateString();  <span class="comment">// "Thu Mar 05 2015"</span></span><br><span class="line">d2.toTimeString();  <span class="comment">// "17:55:55 GMT+0800 (CST)"</span></span><br><span class="line">d2.toLocaleString();  <span class="comment">// "2015/3/5 下午5:55:55"</span></span><br><span class="line">d2.toLocaleDateString();  <span class="comment">// "2015/3/5"</span></span><br><span class="line">d2.toLocaleTimeString();  <span class="comment">// "下午5:55:55"</span></span><br></pre></td></tr></table></figure><h3 id="5-4-RegExp类型"><a href="#5-4-RegExp类型" class="headerlink" title="5.4 RegExp类型"></a>5.4 RegExp类型</h3><ol><li>创建一个正则表达式：</li></ol><p>pattern部分是正则表达式</p><p>flags，标志，标明正则表达式的行为：g 全局模式；i 不区分大小写；m 多行模式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> exp1 = <span class="regexp">/ pattern /</span> flags</span><br><span class="line"><span class="keyword">var</span> exp2 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'pattern'</span>, <span class="string">'flags'</span>);</span><br></pre></td></tr></table></figure><ol start="2"><li>实例方法：</li></ol><ul><li>exec()：返回第一个匹配项信息的数组，数组第一项是与整个模式匹配的字符串，其他项是与模式中的捕获组匹配的字符串；还包含两个额外的属性，index 和 input。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> text = <span class="string">"I'm DIYgod, and this is Anotherhome"</span>;</span><br><span class="line"><span class="keyword">var</span> pattern = <span class="regexp">/and( this( is)?)?/gi</span>;</span><br><span class="line"><span class="keyword">var</span> matches = pattern.exec(text);</span><br><span class="line"><span class="built_in">console</span>.log(matches.index);  <span class="comment">// 12</span></span><br><span class="line"><span class="built_in">console</span>.log(matches.input);  <span class="comment">// I'm DIYgod, and this is Anotherhome</span></span><br><span class="line"><span class="built_in">console</span>.log(matches[<span class="number">0</span>]);  <span class="comment">// and this is</span></span><br><span class="line"><span class="built_in">console</span>.log(matches[<span class="number">1</span>]);  <span class="comment">//  this is</span></span><br><span class="line"><span class="built_in">console</span>.log(matches[<span class="number">2</span>]);  <span class="comment">//  is</span></span><br></pre></td></tr></table></figure><ul><li>test()：在模式与该参数匹配的情况下返回true，否则返回false。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> text = <span class="string">"I'm DIYgod, and this is Anotherhome"</span>;</span><br><span class="line"><span class="keyword">var</span> pattern = <span class="regexp">/DIYgod/</span>;</span><br><span class="line"><span class="keyword">var</span> matches = pattern.test(text);</span><br><span class="line"><span class="built_in">console</span>.log(matches);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ol start="3"><li>RegExp构造函数包含一些属性，适用于作用域中的所有正则表达式，记录一些最近一次正则表达式操作的信息。</li></ol><h3 id="5-5-Function类型"><a href="#5-5-Function类型" class="headerlink" title="5.5 Function类型"></a>5.5 Function类型</h3><ol><li>定义函数，函数实际上是 Function 类型的实例，因此函数也是对象。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用函数声明语法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span> (<span class="params">n1, n2</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> n1 + n2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用函数表达式</span></span><br><span class="line"><span class="keyword">var</span> f2 = <span class="function"><span class="keyword">function</span> (<span class="params">n1, n2</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> n1 + n2;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用构造函数，不推荐</span></span><br><span class="line"><span class="keyword">var</span> f3 = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'n1'</span>, <span class="string">'n2'</span>, <span class="string">'return n1 + n2'</span>);</span><br></pre></td></tr></table></figure><ol start="2"><li>函数名是一个指向函数对象的指针。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span> (<span class="params">n1, n2</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> n1 + n2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f2 = f1;</span><br><span class="line">f1 = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">console</span>.log(f2(<span class="number">1</span>, <span class="number">1</span>));  <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><ol start="3"><li><p>ECMAScript中没有函数重载。</p></li><li><p>函数声明与函数表达式的区别：解释器会率先读取函数声明，并使其在执行任何代码之前可用（函数声明提升）；函数表达式必须等到解释器执行到它所在行才会真正被解释执行。</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(f1(<span class="number">1</span>, <span class="number">1</span>));  <span class="comment">// 2</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span> (<span class="params">n1, n2</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> n1 + n2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(f2(<span class="number">1</span>, <span class="number">1</span>));  <span class="comment">// Uncaught TypeError: f2 is not a function</span></span><br><span class="line"><span class="keyword">var</span> f2 = <span class="function"><span class="keyword">function</span>(<span class="params">n1, n2</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> n1 + n2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>函数内部属性</li></ol><ul><li>函数的arguments对象的callee属性：是一个指针，指向拥有这个arguments对象的函数。可以在递归时减小函数和函数名的耦合。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 明显第二种写法更好一些</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial1</span> (<span class="params">num</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (num &amp;lt;= <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> num * factorial1(num - <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial2</span> (<span class="params">num</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (num &amp;lt;= <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> num * <span class="built_in">arguments</span>.callee(num - <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>caller属性：保存着当前函数的函数的引用。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	inner();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="built_in">arguments</span>.callee.caller);  <span class="comment">// function outer()...</span></span><br><span class="line">&#125;</span><br><span class="line">outer();</span><br></pre></td></tr></table></figure><ol start="6"><li>函数属性和方法</li></ol><ul><li>length属性：表示函数希望接收的命名参数的个数。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span> (<span class="params">n1, n2</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> n1 + n2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(f.length);  <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><ul><li>apply() call()：用来改变函数的this对象的值。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.color = <span class="string">'red'</span>;</span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">	color: <span class="string">'blue'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayColor</span> (<span class="params">n1, n2</span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>.color);</span><br><span class="line">	<span class="keyword">return</span> n1 + n2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sayColor(<span class="number">1</span>, <span class="number">1</span>);  <span class="comment">// red</span></span><br><span class="line">o.sayColor = sayColor;</span><br><span class="line">o.sayColor();  <span class="comment">// blue</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用call和apply可以消除对象与方法的耦合关系</span></span><br><span class="line">sayColor.call(<span class="built_in">window</span>, <span class="number">1</span>, <span class="number">1</span>);  <span class="comment">// red</span></span><br><span class="line">sayColor.call(o, <span class="number">1</span>, <span class="number">1</span>);  <span class="comment">// blue</span></span><br><span class="line"></span><br><span class="line">sayColor.apply(<span class="built_in">window</span>, [<span class="number">1</span>, <span class="number">1</span>]);  <span class="comment">// red</span></span><br><span class="line">sayColor.apply(o, [<span class="number">1</span>, <span class="number">1</span>]);  <span class="comment">// blue</span></span><br></pre></td></tr></table></figure><h3 id="5-6-基本包装类型"><a href="#5-6-基本包装类型" class="headerlink" title="5.6 基本包装类型"></a>5.6 基本包装类型</h3><p>Boolean类型、Number类型、String类型</p><p>暂时跳过</p><h3 id="5-7-单体内置对象"><a href="#5-7-单体内置对象" class="headerlink" title="5.7 单体内置对象"></a>5.7 单体内置对象</h3><p>Global对象、Math对象</p><p>暂时跳过</p><p>&nbsp;</p><h2 id="第六章-面向对象的程序设计"><a href="#第六章-面向对象的程序设计" class="headerlink" title="第六章 面向对象的程序设计"></a>第六章 面向对象的程序设计</h2><h3 id="6-1-理解对象"><a href="#6-1-理解对象" class="headerlink" title="6.1 理解对象"></a>6.1 理解对象</h3><ol><li>两种属性：数据属性和访问器属性。特性：描述属性的各种特征，是为了实现JavaScript引擎用的，不能直接访问。</li></ol><ul><li>数据属性，有4个特性：</li></ul><ul><li><p>[[Configurable]]：表示能否通过 delete 删除属性从而重新定义属性，能否修改属性的特性，能否把属性修改为访问器属性。</p></li><li><p>[[Enumerable]]：表示能否通过 for-in 循环返回属性。</p></li><li><p>[[Writeable]]：表示能否修改属性的值。</p></li><li><p>[[Value]]：包含这个属性的数据值。</p></li></ul><ul><li>访问器属性，有4个特性：</li></ul><ul><li><p>[[Configurable]]：表示能否通过 delete 删除属性从而重新定义属性，能否修改属性的特性，能否把属性修改为数据属性。</p></li><li><p>[[Enumerable]]：表示能否通过 for-in 循环返回属性。</p></li><li><p>[[Get]]：在读取属性时调用的函数。</p></li><li><p>[[Set]]：在写入属性时调用的函数。</p></li></ul><ol start="2"><li>定义及读取特性：Object.defineProperty() Object.defineProperties() Object.getOwnPropertyDescriptor()</li></ol><h3 id="6-2-创建对象"><a href="#6-2-创建对象" class="headerlink" title="6.2 创建对象"></a>6.2 创建对象</h3><ol><li>工厂模式：虽然解决了创建多个相似对象的问题，但却没有解决对象识别的问题。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">	o.name = name;</span><br><span class="line">	o.age = age;</span><br><span class="line">	o.job = job;</span><br><span class="line">	o.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = createPerson(<span class="string">'DIYgod'</span>, <span class="number">20</span>, <span class="string">'Software Engineer'</span>);</span><br><span class="line"><span class="keyword">var</span> p2 = createPerson(<span class="string">'Anotherhome'</span>, <span class="number">2</span>, <span class="string">'Website'</span>);</span><br></pre></td></tr></table></figure><ol start="2"><li>构造函数模式。（构造函数应该以大写字母开头）</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.name = name;</span><br><span class="line">	<span class="keyword">this</span>.age = age;</span><br><span class="line">	<span class="keyword">this</span>.job = job;</span><br><span class="line">	<span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">'DIYgod'</span>, <span class="number">20</span>, <span class="string">'Software Engineer'</span>);</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person(<span class="string">'Anotherhome'</span>, <span class="number">2</span>, <span class="string">'Website'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// p1 p2 分别保存着 Person 的一个不同的实例，这两个对象都有一个 constructor 属性，该属性指向Person</span></span><br><span class="line"><span class="built_in">console</span>.log(p1.constructor);  <span class="comment">// function Person(name, age, job) &#123;...</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(p1 <span class="keyword">instanceof</span> <span class="built_in">Object</span>);  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(p1 <span class="keyword">instanceof</span> Person);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>这种方法会经历4个步骤：</p><ul><li><p>创建一个新对象</p></li><li><p>将构造函数的作用域赋给新对象（this指向这个新对象）</p></li><li><p>执行构造函数中的代码（为新对象添加属性）</p></li><li><p>返回新对象</p></li></ul><p>构造函数的问题：每个方法都要在每个实例上重新创建一遍。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(p1.sayName === p2.sayName);  <span class="comment">// false</span></span><br></pre></td></tr></table></figure><ol start="3"><li>原型模式：每个函数都有一个 prototype 属性，这个属性是一个指针，指向一个对象（函数的原型对象），这个对象包含可以由该类型的所有实例共享的属性和方法。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 组合使用构造函数模式与原型模式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.name = name;</span><br><span class="line">	<span class="keyword">this</span>.age = age;</span><br><span class="line">	<span class="keyword">this</span>.job = job;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">'DIYgod'</span>, <span class="number">20</span>, <span class="string">'Software Engineer'</span>);</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person(<span class="string">'Anotherhome'</span>, <span class="number">2</span>, <span class="string">'Website'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(p1.sayName === p2.sayName);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li>理解原型对象：</li></ul><ul><li><p>只要创建一个新函数，就会根据一组特定的规则为该函数创建一个 prototype 属性，指向原型对象</p></li><li><p>默认所有原型对象都会获得一个 constructor 属性，指向 prototype 属性所在函数</p></li><li><p>调用构造函数创建新实例后，实例将有一个 <strong>proto</strong> 属性，指向构造函数的原型对象，指针叫[[Prototype]]，默认原型指向Object</p></li><li><p>实例与构造函数没有直接关系</p></li><li><p>读取属性：搜索先从对象实例本身开始，如果没找到，搜索原型对象</p></li><li><p>使用 isPrototype() 来检测构造函数和实例之间是否有关系</p></li><li><p>使用 hasOwnProperty() 来检测属性存在于实例中还是原型中</p></li></ul><ul><li>原型与 in 操作符</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// in操作符会在通过对象能够访问到属性时返回true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'name'</span> <span class="keyword">in</span> p1);  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 枚举属性</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> p1) &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(prop);  <span class="comment">// name age job sayName</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>用对象字面量重写原型对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">	<span class="keyword">constructor</span>: Person,  // 这里重写了prototype，不再默认有<span class="keyword">constructor</span>属性</span><br><span class="line">	name: 'DIYgod',</span><br><span class="line">	age: 20</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="4"><li>动态原型模式、寄生构造函数模式、稳妥构造函数模式</li></ol><h3 id="6-3-继承"><a href="#6-3-继承" class="headerlink" title="6.3 继承"></a>6.3 继承</h3><ol start="5"><li>JavaScript中最常用的继承：组合继承。融合了原型链和构造函数的优点。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.name = name;</span><br><span class="line">	<span class="keyword">this</span>.color = [<span class="string">'red'</span>, <span class="string">'blue'</span>, <span class="string">'green'</span>];</span><br><span class="line">&#125;</span><br><span class="line">SuperType.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">	SuperType.call(<span class="keyword">this</span>, name);  <span class="comment">// 借用构造函数</span></span><br><span class="line">	<span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">SubType.prototype = <span class="keyword">new</span> SuperType();  <span class="comment">// 原型链</span></span><br><span class="line">SubType.prototype.constructor = SubType;  <span class="comment">// construcotr在上一句中被重写</span></span><br><span class="line">SubType.prototype.sayAge = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>.age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> SubType(<span class="string">'DIYgod'</span>, <span class="number">20</span>);</span><br><span class="line">instance.sayName();  <span class="comment">// DIYgod</span></span><br><span class="line">instance.sayAge();  <span class="comment">// 20</span></span><br></pre></td></tr></table></figure><ol start="6"><li>确定原型和实例的关系。接上例：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(instance <span class="keyword">instanceof</span> SuperType);  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(SuperType.prototype.isPrototypeOf(instance));  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ol start="7"><li>原型式继承、寄生式继承、寄生组合式继承</li></ol><h2 id="第七章-函数表达式"><a href="#第七章-函数表达式" class="headerlink" title="第七章 函数表达式"></a>第七章 函数表达式</h2><h3 id="7-1-递归"><a href="#7-1-递归" class="headerlink" title="7.1 递归"></a>7.1 递归</h3><h3 id="7-2-闭包"><a href="#7-2-闭包" class="headerlink" title="7.2 闭包"></a>7.2 闭包</h3><ol><li><p>闭包是有权访问另一个函数作用域中的变量的函数。</p></li><li><p>（作用域链见4.2）在外部函数内部定义的内部函数将包含外部函数的活动对象添加到它的作用域中；外部函数执行完毕后，其活动对象不会被销毁，因为内部函数的作用域链仍然在引用这个活动对象；外部函数执行完毕后，内部函数仍然可以访问到其定义的所有变量。</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> name = <span class="string">'DIYgod'</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(name);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> inner = outer();</span><br><span class="line">inner();  <span class="comment">// DIYgod</span></span><br><span class="line">inner = <span class="literal">null</span>;  <span class="comment">// 解除对outer内部的匿名函数的引用，以便释放内存</span></span><br></pre></td></tr></table></figure><ol start="3"><li>闭包只能取得包含函数中任何变量的最后一个值。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFunction</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> result = [];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &amp;lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">		result[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> i;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(createFunction()[<span class="number">0</span>]());  <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(createFunction()[<span class="number">1</span>]());  <span class="comment">// 10</span></span><br><span class="line"><span class="comment">// 返回的都是同一个变量i</span></span><br></pre></td></tr></table></figure><ol start="4"><li>匿名函数的this通常会指向window。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'The Window'</span>;</span><br><span class="line"><span class="keyword">var</span> object = &#123;</span><br><span class="line">	name: <span class="string">'My Object'</span>,</span><br><span class="line">	getNameFunc: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(object.getNameFunc()());  <span class="comment">// The Window</span></span><br></pre></td></tr></table></figure><h3 id="7-3-模仿块级作用域"><a href="#7-3-模仿块级作用域" class="headerlink" title="7.3 模仿块级作用域"></a>7.3 模仿块级作用域</h3><ol start="5"><li>用匿名函数来模仿块级作用域：第一个括号的作用是将函数声明转换成函数表达式（函数声明不能通过后面加括号来调用），第二个括号来调用这个函数。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> i = <span class="number">9</span>;</span><br><span class="line">	<span class="built_in">console</span>.log(i);  <span class="comment">// 9</span></span><br><span class="line">&#125;)();</span><br><span class="line"><span class="built_in">console</span>.log(i);  <span class="comment">// Uncaught ReferenceError: i is not defined</span></span><br></pre></td></tr></table></figure><h3 id="7-4-静态对象"><a href="#7-4-静态对象" class="headerlink" title="7.4 静态对象"></a>7.4 静态对象</h3><ol start="6"><li><p>任何在函数中定义的变量，都可以认为是私有变量。</p></li><li><p>有权访问私有变量和私有函数的公有方法称为特权方法。</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyObject</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="comment">// 私有变量和私有函数</span></span><br><span class="line">	<span class="keyword">var</span> privateVariable = <span class="string">'DIYgod'</span>;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">privateFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">'lalala'</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 特权方法</span></span><br><span class="line">	<span class="keyword">this</span>.publicMethod = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(privateVariable);</span><br><span class="line">		privateFunction();</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> MyObject();</span><br><span class="line">o.publicMethod();  <span class="comment">// DIYgod lalala</span></span><br><span class="line">o.privateFunction();  <span class="comment">// Uncaught TypeError: o.privateFunction is not a function</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>…</p><h2 id="第十三章-事件"><a href="#第十三章-事件" class="headerlink" title="第十三章 事件"></a>第十三章 事件</h2><h3 id="13-1事件流"><a href="#13-1事件流" class="headerlink" title="13.1事件流"></a>13.1事件流</h3><ol><li><p>事件冒泡：事件开始时由最具体的元素接收，然后逐级向上传播到较为不具体的节点；IE9、FireFox、Chrome 和 Safari 将事件一直冒泡到 window 对象。</p></li><li><p>事件捕获：由于老版本的浏览器不支持，因此很少有人使用事件捕获。</p></li><li><p>“DOM2级事件”规定的事件流包括三个阶段：事件捕获阶段、处于目标阶段和事件冒泡阶段。</p></li></ol><h3 id="13-2-事件处理程序"><a href="#13-2-事件处理程序" class="headerlink" title="13.2 事件处理程序"></a>13.2 事件处理程序</h3><ol start="4"><li>HTML事件处理程序：扩展作用域，在函数内部可以像访问局部变量一样访问document及该元素本身的成员，栗子：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;lt;input type=<span class="string">"button"</span> value=<span class="string">"Click Me"</span> onclick=<span class="string">"alert(value)"</span>&amp;gt;</span><br></pre></td></tr></table></figure><p>如果是一个表单输入元素，则作用域中还会包含访问表单元素的入口，栗子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&amp;lt;form method=<span class="string">"post"</span>&amp;gt;</span><br><span class="line">    &amp;lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span> value=<span class="string">""</span>&amp;gt;</span><br><span class="line">    &amp;lt;input type=<span class="string">"button"</span> value=<span class="string">"Echo username"</span> onclick=<span class="string">"alert(username.value)"</span>&amp;gt;</span><br><span class="line">&amp;lt;/form&amp;gt;</span><br></pre></td></tr></table></figure><p>缺点：①存在时差问题，解析函数之前就触发事件会引发错误 ②扩展处理程序的作用域链在不同浏览器中会导致不同结果 ③导致HTML和JavaScript代码紧密耦合。</p><ol start="5"><li>DOM0级事件处理程序</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 绑定事件处理程序</span></span><br><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'myButton'</span>);</span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>.id);    <span class="comment">// myButton</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除事件处理程序</span></span><br><span class="line">btn.onclick = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p>以这种方式添加的事件处理程序会在事件流的冒泡阶段被处理。</p><ol start="6"><li>DOM2级事件处理程序</li></ol><p>addEventListener() 和 removeEventListener()</p><p>三个参数：要处理的事件名、作为事件处理程序的函数、在捕获阶段调用函数(true)还是在冒泡阶段调用函数(false，默认)</p><p>好处是可以添加多个事件处理程序，使用 addEventListener 添加的事件处理程序只能使用 removeEventListener移除，匿名函数无法移除。</p><ol start="7"><li>IE事件处理程序</li></ol><p>attachEvent() 和 detachEvent()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'myButton'</span>);</span><br><span class="line">btn.attachEvent(<span class="string">'onclick'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span> === <span class="built_in">window</span>);    <span class="comment">// myButton</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>以这种方式添加的事件处理程序会在事件流的冒泡阶段被处理。</p><h3 id="13-3-事件对象"><a href="#13-3-事件对象" class="headerlink" title="13.3 事件对象"></a>13.3 事件对象</h3><ol start="8"><li><p>在触发DOM上的某个事件时，会产生一个事件对象event，这个对象包含着所有与事件有关的信息。只有在事件处理程序执行期间，event对象才会存在，一旦事件处理程序执行完成，event对象就会被销毁。</p></li><li><p>属性/方法：</p></li></ol><p>currentTarget：正在处理事件的那个元素</p><p>target：事件的目标</p><p>type：事件类型</p><p>cancelable：可以阻止特定事件的默认行为</p><p>preventDefault()：阻止特定事件的默认行为</p><p>stopPropagation()：停止事件在DOM层次中的传播，即取消进一步的事件捕获或冒泡</p><p>eventPhase：事件出于事件流的阶段 捕获阶段为1 处于目标对象为2 冒泡阶段为3</p><h3 id="13-4-事件类型"><a href="#13-4-事件类型" class="headerlink" title="13.4 事件类型"></a>13.4 事件类型</h3><ol start="10"><li>UI事件、焦点事件、鼠标事件、滚轮事件、文本事件、键盘事件、合成事件、变动事件。</li></ol><p>&nbsp;</p><p>…</p><h2 id="第二十一章-Ajax与Comet"><a href="#第二十一章-Ajax与Comet" class="headerlink" title="第二十一章 Ajax与Comet"></a>第二十一章 Ajax与Comet</h2><h3 id="21-1-XMLHttpRequest对象"><a href="#21-1-XMLHttpRequest对象" class="headerlink" title="21.1 XMLHttpRequest对象"></a>21.1 XMLHttpRequest对象</h3><ol><li>用法</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (xhr.readState === <span class="number">4</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (xhr.status &amp;gt;= <span class="number">200</span> &amp;amp;&amp;amp; xhr.status &amp;lt; <span class="number">300</span> || xhr.status === <span class="number">304</span>) &#123;</span><br><span class="line">			<span class="built_in">console</span>.log(xhr.responseText);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">'Request was unsuccessful: '</span> + xhr.status);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line">xhr.open(<span class="string">'get'</span>, <span class="string">'example.php'</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.send(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><ul><li><p>创建XHR对象：new XMLHttpRequest();</p></li><li><p>open()：启动一个请求以备发送；3个参数：请求类型、请求的URL、是否异步发送请求（同步必须等到服务器响应后再继续执行）；不会真正发送请求。</p></li><li><p>send()：发送请求；1个参数：发送的数据；不需要发送数据则必须传入null。</p></li><li><p>XHR对象的属性：</p></li></ul><ul><li><p>responseText 返回的文本</p></li><li><p>status 响应的HTTP状态。</p></li></ul><ul><li>HTTP状态码：</li></ul><ul><li><p>2xx 成功</p></li><li><p>3xx 重定向，304 Not Modified 表示请求的资源没有被修改，可以直接用浏览器中缓存的版本，302 Found 表示请求的资源现在临时从不同的URI响应请求</p></li><li><p>4xx 客户端错误，403 Forbidden，404 Not Found</p></li><li><p>5xx 服务器错误，500 Internal Server Error，503 Service Unavailable。</p></li></ul><ul><li>XHR的readyState属性：</li></ul><ul><li><p>0：未初始化</p></li><li><p>1：启动，已调用open()</p></li><li><p>2：发送，已调用send()</p></li><li><p>3：接收到部分响应数据</p></li><li><p>4：接收到全部响应数据</p></li></ul><ul><li>readystatechange事件：readystate属性的值由一个值变成另一个值，都会触发readystatechange事件。</li></ul><h3 id="21-4-跨域资源共享"><a href="#21-4-跨域资源共享" class="headerlink" title="21.4 跨域资源共享"></a>21.4 跨域资源共享</h3><ol><li><p>CORS：使用自定义的HTTP头部让浏览器与服务器进行沟通，从而决定请求或响应是应该成功还是应该失败。IE中要使用XDR对象实现，其他浏览器XHR对象原生支持。</p></li><li><p>图像Ping：只能发送GET请求；无法访问服务器的响应文本。</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">img.onload = img.onerror = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'Done!'</span>);</span><br><span class="line">&#125;;</span><br><span class="line">img.src = <span class="string">'http://api.hitokoto.us/rand?encode=jsc'</span>;</span><br></pre></td></tr></table></figure><ol start="3"><li>JSONP：两部分组成 回调函数和数据。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myCallBack</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(data.hitokoto);  <span class="comment">// 像平常的你一样引发奇迹吧-</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">script.src = <span class="string">'http://api.hitokoto.us/rand?encode=jsc&amp;amp;fun=myCallBack'</span>;  <span class="comment">// 返回一个包含在函数调用中的JSON，调用了myCallBack函数：myCallBack(&#123;"hitokoto":"...","author":"...",....&#125;);</span></span><br><span class="line"><span class="built_in">document</span>.body.insertBefore(script, <span class="built_in">document</span>.body.firstChild);</span><br></pre></td></tr></table></figure><p>缺点：安全性不可靠；不容易判断请求失败。</p><p>&nbsp;</p><p>&nbsp;</p><p>To Be Continued…</p></div><div class="post-share">分享到：</div><div><div style="padding:10px 0;margin:20px auto;width:90%;text-align:center"><div></div><button id="rewardButton" disable="enable" onclick='var qr=document.getElementById("QR");"none"===qr.style.display?qr.style.display="block":qr.style.display="none"'><span>赞赏</span></button><div id="QR" style="display:none"><div id="wechat" style="display:inline-block"><picture><source srcset="/images/wechatpay.webp" type="image/webp"><img loading="lazy" id="wechat_qr" src="/images/wechatpay.png" alt=" 微信扫一扫，向我赞赏"></picture><p>微信扫一扫，向我赞赏</p></div><div id="alipay" style="display:inline-block"><picture><source srcset="/images/alipay.webp" type="image/webp"><img loading="lazy" id="alipay_qr" src="/images/alipay.png" alt=" 支付宝扫一扫，向我赞赏"></picture><p>支付宝扫一扫，向我赞赏</p></div></div></div></div><footer class="post-footer"><div class="post-nav"><div class="post-nav-next post-nav-item"><a href="/2024" rel="next" title="百度前端技术学院编码挑战（TASK 0004）"><i class="fas fa-angle-left"></i> 百度前端技术学院编码挑战（TASK 0004）</a></div><span class="post-nav-divider"></span><div class="post-nav-prev post-nav-item"><a href="/2125" rel="prev" title="论 IFTTT 的正确食用姿势">论 IFTTT 的正确食用姿势 <i class="fas fa-angle-right"></i></a></div></div></footer></div></article><div class="post-spread"></div></div></div><div class="comments" id="comments"><div id="disqus_thread"><div id="dsqjs"><section class="dsqjs-info"><p id="dsqjs-load-disqus" class="dsqjs-message">评论完整模式加载中...如果长时间无法加载，请针对 disq.us | disquscdn.com | disqus.com 启用代理</p></section></div></div></div><script type="text/javascript">window.DISQUS=null,new DisqusJS({shortname:"diygod-me",siteName:"Hi, DIYgod",identifier:"/2073",url:"https://diygod.me/2073",api:"https://disqus.diygod.me/api/",apikey:"h403RnxQYBk2VylgLZwxodAtYOEL9bzgfhpcc8AZEU0EXn9cEWUoTwrgL3VB5tvj",admin:"DIYgod",adminLabel:"妹抖"})</script></div><div class="sidebar-toggle"><div class="sidebar-toggle-line-wrap"><span class="sidebar-toggle-line sidebar-toggle-line-first"></span> <span class="sidebar-toggle-line sidebar-toggle-line-middle"></span> <span class="sidebar-toggle-line sidebar-toggle-line-last"></span></div></div><aside id="sidebar" class="sidebar"><div class="sidebar-inner"><ul class="sidebar-nav motion-element"><li class="sidebar-nav-toc sidebar-nav-active" data-target="post-toc-wrap">文章目录</li><li class="sidebar-nav-overview" data-target="site-overview-wrap">关于我</li></ul><section class="site-overview-wrap sidebar-panel"><div class="site-overview"><div class="site-author motion-element" itemprop="author" itemscope itemtype="http://schema.org/Person"><picture><source srcset="https://cdn.jsdelivr.net/gh/DIYgod/diygod.me@gh-pages/images/card-avatar.webp" type="image/webp"><img loading="lazy" class="site-author-image" itemprop="image" src="https://cdn.jsdelivr.net/gh/DIYgod/diygod.me@gh-pages/images/card-avatar.jpg" alt=""></picture><p class="site-author-name" itemprop="name"><span style="opacity:.2">网红</span>DIYgod</p><p class="site-description motion-element" itemprop="description">你能抓到我么？</p></div><div class="links-of-author motion-element"><span class="links-of-author-item scaleup"><a href="https://twitter.com/DIYgod" target="_blank" title="Twitter"><i class="fab fa-twitter" style="color:#2fb0ec"><span>DIYgod</span></i></a> </span><span class="links-of-author-item scaleup"><a href="https://space.bilibili.com/2267573" target="_blank" title="bilibili"><i style="fill:#20b0e3"><svg t="1581180571735" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="1122"><path d="M813.2864 234.5216h-53.0176l46.3872-46.3872c19.8912-19.8912 19.8912-59.648 0-79.5136s-59.648-19.8912-79.5136 0l-132.5312 125.9008h-159.0272l-132.5312-125.9008c-19.8912-19.8912-59.648-19.8912-79.5136 0s-19.8912 59.648 0 79.5136l46.3872 46.3872H216.9088c-92.7744 0-165.6576 72.8832-165.6576 165.6576v357.8112c0 99.4048 72.8832 172.288 165.6576 172.288h589.7216c92.7744 0 165.6576-72.8832 165.6576-165.6576V400.1792c6.6304-92.7744-66.2528-165.6576-159.0272-165.6576z m46.3872 523.4688a59.392 59.392 0 0 1-59.648 59.648H223.5392a59.392 59.392 0 0 1-59.648-59.648V406.8096a59.392 59.392 0 0 1 59.648-59.648h576.4864a59.392 59.392 0 0 1 59.648 59.648v351.1808z m-516.864-291.5328a59.392 59.392 0 0 0-59.648 59.648v59.648c0 33.1264 26.496 59.648 59.648 59.648s59.648-26.496 59.648-59.648v-59.648a59.392 59.392 0 0 0-59.648-59.648z m344.576 0a59.392 59.392 0 0 0-59.648 59.648v59.648c0 33.1264 26.496 59.648 59.648 59.648s59.648-26.496 59.648-59.648v-59.648a59.392 59.392 0 0 0-59.648-59.648z" p-id="1123"></path></svg><span>DIYgod</span></i></a> </span><span class="links-of-author-item scaleup"><a href="https://www.pixiv.net/users/15288095" target="_blank" title="pixiv"><i><svg t="1581192678406" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="1663"><path d="M701.515 301.152c-44.44-46.092-100.245-64.919-163.08-65.107-29.552-0.089-58.595 4.617-87.095 12.455-28.961 7.965-56.673 18.839-81.996 35.306-3.347 2.176-4.69 4.686-4.695 8.694-0.034 29.713-0.333 59.424-0.426 89.137-0.085 27.263-0.018 54.527-0.021 81.79-0.004 56.836 0.053 113.674-0.097 170.51-0.015 5.326 1.57 8.393 6.639 10.576 17.881 7.7 36.245 13.85 55.161 18.37 30.808 7.36 62.082 10.876 93.715 12.36 33.75 1.583 66.83-1.28 98.832-12.378 61.328-21.265 105.46-61.217 129.447-121.99 15.492-39.25 17.417-80.058 10.877-121.393-7.146-45.173-25.384-85.268-57.26-118.33z" fill="#0074AA" p-id="1664"></path><path d="M512 17.482C238.886 17.482 17.482 238.886 17.482 512S238.886 1006.518 512 1006.518 1006.518 785.114 1006.518 512 785.114 17.482 512 17.482z m327.127 530.516c-18.962 47.58-50.687 84.816-92.709 113.517-43.734 29.872-92.452 46.554-144.647 53.74-66.355 9.136-131.115 0.236-195.108-17.307-12.485-3.423-24.767-7.483-37.009-11.676-4.732-1.62-5.413-1.201-5.42 3.878-0.049 33.583 0.004 67.165-0.069 100.748-0.008 3.782 1.314 5.86 5.093 7.004 7.233 2.187 14.26 5.003 20.384 9.602 3.594 2.699 6.19 5.968 5.824 10.873-0.43 5.752-3.64 8.957-9.432 8.968-19.872 0.039-39.744 0.014-59.617 0.014-19.41 0.006-38.82-0.103-58.23 0.082-4.736 0.045-8.025-1.288-9.814-5.842-1.798-4.575-0.752-8.45 2.566-11.847 5.698-5.833 13.181-8.404 20.593-11 7.625-2.668 7.8-0.933 7.8-10.86-0.02-151.738-0.02-303.476-0.076-455.215-0.001-2.353 1.227-5.726-1.09-6.829-2.297-1.094-4.167 1.976-6 3.442-22.584 18.058-43.474 37.783-60.052 61.694-0.527 0.76-1.03 1.537-1.588 2.273-5.878 7.727-9.827 15.6-5.76 25.855 1.946 4.91 1.707 10.59 0.282 15.968-0.937 3.532-2.436 6.64-5.44 8.865-5.016 3.718-8.469 3.16-11.788-2.085-12.847-20.308-25.59-40.682-38.532-60.928-2.117-3.313-1.999-5.634 0.715-8.492 17.758-18.692 37.058-35.675 57.256-51.635 51.148-40.413 106.911-72.725 168.335-94.902 40.036-14.455 81.234-23.72 123.709-27.312 49.596-4.194 98.488-0.765 146.365 13.295 50.8 14.919 95.584 40.146 131.966 79.103 36.324 38.896 58.162 84.856 65.163 137.62 5.425 40.866 1.694 80.839-13.67 119.389z" fill="#0074AA" p-id="1665"></path></svg><span>DIYgod</span></i></a> </span><span class="links-of-author-item scaleup"><a href="https://github.com/DIYgod" target="_blank" title="GitHub"><i class="fab fa-github" style="color:#191717"><span>DIYgod</span></i></a> </span><span class="links-of-author-item scaleup"><a href="https://t.me/awesomeDIYgod" target="_blank" title="Telegram 频道"><i class="fab fa-telegram" style="color:#41aade"><span>TG频道</span></i></a> </span><span class="links-of-author-item scaleup"><a href="https://t.me/prpr233" target="_blank" title="Telegram 群"><i class="fab fa-telegram" style="color:#41aade"><span>TG群</span></i></a> </span><span class="links-of-author-item scaleup"><a href="/atom.xml" target="_blank" title="RSS"><i style="fill:#f78422"><svg t="1581190724531" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="16212"><path d="M512 0a512 512 0 1 0 512 512A512 512 0 0 0 512 0z m-130.72 736a71.84 71.84 0 0 1-38.72 38.4 74.24 74.24 0 0 1-56.8 0 72.64 72.64 0 0 1-38.4-38.4 73.44 73.44 0 0 1 16-80 72.48 72.48 0 0 1 22.88-16 72.96 72.96 0 0 1 96 96z m192 32a51.84 51.84 0 0 1-88.32-36.64 187.52 187.52 0 0 0-15.2-75.04 194.08 194.08 0 0 0-102.72-102.72 186.72 186.72 0 0 0-75.04-15.2 51.84 51.84 0 0 1 0-103.52 284.64 284.64 0 0 1 115.2 23.52 300.64 300.64 0 0 1 157.76 157.76 284.96 284.96 0 0 1 23.52 115.2 49.92 49.92 0 0 1-15.52 37.44z m195.84 0a51.84 51.84 0 0 1-88.48-36.64 378.72 378.72 0 0 0-13.92-103.2 393.92 393.92 0 0 0-39.2-92.96 389.92 389.92 0 0 0-232.48-177.76 380 380 0 0 0-103.2-13.92 51.84 51.84 0 0 1-36.64-88.48 49.92 49.92 0 0 1 36.48-15.04 483.2 483.2 0 0 1 130.72 17.6 494.08 494.08 0 0 1 344 344 483.2 483.2 0 0 1 17.6 130.72 50.08 50.08 0 0 1-15.2 36.48z" p-id="16213"></path></svg><span>RSS</span></i></a> </span><span class="links-of-author-item scaleup"><a href="https://wj.qq.com/s2/3318631/2970" target="_blank" title="QQ 群"><i><svg t="1581181882582" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="13328"><path d="M616.086443 921.281964c-40.013106 0-75.217656 1.034243-104.163021 3.734019-28.918502-2.686345-64.069324-3.734019-103.961546-3.734019-115.015854 0-217.325298 43.572513-217.325297 75.754924 0 30.839239 84.995951 27.400717 199.729739 26.232158a615.052083 615.052083 0 0 0 123.168911-12.840729 623.890158 623.890158 0 0 0 120.119909 12.115415c114.653198 1.155128 199.595422 4.580218 199.595422-26.044113 0-31.954072-102.242285-75.217656-217.177549-75.217655z" fill="#F9AE07" p-id="13329"></path><path d="M902.11501 604.803678q-32.343592-87.051005-70.476257-171.791753 1.786419-20.738582 1.786419-41.59805C833.425172 175.243706 722.78806 0 512.500986 0S191.549936 175.243706 191.549936 391.413875c0 13.16309 0.564132 26.17843 1.611807 39.005727A2781.978719 2781.978719 0 0 0 121.718402 605.233493C77.474302 725.245949 75.51327 833.760849 90.906026 841.819883c10.946855 5.735346 50.94653-36.22536 89.052332-104.136158 25.184483 160.025562 131.563739 279.715657 332.55606 279.715657 200.428189 0 306.780581-119.045372 332.32772-278.439643 37.904326 66.60792 77.3533 107.614974 88.232996 101.946787 15.446483-8.059035 13.472019-116.345595-30.946692-236.102848z" fill="#2c2c2c" p-id="13330"></path><path d="M426.578246 128.178944c-31.201895 0.604428-55.795382 37.380488-54.935752 82.148425s26.87688 80.55005 58.078776 79.932191 55.808814-37.380488 54.935752-82.134993c-0.85963-44.754505-26.863448-80.55005-58.078776-79.945623z m172.476771 0.832767c-31.564552-0.604428-57.850436 35.016505-58.723499 79.542671s23.989059 81.114183 55.553612 81.71861c31.564552 0.604428 57.863868-35.016505 58.73693-79.542671s-24.002491-81.127614-55.567043-81.71861z m118.588693 358.976261a1226.638782 1226.638782 0 0 1-207.170914 16.66877 1231.742837 1231.742837 0 0 1-203.624939-16.077774c-41.665209 51.604684-44.942549 127.507358-44.94255 212.167516 0 155.445344 87.924067 281.475213 250.595679 281.475212 162.65818 0 250.595679-126.016437 250.595679-281.475212 0-84.982519-3.331068-161.153827-45.452955-212.758512z" fill="#FFFFFF" p-id="13331"></path><path d="M512.500986 316.652898c-109.267076 0-197.849298 21.987733-197.849298 39.583292s115.781463 65.963198 197.849298 65.963197 197.835866-49.549631 197.835866-65.963197-88.582221-39.583291-197.849298-39.583292z" fill="#F9AE07" p-id="13332"></path><path d="M831.638753 433.011925c0.040295-0.402952 0.040295-0.792472 0.080591-1.181992-80.335143 26.594814-193.6586 43.15613-319.23179 43.15613-125.908983 0-239.487643-16.655338-319.86308-43.384469Q166.983312 488.807307 143.961337 547.087559a1025.512144 1025.512144 0 0 0 164.83412 38.750524v147.157971a675.535137 675.535137 0 0 0 82.309605 9.536524 336.088603 336.088603 0 0 0 58.374274-3.680293V599.592169c20.72515 0.940221 41.718935 1.464058 63.02165 1.464058a1197.062125 1197.062125 0 0 0 367.559133-53.646307q-22.927953-57.729551-48.421366-114.397995z" fill="#E91F1F" p-id="13333"></path><path d="M445.060299 184.753367a29.281159 29.281159 0 0 0-24.902417 32.236138 29.281159 29.281159 0 0 0 24.902417 32.222706 29.281159 29.281159 0 0 0 24.888985-32.236138 29.281159 29.281159 0 0 0-24.888985-32.222706z m183.208718 20.483379a38.965432 38.965432 0 0 0-35.164254-8.797779 53.914941 53.914941 0 0 0-36.346246 19.046185s-5.950254 8.193352-1.759556 13.203384 11.712464-2.928116 11.712464-2.928115a41.315984 41.315984 0 0 1 26.379906-14.654012 39.354952 39.354952 0 0 1 23.451791 5.856232s7.32029 5.37269 11.725895 0a10.20811 10.20811 0 0 0 0-11.725895z" fill="" p-id="13334"></path></svg><span>Q群</span></i></a> </span><span class="links-of-author-item scaleup"><a href="https://psnprofiles.com/DIYgod_" target="_blank" title="PSN"><i class="fab fa-playstation" style="color:#003791"><span>DIYgod_</span></i></a> </span><span class="links-of-author-item scaleup"><a href="https://www.patreon.com/DIYgod" target="_blank" title="Patreon"><i><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 180 180"><path fill="#f96753" d="M108.8135992 26.06720125c-26.468266 0-48.00213212 21.53066613-48.00213212 47.99733213 0 26.38653268 21.53386613 47.85426547 48.00213213 47.85426547 26.38639937 0 47.8530655-21.4677328 47.8530655-47.85426547 0-26.466666-21.46666613-47.99733213-47.85306547-47.99733213"/><path fill="#052a49" d="M23.333335 153.93333178V26.0666679h23.46666576v127.8666639z"/></svg><span>Patreon</span></i></a> </span><span class="links-of-author-item scaleup"><a href="javascript:;" target="_blank" title="NS"><i style="fill:#e60012"><svg t="1581180843998" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="4383"><path d="M255.69989 67c-89.2 16-161 82-183.6 168.8C63.89989 267.2 63.29989 285.6 64.29989 528.8 64.69989 752 64.89989 757.2 68.69989 774.6c20.6 93 86.6 159.2 180.6 181 12.2 2.8 27.8 3.4 128.2 3.8 103.8 0.8 114.6 0.6 117.4-2.2 2.8-2.8 3-38.6 3-444.4 0-301-0.6-442.6-1.8-445.2-1.8-3.4-5-3.6-113.8-3.4-88.4 0.2-115 0.8-126.6 2.8z m167.8 445.2V888l-75.6-1c-69.6-0.8-77-1.2-91-4.6-59.8-15.4-104-61.4-116.6-121.4-4-18.8-4-480.2-0.2-498.6 11.2-52.2 47.4-95.4 96-114.8 24.4-9.8 35.8-11 115.2-11.2l71.8-0.2v376z m-151.8-262.4c-11.6 2.2-29.4 11.2-39 19.4-19.4 16.8-29.2 40.8-27.6 69 0.8 14.6 1.6 18.6 7.6 30.4 8.8 18 21.8 31.2 39.8 40 12.4 6.2 15.6 6.8 31.8 7.4 14.6 0.6 19.8 0 29.6-3.4 40.2-13.6 64.6-52.6 57.6-92.8-7.8-47.4-53.2-79.4-99.8-70z m316.4-184.6c-0.8 0.6-1.2 201.6-1.2 447 0 404.6 0.2 445.6 3 446.8 5 1.8 149 1.2 166.8-0.8 75.4-8.6 142-54.4 178-122.4 4.6-8.8 10.8-23.4 14-32.4 11.6-34.8 11.4-25.6 11.4-292.2 0-212.8-0.4-244.6-3-258-18.4-96.6-92.2-169.6-189-186.2-13-2.2-33-2.8-97.6-2.8-44.8-0.2-81.8 0.4-82.4 1z m198.2 404.2c29 7.6 52.6 29.6 62.4 57.8 6.2 17.4 6 43-0.2 59-11.4 29.4-33.6 50-62.2 57.6-46.4 12-95.8-16-109.2-62-4-14-3.8-37.8 0.8-52.4 13.8-45.4 62-72.2 108.4-60z" p-id="4384"></path></svg><span>SW-3404-1126-5044</span></i></a></span></div><div class="des-of-author"><div class="des-of-author-nav"><div class="des-of-author-title active" data-index="1">最喜欢的作品</div><div class="des-of-author-title" data-index="2">最喜欢的女孩子</div><div class="des-of-author-title" data-index="3">最喜欢的游戏</div><div class="des-of-author-title" data-index="4">装备</div><div class="des-of-author-title" data-index="5">工作</div></div><div class="des-of-author-panel"><div class="des-of-author-des active" data-index="1">为美好的世界献上祝福！、四月是你的谎言、摇曳百合、鬼灭之刃、辉夜大小姐想让我告白、青春猪头少年不会梦到兔女郎学姐、DARLING in the FRANXX、Re：从零开始的异世界生活、埃罗芒阿老师</div><div class="des-of-author-des" data-index="2">岁纳京子、惠惠、02、宫园薰、阿库娅、樱岛麻衣、雷姆、和泉纱雾、灶门祢豆子、英梨梨、土间埋、山田妖精、明日香、托尔</div><div class="des-of-author-des" data-index="3">集合啦！动物森友会、守望先锋、怪物猎人：世界、地平线：零之曙光、健身环大冒险<br>可以进Q群：947956902 跟我一起玩</div><div class="des-of-author-des" data-index="4">MacBook Pro (15-inch, 2018)、小米10 Pro、小米手表Color、PlayStation 4、Nintendo Switch、iPad 6 + Apple Pencil、AirPods Pro</div><div class="des-of-author-des" data-index="5">当前 - bilibili HTML5 播放器 & 开源作者<br>即将 - 赴英读研</div></div></div><details class="views-top-wrap"><summary class="views-top-name scaleup">看爆 Top5</summary><ul class="views-top"></ul></details></div></section><section class="post-toc-wrap motion-element sidebar-panel sidebar-panel-active"><div class="post-toc"><div class="post-toc-content"><ol class="nav"><li class="nav-item nav-level-2"><a class="nav-link" href="#%E7%AC%AC%E4%B8%80%E7%AB%A0-JavaScript%E7%AE%80%E4%BB%8B"><span class="nav-number">1.</span> <span class="nav-text">第一章 JavaScript简介</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#1-1-JavaScript%E7%AE%80%E5%8F%B2"><span class="nav-number">1.1.</span> <span class="nav-text">1.1 JavaScript简史</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#1-2-JavaScript%E5%AE%9E%E7%8E%B0"><span class="nav-number">1.2.</span> <span class="nav-text">1.2 JavaScript实现</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#1-3-JavaScript%E7%89%88%E6%9C%AC"><span class="nav-number">1.3.</span> <span class="nav-text">1.3 JavaScript版本</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E5%9C%A8HTML%E4%B8%AD%E4%BD%BF%E7%94%A8JavaScript"><span class="nav-number">2.</span> <span class="nav-text">第二章 在HTML中使用JavaScript</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#2-1-script%E5%85%83%E7%B4%A0"><span class="nav-number">2.1.</span> <span class="nav-text">2.1 script元素</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#2-2-%E5%B5%8C%E5%85%A5%E4%BB%A3%E7%A0%81%E4%B8%8E%E5%A4%96%E9%83%A8%E6%96%87%E4%BB%B6"><span class="nav-number">2.2.</span> <span class="nav-text">2.2 嵌入代码与外部文件</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#2-3-%E6%96%87%E6%A1%A3%E6%A8%A1%E5%BC%8F"><span class="nav-number">2.3.</span> <span class="nav-text">2.3 文档模式</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#2-4-noscript%E5%85%83%E7%B4%A0"><span class="nav-number">2.4.</span> <span class="nav-text">2.4 noscript元素</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#%E7%AC%AC%E4%B8%89%E7%AB%A0-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5"><span class="nav-number">3.</span> <span class="nav-text">第三章 基本概念</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#3-1-%E8%AF%AD%E6%B3%95"><span class="nav-number">3.1.</span> <span class="nav-text">3.1 语法</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#3-2-%E5%85%B3%E9%94%AE%E5%AD%97%E5%92%8C%E4%BF%9D%E7%95%99%E5%AD%97"><span class="nav-number">3.2.</span> <span class="nav-text">3.2 关键字和保留字</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#3-3-%E5%8F%98%E9%87%8F"><span class="nav-number">3.3.</span> <span class="nav-text">3.3 变量</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#3-4-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B"><span class="nav-number">3.4.</span> <span class="nav-text">3.4 数据类型</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#3-5-%E6%93%8D%E4%BD%9C%E7%AC%A6"><span class="nav-number">3.5.</span> <span class="nav-text">3.5 操作符</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#3-6-%E8%AF%AD%E5%8F%A5"><span class="nav-number">3.6.</span> <span class="nav-text">3.6 语句</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#3-7-%E5%87%BD%E6%95%B0"><span class="nav-number">3.7.</span> <span class="nav-text">3.7 函数</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E5%8F%98%E9%87%8F%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E5%86%85%E5%AD%98%E9%97%AE%E9%A2%98"><span class="nav-number">4.</span> <span class="nav-text">第四章 变量、作用域和内存问题</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#4-1-%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%80%BC"><span class="nav-number">4.1.</span> <span class="nav-text">4.1 基本类型和引用类型的值</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#4-2-%E6%89%A7%E8%A1%8C%E7%8E%AF%E5%A2%83%E5%8F%8A%E4%BD%9C%E7%94%A8%E5%9F%9F"><span class="nav-number">4.2.</span> <span class="nav-text">4.2 执行环境及作用域</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#4-3-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6"><span class="nav-number">4.3.</span> <span class="nav-text">4.3 垃圾回收</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#%E7%AC%AC%E4%BA%94%E7%AB%A0-%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B"><span class="nav-number">5.</span> <span class="nav-text">第五章 引用类型</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#5-1-Object%E7%B1%BB%E5%9E%8B"><span class="nav-number">5.1.</span> <span class="nav-text">5.1 Object类型</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#5-2-Array%E7%B1%BB%E5%9E%8B"><span class="nav-number">5.2.</span> <span class="nav-text">5.2 Array类型</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#5-3-Date%E7%B1%BB%E5%9E%8B"><span class="nav-number">5.3.</span> <span class="nav-text">5.3 Date类型</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#5-4-RegExp%E7%B1%BB%E5%9E%8B"><span class="nav-number">5.4.</span> <span class="nav-text">5.4 RegExp类型</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#5-5-Function%E7%B1%BB%E5%9E%8B"><span class="nav-number">5.5.</span> <span class="nav-text">5.5 Function类型</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#5-6-%E5%9F%BA%E6%9C%AC%E5%8C%85%E8%A3%85%E7%B1%BB%E5%9E%8B"><span class="nav-number">5.6.</span> <span class="nav-text">5.6 基本包装类型</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#5-7-%E5%8D%95%E4%BD%93%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1"><span class="nav-number">5.7.</span> <span class="nav-text">5.7 单体内置对象</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#%E7%AC%AC%E5%85%AD%E7%AB%A0-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1"><span class="nav-number">6.</span> <span class="nav-text">第六章 面向对象的程序设计</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#6-1-%E7%90%86%E8%A7%A3%E5%AF%B9%E8%B1%A1"><span class="nav-number">6.1.</span> <span class="nav-text">6.1 理解对象</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#6-2-%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1"><span class="nav-number">6.2.</span> <span class="nav-text">6.2 创建对象</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#6-3-%E7%BB%A7%E6%89%BF"><span class="nav-number">6.3.</span> <span class="nav-text">6.3 继承</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#%E7%AC%AC%E4%B8%83%E7%AB%A0-%E5%87%BD%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F"><span class="nav-number">7.</span> <span class="nav-text">第七章 函数表达式</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#7-1-%E9%80%92%E5%BD%92"><span class="nav-number">7.1.</span> <span class="nav-text">7.1 递归</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#7-2-%E9%97%AD%E5%8C%85"><span class="nav-number">7.2.</span> <span class="nav-text">7.2 闭包</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#7-3-%E6%A8%A1%E4%BB%BF%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F"><span class="nav-number">7.3.</span> <span class="nav-text">7.3 模仿块级作用域</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#7-4-%E9%9D%99%E6%80%81%E5%AF%B9%E8%B1%A1"><span class="nav-number">7.4.</span> <span class="nav-text">7.4 静态对象</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0-%E4%BA%8B%E4%BB%B6"><span class="nav-number">8.</span> <span class="nav-text">第十三章 事件</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#13-1%E4%BA%8B%E4%BB%B6%E6%B5%81"><span class="nav-number">8.1.</span> <span class="nav-text">13.1事件流</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#13-2-%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E7%A8%8B%E5%BA%8F"><span class="nav-number">8.2.</span> <span class="nav-text">13.2 事件处理程序</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#13-3-%E4%BA%8B%E4%BB%B6%E5%AF%B9%E8%B1%A1"><span class="nav-number">8.3.</span> <span class="nav-text">13.3 事件对象</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#13-4-%E4%BA%8B%E4%BB%B6%E7%B1%BB%E5%9E%8B"><span class="nav-number">8.4.</span> <span class="nav-text">13.4 事件类型</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B8%80%E7%AB%A0-Ajax%E4%B8%8EComet"><span class="nav-number">9.</span> <span class="nav-text">第二十一章 Ajax与Comet</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#21-1-XMLHttpRequest%E5%AF%B9%E8%B1%A1"><span class="nav-number">9.1.</span> <span class="nav-text">21.1 XMLHttpRequest对象</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#21-4-%E8%B7%A8%E5%9F%9F%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%AB"><span class="nav-number">9.2.</span> <span class="nav-text">21.4 跨域资源共享</span></a></li></ol></li></ol></div></div></section></div></aside></div></main><footer id="footer" class="footer"><div class="footer-image"><picture><source srcset="https://cdn.jsdelivr.net/gh/DIYgod/diygod.me@gh-pages/images/footer.webp" type="image/webp"><img loading="lazy" src="https://cdn.jsdelivr.net/gh/DIYgod/diygod.me@gh-pages/images/footer.png"></picture></div><div class="footer-inner"><p>博客已萌萌哒运行<span id="since"></span><span class="my-face">(●'◡'●)ﾉ♥</span></p><p>© <span itemprop="copyrightYear">2020</span> Hi, DIYgod. 由 <a href="https://hexo.io/" target="_blank" class="external" rel="nofollow">Hexo</a> 强力驱动. Theme By <a href="https://github.com/DIYgod/hexo-theme-sagiri" target="_blank" class="external" rel="nofollow">Sagiri</a> v0.0.71. <a href="/sitemap.xml" target="_blank">站点地图</a>. 鲁ICP备16000184号.</p><p>Made with <i class="fas fa-heart throb" style="color:#d43f57"></i> by <span class="author" itemprop="copyrightHolder">DIYgod</span>.</p></div></footer><div class="back-to-top"><picture><source srcset="https://cdn.jsdelivr.net/gh/DIYgod/diygod.me@gh-pages/images/scroll.webp" type="image/webp"><img loading="lazy" src="https://cdn.jsdelivr.net/gh/DIYgod/diygod.me@gh-pages/images/scroll.png"></picture></div><canvas id="evanyou"></canvas><div id="aplayer-fixed"></div></div><script type="text/javascript" src="/js/sagiri.min.js?v=0.0.71"></script><script>"serviceWorker"in navigator&&window.addEventListener("load",()=>{navigator.serviceWorker.register("/sw.js")})</script></body></html>