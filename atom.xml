<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hi, DIYgod</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://diygod.me/"/>
  <updated>2019-12-10T09:40:35.315Z</updated>
  <id>https://diygod.me/</id>
  
  <author>
    <name>DIYgod</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>我家 Android 初养成</title>
    <link href="https://diygod.me/android/"/>
    <id>https://diygod.me/android/</id>
    <published>2019-11-24T02:13:22.000Z</published>
    <updated>2019-12-10T09:40:35.315Z</updated>
    
    <content type="html"><![CDATA[<p>最近把用了两年的 iPhone X 换成了 Redmi K20 Pro，体验一下 Android 自由香甜的空气</p><p><img style="width:100%;max-width:300px" src="/images/android1.jpg"></p><a id="more"></a><h2 id="解锁-Bootloader"><a href="#解锁-Bootloader" class="headerlink" title="解锁 Bootloader"></a>解锁 Bootloader</h2><p>小米手机出厂都是锁 Bootloader 的，需要到<a href="http://www.miui.com/unlock/index.html" target="_blank" rel="noopener">官网</a>下载解锁工具解锁</p><p>刷机、ROOT 都需要解锁 Bootloader，这是折腾所有东西的第一步</p><p>所以我一拿到手机第一件事就是兴冲冲地连接电脑、下载解锁工具、运行解锁程序：</p><p><img src="/images/android2.jpg" alt=""></p><p><img src="/images/android3.png" alt=""></p><p>游戏结束</p><p>———————————————————————</p><p>7 天后：</p><p><img src="/images/android4.png" alt=""></p><h2 id="刷入-TWRP"><a href="#刷入-TWRP" class="headerlink" title="刷入 TWRP"></a>刷入 TWRP</h2><p>Recovery 是安卓的恢复系统，类似 <a href="https://docs.microsoft.com/zh-cn/windows-hardware/manufacture/desktop/winpe-intro" target="_blank" rel="noopener">Windows 的 PE</a> 和 <a href="https://support.apple.com/zh-cn/HT201314" target="_blank" rel="noopener">macOS 的恢复功能</a>，可以用来系统升级和重置手机</p><p>刷入第三方的 Recovery 可以获得更多的功能，比如 Root 和 刷入第三方 ROM</p><p>其中 <a href="https://twrp.me/" target="_blank" rel="noopener">TWRP</a> 是一个著名的开源 Recovery 映像，在 TWRP 官网搜索 <code>Redmi K20</code> 可以看到 TWRP 官方已经提供了对 Redmi K20 Pro 的支持</p><p><img src="/images/android5.jpg" alt=""></p><p>但是因为这篇文章咕咕太久了，我刷 TWRP 的时候官方还没有支持 Redmi K20 Pro，我用的是一位国内开发者 <a href="https://weibo.com/u/6033736159" target="_blank" rel="noopener">wzsx150</a> 适配的 <a href="https://weibo.com/ttarticle/p/show?id=2309404160776561631202" target="_blank" rel="noopener">TWRP 映像</a></p><p><img src="/images/android6.png" alt=""></p><p>wzsx150 团队提供了非常方便的一键刷入工具，打开 <code>recovery-twrp一键刷入工具</code></p><p><img src="/images/android7.png" alt=""></p><p>根据提示下一步下一步</p><p><img src="/images/android8.png" alt=""></p><p><img src="/images/android9.png" alt=""></p><p>期间手机重启一次，再启动自动进入了 TWRP，证明刷入成功</p><p><img src="/images/android10.jpg" alt=""></p><h2 id="刷入-Magisk"><a href="#刷入-Magisk" class="headerlink" title="刷入 Magisk"></a>刷入 Magisk</h2><p>Magisk 是一个兼具稳定性和可玩性的神器：作为一个 Root 方案，它能不破坏系统实现无痛 OTA，作为一个插件扩展平台，它又能提供丰富的自定义模块来满足多样化的定制需求</p><p>参考阅读：<a href="https://sspai.com/post/53043" target="_blank" rel="noopener">少数派 - 每个 Android 玩家都不可错过的神器</a></p><p>Magisk 同样也是开源项目，在 <a href="https://github.com/topjohnwu/Magisk/releases" target="_blank" rel="noopener">GitHub</a> 上下载最新版的 Magisk 安装包导入手机中，然后点击 TWRP 的 <code>安装</code> 按钮，找到 Magisk 安装包，就可以刷入了</p><p><img src="/images/android11.jpg" alt=""></p><p>重启系统后，会发现桌面多了一个 <code>Magisk Manager</code>，证明刷入成功</p><p><img src="/images/android12.jpg" alt=""></p><h2 id="Magisk"><a href="#Magisk" class="headerlink" title="Magisk"></a>Magisk</h2><p>前面准备了那么多，终于可以安装 Magisk 模块了，Magisk 模块非常丰富，网上资料也很多，所以这里只介绍一下我使用的几个模块</p><p><img style="width:100%;max-width:400px" src="/images/android13.png"></p><p>筑紫A丸：全局替换系统字体，字体名叫筑紫A丸ゴシック，效果就如图所示，很可爱，介绍和下载在<a href="https://mp.weixin.qq.com/s/zGaX15vRE-ZPoHtAiXawhQ" target="_blank" rel="noopener">这里</a></p><p>Google Lens Enabler：欺骗 Google 相册这个设备是一台 Pixel 设备，来开启 Google 智能镜头的功能，然后还有一个重要的额外效果：让 Google 相册拥有无限空间</p><p><img style="width:100%;max-width:400px" src="/images/android14.jpg"></p><p>Riru - Core：Riru 是一个系列模块，使用 Riru 模块都需要先安装 Riru - Core</p><p>Riru - Storage Redirect：存储重定向，几乎所有的 Android 应用都会在我们的手机中储存信息，为此，Android 系统提供了 <code>/data</code> 和 <code>sdcard/Android/data</code> 这两个目录来进行应用数据文件存放，遗憾的是，很多应用开发者并不会遵从这个规范，这让手机内部储存目录显得极为杂乱且文件管理效率低下，使用 Storage Redirect 能很好地解决上述问题，它将散落于各处的应用私有文件夹重新定位到指定的位置，<a href="https://sr.rikka.app/zh-hans/" target="_blank" rel="noopener">这里</a>有它的官方介绍和文档</p><p><img style="width:100%;max-width:400px" src="/images/android15.jpg"></p><p>Tai Chi：太极模块，见下一节</p><h2 id="太极"><a href="#太极" class="headerlink" title="太极"></a>太极</h2><p>介绍太极要先从 Xposed 框架开始</p><p>很多人都对 Xposed 的大名有所耳闻，它通过对系统框架的偷天换日，可以修改系统与应用的各种数据，籍此实现无数种可能性，同时也大大地提升了 Android 系统的可玩性，而且有比 Magisk 更丰富的模块</p><p>但是 Xposed 框架没有像 Android 系统版本一样能够快速的更新，最新版本停留在了 Android 8.0/8.1 beta3 版本，对于 Android 9.0/10.0 用户，只能选择第三方实现，现在常用的有<a href="https://taichi.cool/README_CN.html" target="_blank" rel="noopener">太极</a>和 <a href="https://github.com/ElderDrivers/EdXposed" target="_blank" rel="noopener">Edxposed</a> 两种方案</p><p>我一开始装的是 Edxposed，但是貌似跟 MIUI 11 有兼容性问题无法使用，所以换了太极</p><p>下面是我使用的几个模块：</p><p><img style="width:100%;max-width:400px" src="/images/android16.jpg"></p><p>大圣净化和去你大爷的内置浏览器非常香</p><h2 id="Google-相机"><a href="#Google-相机" class="headerlink" title="Google 相机"></a>Google 相机</h2><p>Redmi K20 Pro 支持 Camera2 API，所以不需要额外折腾就可以安装 Google 相机</p><p>国内开发者<a href="https://weibo.com/u/5213532617" target="_blank" rel="noopener">阿狗酱</a>有分享专门为 Redmi K20 Pro 调教的谷歌相机</p><p><img style="width:100%;max-width:400px" src="/images/android17.jpg"></p><p>得益于 HDR+ 算法，提升非常明显，Google 真的太强了</p><p>MIUI 自带相机 vs Google 相机</p><p><img src="/images/android18.jpg" alt=""></p><p>iPhone 11 自带相机 vs Google 相机</p><p><img src="/images/android19.jpg" alt=""></p><p>综上所述，Android 上很多黑科技确实很香，但整个系统的精致程度、设计感、人性化和软件生态还是跟 iOS 有非常大的差距，这让我痛苦地适应了一个多星期才开始慢慢可以接受，要不是拼多多拆封不给退我可能第二天就换回 iPhone 了</p><p>但一旦接受了这种设定，香</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近把用了两年的 iPhone X 换成了 Redmi K20 Pro，体验一下 Android 自由香甜的空气&lt;/p&gt;&lt;p&gt;&lt;img style=&quot;width:100%;max-width:300px&quot; src=&quot;/images/android1.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="分享境" scheme="https://diygod.me/tags/%E5%88%86%E4%BA%AB%E5%A2%83/"/>
    
  </entry>
  
  <entry>
    <title>RSSHub Radar — 订阅一个 RSS 源不应该这么难</title>
    <link href="https://diygod.me/rsshub-radar/"/>
    <id>https://diygod.me/rsshub-radar/</id>
    <published>2019-08-06T11:40:33.000Z</published>
    <updated>2019-12-10T09:40:35.319Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/rsshub-radar5.jpg" alt=""></p><blockquote><p>如果你问我，RSSHub 能否改变 RSS 的命运，我也不晓得，但我晓得，不认命，就是 RSSHub 的命。 ——《哪吒之魔童降世》</p></blockquote><p>如果你还不知道 RSS：<a href="https://diygod.me/ohmyrss/">《我有特别的 RSS 使用技巧》</a><br>如果你还不知道 RSSHub：<a href="https://sspai.com/post/47100" target="_blank" rel="noopener">《通过 RSSHub 订阅不支持 RSS 的网站》</a></p><p>首先最大的 respect 献给 RSSHub 的 <a href="https://docs.rsshub.app/#contributors" target="_blank" rel="noopener">244 名参与者</a></p><h2 id="订阅一个-RSS-源太难了"><a href="#订阅一个-RSS-源太难了" class="headerlink" title="订阅一个 RSS 源太难了"></a>订阅一个 RSS 源太难了</h2><p>首先需要网站提供了 RSS（这一前提通常就无法满足）；然后我们要随缘在页面中找到 RSS 链接；然后复制链接、打开如 Feedly Inoreader 的 RSS 服务、点击添加订阅、粘贴链接、添加</p><p>看，顺利订阅一个 RSS 源需要天时（随缘找到了 RSS）地利（网站提供了 RSS）人和（不因为订阅步骤过于麻烦而中途放弃），缺一不可</p><p>都 9102 年了，世界不应该这样</p><a id="more"></a><h2 id="解决这个问题"><a href="#解决这个问题" class="headerlink" title="解决这个问题"></a>解决这个问题</h2><p>为了解决这个问题，RSSHub Radar 诞生了</p><p><a href="https://chrome.google.com/webstore/detail/rsshub-radar/kefjpfngnndepjbopdmoebkipbgkggaa" target="_blank" rel="noopener">Chrome Web Store</a> | <a href="https://github.com/DIYgod/RSSHub-Radar" target="_blank" rel="noopener">GitHub</a></p><p>RSSHub Radar 是 RSSHub 的衍生项目，她是一个可以帮助你快速发现和订阅当前网站 RSS 和 RSSHub 的浏览器扩展</p><p><img src="/images/rsshub-radar1.jpg" alt=""></p><p>使用很简单，我们在进入一个新页面时，RSSHub Radar 会<strong>自动检测</strong>当前页面有没有 RSS 和 RSSHub 支持，检测到则会在右下角显示一个角标，如果我们想订阅当前页面的 RSS，点击扩展图标，会弹出一个列表，如图所示，列表有三项内容：<strong>当前页面上的 RSS、适用于当前页面的 RSSHub、适用于当前网站的 RSSHub</strong>，你可以选择复制链接或<strong>一键订阅</strong>到 Feedly Inoreader TinyTinyRSS</p><p><img src="/images/rsshub-radar2.jpg" alt=""></p><p>设置页允许你使用自建的 RSSHub 域名、设置快捷键、立即更新规则、选择一键订阅到 TinyTinyRSS 还是 Feedly Inoreader、选择是否开启角标提醒等</p><p><img src="/images/rsshub-radar3.jpg" alt=""></p><p>支持列表列出了当前支持的 RSSHub 规则</p><h2 id="RSSHub-Radar-是如何工作的"><a href="#RSSHub-Radar-是如何工作的" class="headerlink" title="RSSHub Radar 是如何工作的"></a>RSSHub Radar 是如何工作的</h2><p>RSSHub Radar 是开源的，你可以直接去 <a href="https://github.com/DIYgod/RSSHub-Radar" target="_blank" rel="noopener">GitHub</a> 看源码</p><p>当我们进入一个新页面时，RSSHub Radar 开始检测当前页面的 RSS 和 RSSHub</p><p><strong>当前页面自带的 RSS</strong></p><p>分析页面中的每个链接显然是不现实的，好在标准中指定了一种特殊 MIME 类型的 link 标签来指明 RSS 链接，<code>link[type=&quot;application/rss+xml&quot;]</code> 和 <code>link[type=&quot;application/atom+xml&quot;]</code>，RSSHub Radar 正是通过这个标签来检测页面是否有自带 RSS，具体实现在<a href="https://github.com/DIYgod/RSSHub-Radar/blob/master/src/js/content/utils.js#L14" target="_blank" rel="noopener">这里</a></p><p><strong>适用于当前页面的 RSSHub</strong></p><p>使用<a href="https://github.com/DIYgod/RSSHub/blob/master/assets/radar-rules.js" target="_blank" rel="noopener">给定规则</a>，根据当前页面的 URL 或 DOM 来获取 RSSHub 链接，规则各个字段的具体含义见<a href="https://docs.rsshub.app/joinus/#%E6%8F%90%E4%BA%A4%E6%96%B0%E7%9A%84-rsshub-radar-%E8%A7%84%E5%88%99" target="_blank" rel="noopener">文档</a>，具体实现在<a href="https://github.com/DIYgod/RSSHub-Radar/blob/master/src/js/background/utils.js#L111" target="_blank" rel="noopener">这里</a></p><p>每隔 5 个小时从 GitHub 远程更新一次规则</p><p><strong>一键订阅</strong></p><p>Feedly Inoreader TinyTinyRSS 都提供了用于订阅的接口，不同的是 Feedly 需要进入页面确认一下，而另外两个会直接订阅上</p><p>比如访问这个 URL 可以快速使用 Feedly 订阅我的博客（需要点 FOLLOW 确认）：<br><a href="https://feedly.com/i/subscription/feed/https://diygod.me/atom.xml" target="_blank" rel="noopener">https://feedly.com/i/subscription/feed/https://diygod.me/atom.xml</a></p><p>这个 URL 可以快速使用 Inoreader 订阅我的博客：<br><a href="https://www.inoreader.com/feed/https://diygod.me/atom.xml" target="_blank" rel="noopener">https://www.inoreader.com/feed/https://diygod.me/atom.xml</a></p><h2 id="参与我们"><a href="#参与我们" class="headerlink" title="参与我们"></a>参与我们</h2><p>如果你对 RSSHub 感兴趣，欢迎<a href="https://docs.rsshub.app/joinus/" target="_blank" rel="noopener">参与</a>或<a href="https://docs.rsshub.app/support/" target="_blank" rel="noopener">支持</a>我们</p><p>最后祝哪吒票房破 50 亿，还没看的一定要去看嗷！</p><p><img src="/images/rsshub-radar4.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/rsshub-radar5.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;如果你问我，RSSHub 能否改变 RSS 的命运，我也不晓得，但我晓得，不认命，就是 RSSHub 的命。 ——《哪吒之魔童降世》&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;如果你还不知道 RSS：&lt;a href=&quot;https://diygod.me/ohmyrss/&quot;&gt;《我有特别的 RSS 使用技巧》&lt;/a&gt;&lt;br&gt;如果你还不知道 RSSHub：&lt;a href=&quot;https://sspai.com/post/47100&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《通过 RSSHub 订阅不支持 RSS 的网站》&lt;/a&gt;&lt;/p&gt;&lt;p&gt;首先最大的 respect 献给 RSSHub 的 &lt;a href=&quot;https://docs.rsshub.app/#contributors&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;244 名参与者&lt;/a&gt;&lt;/p&gt;&lt;h2 id=&quot;订阅一个-RSS-源太难了&quot;&gt;&lt;a href=&quot;#订阅一个-RSS-源太难了&quot; class=&quot;headerlink&quot; title=&quot;订阅一个 RSS 源太难了&quot;&gt;&lt;/a&gt;订阅一个 RSS 源太难了&lt;/h2&gt;&lt;p&gt;首先需要网站提供了 RSS（这一前提通常就无法满足）；然后我们要随缘在页面中找到 RSS 链接；然后复制链接、打开如 Feedly Inoreader 的 RSS 服务、点击添加订阅、粘贴链接、添加&lt;/p&gt;&lt;p&gt;看，顺利订阅一个 RSS 源需要天时（随缘找到了 RSS）地利（网站提供了 RSS）人和（不因为订阅步骤过于麻烦而中途放弃），缺一不可&lt;/p&gt;&lt;p&gt;都 9102 年了，世界不应该这样&lt;/p&gt;
    
    </summary>
    
    
      <category term="创作集" scheme="https://diygod.me/categories/%E5%88%9B%E4%BD%9C%E9%9B%86/"/>
    
    
  </entry>
  
  <entry>
    <title>小米手环 4 NFC 模拟加密卡探索</title>
    <link href="https://diygod.me/pn532/"/>
    <id>https://diygod.me/pn532/</id>
    <published>2019-06-28T01:06:12.000Z</published>
    <updated>2019-12-10T09:40:35.319Z</updated>
    
    <content type="html"><![CDATA[<p>小米手环 4 NFC 版一发售就迫不及待找黄牛买了一只</p><p>手环的 NFC 主要有三个功能：小爱同学、公交卡、模拟门禁卡</p><p>结果手环的小爱同学很难用，功能缺失、反应慢<a href="https://twitter.com/DIYgod/status/1141718298658086913" target="_blank" rel="noopener">还老骂我</a>，上海公交也不支持，门禁卡顿时成为了全村人的希望，正好我有两个门禁卡，试着模拟一下吧</p><p><img src="/images/pn5321.jpg" alt=""></p><p>这 NFC 一事无成，像极了人生</p><a id="more"></a><p>第一张是 ID 卡，铁定没救了，希望全在第二张加密 IC 卡上，为了拯救鸡肋的 NFC，我到淘宝买了一个 NFC 读写器 PN532</p><p>把加密卡放到 PN532 上读取数据</p><p><img src="/images/pn5322.jpg" alt=""></p><p>使用 MifareOne Tool 解卡</p><p><img src="/images/pn5323.png" alt=""></p><p>解卡失败…根据网上的说法可能是 PN532 过热导致的，那么哪里最凉快呢？</p><p>冰箱</p><p><img src="/images/pn5324.jpg" alt=""></p><p>经过漫长的等待，成功了</p><p><img src="/images/pn5325.png" alt=""></p><p>得到加密卡数据</p><p><img src="/images/pn5326.png" alt=""></p><p>然后把其中的 0 扇区 0 区块数据写入一张空白卡</p><p><img src="/images/pn5327.jpg" alt=""></p><p><img src="/images/pn5328.png" alt=""></p><p>然后再把空白卡的数据写入手环</p><p><img src="/images/pn5329.jpg" alt=""></p><p><img src="/images/pn53210.jpg" alt=""></p><p>这时候手环上就有卡了，但是里面只有 0 扇区 0 区块数据，这时候再把剩下的数据写到手环里就好了</p><p><img src="/images/pn53211.jpg" alt=""></p><p><img src="/images/pn53212.png" alt=""></p><p>验证：对比原卡和手环卡的数据，</p><p><img src="/images/pn53213.png" alt=""><br><img src="/images/pn53214.png" alt=""></p><p>只有 0 扇区 0 区块的部分数据（厂商号）不同，且 15 扇区的加密数据相同，说明已经模拟成功</p><p>NFC 终于没白买</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;小米手环 4 NFC 版一发售就迫不及待找黄牛买了一只&lt;/p&gt;&lt;p&gt;手环的 NFC 主要有三个功能：小爱同学、公交卡、模拟门禁卡&lt;/p&gt;&lt;p&gt;结果手环的小爱同学很难用，功能缺失、反应慢&lt;a href=&quot;https://twitter.com/DIYgod/status/1141718298658086913&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;还老骂我&lt;/a&gt;，上海公交也不支持，门禁卡顿时成为了全村人的希望，正好我有两个门禁卡，试着模拟一下吧&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/images/pn5321.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;这 NFC 一事无成，像极了人生&lt;/p&gt;
    
    </summary>
    
    
      <category term="分享境" scheme="https://diygod.me/categories/%E5%88%86%E4%BA%AB%E5%A2%83/"/>
    
    
  </entry>
  
  <entry>
    <title>优雅地下载我的B站投币视频</title>
    <link href="https://diygod.me/download-webhook/"/>
    <id>https://diygod.me/download-webhook/</id>
    <published>2019-06-02T16:51:16.000Z</published>
    <updated>2019-12-10T09:40:35.315Z</updated>
    
    <content type="html"><![CDATA[<style>twitter-widget{margin:0 auto!important}</style><blockquote class="twitter-tweet" data-cards="hidden" data-lang="zh-cn"><p lang="zh" dir="ltr">B站收藏夹一堆失效视频，想做一个收藏后自动下载的小工具🤔<br><br>RSS+IFTTT+Webhooks+ffmpeg?</p><a href="https://twitter.com/DIYgod/status/1131898671111450625?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">&mdash; DIYgod (@DIYgod) 2019年5月24日</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>&nbsp;</p><p>下载B站视频很简单，you-get 一行命令的事，但我已经懒到命令都不想输了，如果投币之后 NAS 可以自己去下载就好了<a id="more"></a></p><h2 id="设想"><a href="#设想" class="headerlink" title="设想"></a>设想</h2><p>整个设想是这样的：投币操作 -&gt; RSS 更新 -&gt; IFTTT 触发 Webhook -&gt; 服务器下载</p><p>投币到 RSS 更新可以直接用 <a href="https://docs.rsshub.app/social-media.html#up-%E4%B8%BB%E6%8A%95%E5%B8%81%E8%A7%86%E9%A2%91" target="_blank" rel="noopener">RSSHub</a> 实现，RSS 更新到触发 Webhook 也可以直接在 IFTTT 里配置，整个多米诺骨牌就只缺少 Webhook 到下载这一块</p><h2 id="行动"><a href="#行动" class="headerlink" title="行动"></a>行动</h2><p>于是写了一个简单的小工具 —— <a href="https://github.com/DIYgod/download-webhook" target="_blank" rel="noopener">download-webhook</a>，它可以通过一个简单的 post 请求，触发服务器执行 you-get，下载视频到指定目录</p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><ol><li><p>给咬人猫投币</p><p><img src="/images/download-webhook1.jpg" alt=""></p></li><li><p>RSS 更新</p><p><img src="/images/download-webhook2.jpg" alt=""></p></li><li><p>IFTTT 触发</p><p><img src="/images/download-webhook3.jpg" alt=""></p></li><li><p>download-webhook 收到下载请求</p><p><img src="/images/download-webhook4.jpg" alt=""></p></li><li><p>下载完成</p><p><img src="/images/download-webhook5.png" alt=""></p></li></ol><h2 id="进一步"><a href="#进一步" class="headerlink" title="进一步"></a>进一步</h2><p>以上同样适用于自动下载 YouTube \ Instagram \ Tumblr 视频、网易云音乐歌曲等，只要 RSSHub 和 you-get 支持</p><p>另外对于图片，Webhook URL 参数直接传入图片地址也可以下载，所以也可以轻松实现自动下载 Bing 每日壁纸、甚至 Telegram 的涩图频道（这里就不做推荐了）</p>]]></content>
    
    <summary type="html">
    
      &lt;style&gt;twitter-widget{margin:0 auto!important}&lt;/style&gt;&lt;blockquote class=&quot;twitter-tweet&quot; data-cards=&quot;hidden&quot; data-lang=&quot;zh-cn&quot;&gt;&lt;p lang=&quot;zh&quot; dir=&quot;ltr&quot;&gt;B站收藏夹一堆失效视频，想做一个收藏后自动下载的小工具🤔&lt;br&gt;&lt;br&gt;RSS+IFTTT+Webhooks+ffmpeg?&lt;/p&gt;&lt;a href=&quot;https://twitter.com/DIYgod/status/1131898671111450625?ref_src=twsrc%5Etfw&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&amp;mdash; DIYgod (@DIYgod) 2019年5月24日&lt;/a&gt;&lt;/blockquote&gt;&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;下载B站视频很简单，you-get 一行命令的事，但我已经懒到命令都不想输了，如果投币之后 NAS 可以自己去下载就好了
    
    </summary>
    
    
      <category term="创作集" scheme="https://diygod.me/categories/%E5%88%9B%E4%BD%9C%E9%9B%86/"/>
    
    
  </entry>
  
  <entry>
    <title>我有特别的 RSS 使用技巧</title>
    <link href="https://diygod.me/ohmyrss/"/>
    <id>https://diygod.me/ohmyrss/</id>
    <published>2019-05-13T18:37:13.000Z</published>
    <updated>2019-12-10T09:40:35.319Z</updated>
    
    <content type="html"><![CDATA[<p>大家都知道 RSS 是一种用来消息聚合的格式规范，有着更高的阅读效率、更好的阅读体验、可以掌握主动权等等优点。</p><p>本文不会介绍 RSS 的各种好处和各式各样的阅读器，因为相关网络资料已经足够多了。这里我介绍一下怎样充分挖掘 RSS 的使用价值，因为它的用途一直被大家低估。</p><h2 id="阅读器"><a href="#阅读器" class="headerlink" title="阅读器"></a>阅读器</h2><p>从最简单的开始，我们可以看看如何用 RSS 订阅一个博客。</p><a id="more"></a><p>假设你想订阅世界上最可爱的博客 <a href="https://diygod.me/">Hi, DIYgod</a>，巧的是它已经很贴心地提供了 <a href="https://diygod.me/atom.xml">RSS 地址</a>，你只需要找一个适合自己的 RSS 阅读器。</p><p>这里有几个推荐：</p><p>iOS 和 macOS 平台 - Reeder</p><p>Android 平台 - Palabre 和 FeedMe</p><p>打开阅读器，输入链接，点击订阅</p><p><img src="/images/9102rss1.png" alt=""></p><p><img src="/images/9102rss2.png" alt=""></p><p>我们便学会了 RSS 最基础的使用方法。</p><h2 id="云服务"><a href="#云服务" class="headerlink" title="云服务"></a>云服务</h2><p>这时候你可能会发现一些问题。</p><p>只有一直开着电脑或手机才能获取到更新，如果勤劳的 DIYgod 一天更新了 100 篇文章，而 RSS 的输出数量是有限的，等一天后再开电脑，这时候阅读器刷新，你只能看到最新的几篇了（当然 DIYgod 不可能一天更新 100 篇，这个例子不是很好）。</p><p>还有，你同时在手机和电脑上订阅了 DIYgod，在电脑上看完，手机上还是未读状态，如果订阅了很多内容，这会很糟糕。</p><p>所以我们需要一个服务端来同步和刷新 RSS 内容。</p><p>其中用的人数最多的是 Feedly 和 Inoreader。</p><p>它们固然很好，但我更推荐功能更强自由度更高的自建 <a href="https://github.com/HenryQW/docker-ttrss-plugins" target="_blank" rel="noopener">Tiny Tiny RSS</a>。</p><p>自建不仅可以使数据更可控，它还有丰富的插件可以满足各种各样的需求，比如全文内容提取、Fever API 模拟、DOM 操控、繁体转简体。上面提到的阅读器都可以配合它使用。</p><p><img src="/images/9102rss3.png" alt=""></p><h2 id="RSSHub"><a href="#RSSHub" class="headerlink" title="RSSHub"></a>RSSHub</h2><p>看起来很美好，但提供 RSS 订阅的网站实在是太少了，原因很好理解：RSS 不利于网站方的广告投放、隐私搜集、用户存留等商业行为。</p><p>我们当然不满于此，于是我发起了 <a href="https://github.com/DIYgod/RSSHub" target="_blank" rel="noopener">RSSHub</a> 项目，项目原理很简单：RSSHub 请求你想要的源站数据，然后把它们以 RSS 格式输出，做到了万物皆可 RSS。</p><p>经过近 200 名开发者历时一年多的活跃开发，RSSHub 已经支持了 300 多个网站的近 600 种数据，而且这些数字还在快速增长中。</p><p>这里分享一部分我常用的路由：</p><ul><li><p>什么值得买排行榜：谨慎订阅，它浪费了我不少钱</p></li><li><p>各种老婆的手办更新：闭着眼买就完事了</p></li><li><p>微小微和猫饼的 bilibili 动态</p></li><li><p>DIYgod 关注视频动态：DIYgod 关注的 UP 主们的动态，不用刷很蠢的 B 站动态了</p></li><li><p>JFlaMusic 的 Youtube 视频</p></li><li><p>Dcard 论坛：一个超级有趣的台湾论坛，适合配合 Tiny Tiny RSS 的繁体转简体插件使用</p></li><li><p>PlayStation Store 会员限免游戏：再也不怕忘记领免费游戏（虽然领了也不会玩）</p></li><li><p>RSSHub 有新路由啦</p></li><li><p>himitsu 的 Twitter 动态：NSFW</p></li><li><p>发小的微博：不会再因为错过发小的微博被骂了</p></li><li><p>即刻工作日闹钟设置提醒</p></li><li><p>公众号“微小微”更新</p></li><li><p>豆瓣正在上映的超过 7.5 分的电影</p></li><li><p>知乎热榜</p></li></ul><h2 id="BT-下载"><a href="#BT-下载" class="headerlink" title="BT 下载"></a>BT 下载</h2><p>假设你是一个美剧爱好者，我们可以看看如何用 RSS 来追权利的游戏第 8 季。</p><p>RSSHub 有一些支持 BT 下载的路由，比如权利的游戏字幕组源订阅地址为：<a href="https://rsshub.app/zimuzu/resource/10733" target="_blank" rel="noopener">https://rsshub.app/zimuzu/resource/10733</a>，接着我们加一个 filter 参数过滤出第 8 季内容：<a href="https://rsshub.app/zimuzu/resource/10733?filter=S08" target="_blank" rel="noopener">https://rsshub.app/zimuzu/resource/10733?filter=S08</a>。</p><p>然后挑选一个正常的 BT 客户端（迅雷不算），我用的是群晖的 Download Station。</p><p>把地址添加到 BT 客户端的 RSS 订阅，这样美剧更新后 BT 客户端就会自动把最新一集下载到硬盘里，晚上下班回家打开电视就可以直接看了。</p><p>最近我订阅的美剧和日剧</p><p><img src="/images/9102rss4.jpg" alt=""></p><p>获取到更新并下载完成群晖会发邮件告诉我</p><p><img src="/images/9102rss5.png" alt=""></p><h2 id="播客"><a href="#播客" class="headerlink" title="播客"></a>播客</h2><p>假设你是一个播客爱好者，我们可以看看如何用 RSS 来扩充你的播客库。</p><p>播客客户端可以访问 RSS 检查更新，以下载系列中新的集数收听，RSSHub 或 <a href="https://getpodcast.xyz/" target="_blank" rel="noopener">getpodcast</a> 有一些支持播客的 RSS 可以直接使用，比如用 iOS 自带的播客应用订阅一个网易云音乐的 ASMR 电台：</p><p><img src="/images/9102rss6.jpg" alt=""></p><h2 id="联动"><a href="#联动" class="headerlink" title="联动"></a>联动</h2><p>RSS 可以通过 IFTTT 跟各种奇奇怪怪的东西联动。</p><p>其中一个使用案例是我的 Telegram 频道：<a href="https://t.me/awesomeDIYgod" target="_blank" rel="noopener">https://t.me/awesomeDIYgod</a>，它通过 IFTTT 监听了很多 RSS 更新，有 DIYgod 的博客更新、DIYgod 的扇贝打卡、DIYgod 的 Twitter 更新、DIYgod 喜欢的网易云音乐、DIYgod 的 bilibili 投币视频…</p><p>这样你甚至可以很容易实现通过 RSS 控制开关灯、咕咕鸡自动打印小姐姐的微博、把权利的游戏差评自动发推特艾特编剧等等操作，虽然可能没什么用就是了。</p><p>6 月 2 日更新：</p><p>一次优秀的联动：<a href="/download-webhook">《优雅地下载我的B站投币视频》</a></p><p>&nbsp;</p><p>以上是我列举的几个适合 RSS 使用的场景和方式，现在大家是不是对 “RSS 是一种用来消息聚合的格式规范” 这句话有了更深的理解呢？</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大家都知道 RSS 是一种用来消息聚合的格式规范，有着更高的阅读效率、更好的阅读体验、可以掌握主动权等等优点。&lt;/p&gt;&lt;p&gt;本文不会介绍 RSS 的各种好处和各式各样的阅读器，因为相关网络资料已经足够多了。这里我介绍一下怎样充分挖掘 RSS 的使用价值，因为它的用途一直被大家低估。&lt;/p&gt;&lt;h2 id=&quot;阅读器&quot;&gt;&lt;a href=&quot;#阅读器&quot; class=&quot;headerlink&quot; title=&quot;阅读器&quot;&gt;&lt;/a&gt;阅读器&lt;/h2&gt;&lt;p&gt;从最简单的开始，我们可以看看如何用 RSS 订阅一个博客。&lt;/p&gt;
    
    </summary>
    
    
      <category term="分享境" scheme="https://diygod.me/categories/%E5%88%86%E4%BA%AB%E5%A2%83/"/>
    
    
  </entry>
  
  <entry>
    <title>《青春猪头少年不会梦到兔女郎学姐》圣地巡礼</title>
    <link href="https://diygod.me/mai-tour/"/>
    <id>https://diygod.me/mai-tour/</id>
    <published>2019-04-12T01:33:37.000Z</published>
    <updated>2019-12-10T09:40:35.315Z</updated>
    
    <content type="html"><![CDATA[<div class="aplayer" id="aplayer-mai"></div><script>$(function(){$.ajax({url:"https://api.i-meto.com/meting/api?server=netease&type=song&id=1313052943",success:function(e){var a=new APlayer({element:document.getElementById("aplayer-mai"),showlrc:3,theme:"#8d7561",music:JSON.parse(e)[0]});window.aplayers||(window.aplayers=[]),window.aplayers.push(a)}})})</script><p>之前去日本玩了几天，最后一天没什么事了，初雪说我们去看兔女郎吧</p><p>4月7日，清晨 11 点半，我们便早早地起床坐上了前往湘南的 JR，开始了这次《青春猪头少年不会梦到兔女郎学姐》 江之岛 ~ 镰仓高校前 ~ 七里滨 ~ 藤泽车站 的圣地巡礼之旅</p><p><img src="/images/mai-tour0.jpg" alt=""></p><a id="more"></a><h2 id="江之岛"><a href="#江之岛" class="headerlink" title="江之岛"></a>江之岛</h2><p>我们从新宿坐 JR 一路南下到了江之岛，还是挺远的，全程花了一个多小时，还好我们起得早，下午 1 点就到了</p><p>除了兔女郎学姐之外，江之岛也是诸多动画与日剧的取景圣地，以至于江之岛观光案内所专门有一本动漫巡礼地图</p><p><img src="/images/mai-tour1.jpg" alt=""></p><p>上岛之后第一件事就是找麻衣代言的限定桃子味汽水</p><p>找了好几台自动售卖机才找到，超级开心，没错了，是学姐的味道！</p><p><img src="/images/mai-tour2.jpg" alt=""></p><p>我可以一口气喝 10 瓶</p><p>继续往前走，可以经过江之岛上的诸多神社，动画第 6 话中师傅与学妹参拜的是主干道上的江岛神社</p><p><img src="/images/mai-tour3.jpg" alt=""></p><p><a href="https://www.bilibili.com/bangumi/play/ep251081?t=14m36s" target="_blank" rel="noopener">视频直达</a></p><p><img src="/images/mai-tour4.jpg" alt=""></p><p><a href="https://www.bilibili.com/bangumi/play/ep251081?t=14m51s" target="_blank" rel="noopener">视频直达</a></p><p><img src="/images/mai-tour5.jpg" alt=""></p><p><a href="https://www.bilibili.com/bangumi/play/ep251081?t=15m28s" target="_blank" rel="noopener">视频直达</a></p><p>第 6 话剧情高潮的展望台</p><p><img src="/images/mai-tour6.jpg" alt=""></p><p><a href="https://www.bilibili.com/bangumi/play/ep251081?t=16m42s" target="_blank" rel="noopener">视频直达</a></p><p><img src="/images/mai-tour7.jpg" alt=""></p><p><a href="https://www.bilibili.com/bangumi/play/ep251081?t=15m47s" target="_blank" rel="noopener">视频直达</a></p><p>然后<del>坐电梯</del>爬到山顶可以登上一个高塔，塔上可以看到很远</p><p><img src="/images/mai-tour8.jpg" alt=""></p><p>江之岛游览完毕后，原路从大桥返回地铁站，会经过一段地下通道</p><p><img src="/images/mai-tour9.jpg" alt=""></p><p><a href="https://www.bilibili.com/bangumi/play/ep251081?t=14m02s" target="_blank" rel="noopener">视频直达</a></p><p><img src="/images/mai-tour10.jpg" alt=""></p><p><a href="https://www.bilibili.com/bangumi/play/ep251081?t=14m07s" target="_blank" rel="noopener">视频直达</a></p><h2 id="镰仓高校前"><a href="#镰仓高校前" class="headerlink" title="镰仓高校前"></a>镰仓高校前</h2><p>现在回到江之岛站，坐江之岛电铁线到下一站 —— 镰仓高校前站</p><p>江之电是很特别的绿皮火车，一路上的风景特别好，街道、海岸</p><p>镰仓高校前站下车，沿着铁路线向腰越方向步行，一分钟便可到达 OP 中最先登场的踢你的肾场景</p><p>这里为了拍到场景中一样的火车在路边站了好久，拍完之后惊喜地发现连左边的汽车都惊人的相似</p><p><img src="/images/mai-tour11.jpg" alt=""></p><p><a href="https://www.bilibili.com/bangumi/play/ep251076?t=58s" target="_blank" rel="noopener">视频直达</a></p><p><img src="/images/mai-tour12.jpg" alt=""></p><p><a href="https://www.bilibili.com/bangumi/play/ep251076?t=1m52s" target="_blank" rel="noopener">视频直达</a></p><p>接着返回镰仓高校前站内，这里是动画第 9 话中，小姨子代替麻衣参加 CM 的摄影拍摄地</p><p><img src="/images/mai-tour13.jpg" alt=""></p><p><a href="https://www.bilibili.com/bangumi/play/ep251084?t=18m18s" target="_blank" rel="noopener">视频直达</a></p><p><img src="/images/mai-tour14.jpg" alt=""></p><p><a href="https://www.bilibili.com/bangumi/play/ep251084?t=18m11s" target="_blank" rel="noopener">视频直达</a></p><p>在镰仓高校前站向七里滨站方向走一分钟，发现这里有很多小姐姐在拍照，这里正是著名的《灌篮高手》取景地，樱木花道与赤木晴子相遇的铁道口</p><p><img src="/images/mai-tour15.jpg" alt=""></p><p>铁道口对面就是七里滨海滩，站在沙滩上可以看见不远处的江之岛，动画中在沙滩上的诸多场景，皆是取景于此，但是没时间去了</p><h2 id="七里滨"><a href="#七里滨" class="headerlink" title="七里滨"></a>七里滨</h2><p>接着坐江之岛电铁线到下一站，便可以来到动画中出现次数最多的车站 —— 七里滨站</p><p>动画中对于七里滨车站超级还原，无论是出入口还是站台内的自动贩卖机，给我一种转头就可以看到麻衣学姐的错觉</p><p><img src="/images/mai-tour16.jpg" alt=""></p><p><a href="https://www.bilibili.com/bangumi/play/ep251076?t=9m6s" target="_blank" rel="noopener">视频直达</a></p><p><img src="/images/mai-tour17.jpg" alt=""></p><p><a href="https://www.bilibili.com/bangumi/play/ep251076?t=8m33s" target="_blank" rel="noopener">视频直达</a></p><p><img src="/images/mai-tour18.jpg" alt=""></p><p><a href="https://www.bilibili.com/bangumi/play/ep251076?t=8m31s" target="_blank" rel="noopener">视频直达</a></p><p><img src="/images/mai-tour19.jpg" alt=""></p><p><a href="https://www.bilibili.com/bangumi/play/ep251076?t=9m33s" target="_blank" rel="noopener">视频直达</a></p><p><img src="/images/mai-tour20.jpg" alt=""></p><p><a href="https://www.bilibili.com/bangumi/play/ep251080?t=20m5s" target="_blank" rel="noopener">视频直达</a></p><p>后面还有师傅与学姐上学的峰原高中、ED 中的海岸公园、初次相遇兔女郎的藤泽市综合市民图书馆、和学妹互踢屁股的御所谷公园、师傅打工的餐厅 等众多打卡点，但看时间快要误机了，此次巡礼之旅就到此为止</p><h2 id="藤泽车站"><a href="#藤泽车站" class="headerlink" title="藤泽车站"></a>藤泽车站</h2><p>回东京的时候路过了藤泽车站，师傅上学就是从这里出发，乘坐江之岛电铁线到七里滨站</p><p>藤泽车站及其附近还有很多场景，但这时候快误机了，紧张的一批，没时间仔细看了，只随便拍了一张</p><p>师傅跟学姐第一次约会迟到的改札口</p><p><img src="/images/mai-tour21.jpg" alt=""></p><p><a href="https://www.bilibili.com/bangumi/play/ep251076?t=12m29s" target="_blank" rel="noopener">视频直达</a></p><p>回到东京站拿到行李后向成田机场一路狂奔</p><p>在成田特快 Express 上面姬合照</p><p><img src="/images/mai-tour22.jpg" alt=""></p><p>赶到机场登机口时候已经开始登机了，还好赶上了，不然再晚 10 分钟只能去初雪家睡了</p><p>&nbsp;</p><p>下集预告：我们在日本一共玩了 9 天，本文是最后一天的内容，过一两周会剪一个 9 天的 vlog 出来，9 倍的快乐，记得看哟</p><p>&nbsp;</p><p>巡礼参考攻略：</p><p><a href="https://itunes.apple.com/jp/app/%E8%88%9E%E5%8F%B0%E3%82%81%E3%81%90%E3%82%8A-%E3%82%A2%E3%83%8B%E3%83%A1%E8%81%96%E5%9C%B0%E5%B7%A1%E7%A4%BC-%E3%82%B3%E3%83%B3%E3%83%86%E3%83%B3%E3%83%84%E3%83%84%E3%83%BC%E3%83%AA%E3%82%BA%E3%83%A0%E3%82%A2%E3%83%97%E3%83%AA/id680489568" target="_blank" rel="noopener">‎「舞台めぐり - アニメ聖地巡礼・コンテンツツーリズムアプリ」をApp Storeで</a></p><p><a href="https://zhuanlan.zhihu.com/p/52373529" target="_blank" rel="noopener">《青春猪头少年不会梦到兔女郎学姐》圣地巡礼攻略（详） - 知乎</a></p><p><a href="https://bbs.qyer.com/thread-3102232-1.html" target="_blank" rel="noopener">《青春期笨蛋不会做兔女郎学姐的梦》动画【圣地巡礼】 - 穷游网</a></p>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;aplayer&quot; id=&quot;aplayer-mai&quot;&gt;&lt;/div&gt;&lt;script&gt;$(function(){$.ajax({url:&quot;https://api.i-meto.com/meting/api?server=netease&amp;type=song&amp;id=1313052943&quot;,success:function(e){var a=new APlayer({element:document.getElementById(&quot;aplayer-mai&quot;),showlrc:3,theme:&quot;#8d7561&quot;,music:JSON.parse(e)[0]});window.aplayers||(window.aplayers=[]),window.aplayers.push(a)}})})&lt;/script&gt;&lt;p&gt;之前去日本玩了几天，最后一天没什么事了，初雪说我们去看兔女郎吧&lt;/p&gt;&lt;p&gt;4月7日，清晨 11 点半，我们便早早地起床坐上了前往湘南的 JR，开始了这次《青春猪头少年不会梦到兔女郎学姐》 江之岛 ~ 镰仓高校前 ~ 七里滨 ~ 藤泽车站 的圣地巡礼之旅&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/images/mai-tour0.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="日记本" scheme="https://diygod.me/categories/%E6%97%A5%E8%AE%B0%E6%9C%AC/"/>
    
    
  </entry>
  
  <entry>
    <title>HeadlessChrome 自动化测试探索</title>
    <link href="https://diygod.me/headlesschrome/"/>
    <id>https://diygod.me/headlesschrome/</id>
    <published>2019-03-18T01:38:38.000Z</published>
    <updated>2019-12-10T09:40:35.315Z</updated>
    
    <content type="html"><![CDATA[<p>埋点一直是B站 HTML5 播放器开发和测试过程中的一个痛点，埋点的种类和接口参数很多，测试很麻烦也很容易出错</p><p>虽然测试很麻烦，但它们的规则都很简单，比如点击或 hover 一个按钮、错误上报、播放和性能上报，那么能不能通过自动化的 E2E 测试来代替这些又繁琐又机械化又容易出错的测试工作呢？</p><p>在一次埋点线上事故后，我花了一天时间做了一些探索，最后效果还不错，在这里做一下简单的总结</p><a id="more"></a><h2 id="编写测试脚本"><a href="#编写测试脚本" class="headerlink" title="编写测试脚本"></a>编写测试脚本</h2><p>模拟用户操作就需要用到无头浏览器，我采用了 Jest + Puppeteer 的组合</p><p>Jest 是一个测试框架，Puppeteer 是用来控制 Chrome 或 Chromium</p><p>选择 Jest 是因为我对 Jest 最熟悉，然后又找到了一个 preset: <a href="https://github.com/smooth-code/jest-puppeteer" target="_blank" rel="noopener">jest-puppeteer</a>，不是必需的，但它可以简化很多 Puppeteer 操作</p><p>安装依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">npm install --save-dev jest jest-puppeteer puppeteer</span></pre></td></tr></table></figure><p>测试脚本很简单：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'log'</span>, () =&gt; &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    beforeAll(<span class="keyword">async</span> () =&gt; &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        page.goto(<span class="string">'https://www.bilibili.com/video/av44890855'</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    &#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    it(<span class="string">'play_screen'</span>, <span class="keyword">async</span> (done) =&gt; &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        page.on(<span class="string">'request'</span>, (request) =&gt; &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span> (request.url().match(<span class="regexp">/^https:\/\/data\.bilibili\.com\/log\/web\?play_screen...参数参数/</span>)) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">                done();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        page.click(<span class="string">'video'</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    &#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure><p>让 HeadlessChrome 打开一个播放页，监控页面请求的接口，模拟点击 video 元素，监控到浏览器请求了 play_screen 埋点即测试成功</p><p>看起来没什么问题，开开心心地执行了测试，结果 failed</p><p>发生了什么？配置 <code>headless: false</code> 观看了一下测试过程</p><p><img src="/images/headlesschrome1.jpg" alt=""></p><p>发现是因为检测到浏览器不支持 HTML5 播放器，加载了 Flash 播放器</p><p>Puppeteer <a href="https://github.com/GoogleChrome/puppeteer#q-what-features-does-puppeteer-not-support" target="_blank" rel="noopener">文档里说道</a></p><blockquote><p>Puppeteer is bundled with Chromium–not Chrome…Puppeteer does not support licensed formats such as AAC or H.264</p></blockquote><p>解决方法也很简单，把 Puppeteer 自带的 Chromium 换成本地的 Chrome</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">launch: &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    executablePath: <span class="string">'/Applications/Google Chrome.app/Contents/MacOS/Google Chrome'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>测试通过</p><p><img src="/images/headlesschrome2.jpg" alt=""></p><h2 id="Chrome-as-a-service"><a href="#Chrome-as-a-service" class="headerlink" title="Chrome as a service"></a>Chrome as a service</h2><p>刚才使用了本地的 Chrome，会依赖本地环境，而且想作为自动化测试跑在测试机上也是不行的</p><p>所以我又在测试机上跑了一个 docker 容器：<a href="https://hub.docker.com/r/browserless/chrome" target="_blank" rel="noopener">browserless/chrome</a>，它可以把 Chrome 当做一个 service，测试脚本使用 websocket 协议操作 docker 里的 Chrome，这样就避免了依赖本地 Chrome</p><p>启动容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">docker pull browserless/chrome:release-chrome-stable</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">docker run -d -p 3000:3000 browserless/chrome:release-chrome-stable</span></pre></td></tr></table></figure><p>使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">connect: &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    browserWSEndpoint: <span class="string">'ws://localhost:3000'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h2 id="劫持-js"><a href="#劫持-js" class="headerlink" title="劫持 js"></a>劫持 js</h2><p>这样用的是线上版本，根本没有测试本地代码啊！</p><p>哦，忘了说了，还需要把线上 js 劫持为本地版本</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> page.setRequestInterception(<span class="literal">true</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">page.goto(<span class="string">'https://www.bilibili.com/video/av44890855'</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">page.on(<span class="string">'request'</span>, (request) =&gt; &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (request.url().match(<span class="regexp">/player\.js/</span>)) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        request.respond(&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">            status: <span class="number">200</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">            contentType: <span class="string">'application/javascript'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">            body: fs.readFileSync(<span class="string">'dist/release/player.js'</span>).toString()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        request.continue();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;埋点一直是B站 HTML5 播放器开发和测试过程中的一个痛点，埋点的种类和接口参数很多，测试很麻烦也很容易出错&lt;/p&gt;&lt;p&gt;虽然测试很麻烦，但它们的规则都很简单，比如点击或 hover 一个按钮、错误上报、播放和性能上报，那么能不能通过自动化的 E2E 测试来代替这些又繁琐又机械化又容易出错的测试工作呢？&lt;/p&gt;&lt;p&gt;在一次埋点线上事故后，我花了一天时间做了一些探索，最后效果还不错，在这里做一下简单的总结&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="创作集" scheme="https://diygod.me/tags/%E5%88%9B%E4%BD%9C%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>2018 年终总结</title>
    <link href="https://diygod.me/2018/"/>
    <id>https://diygod.me/2018/</id>
    <published>2018-12-31T02:06:16.000Z</published>
    <updated>2019-12-10T09:40:35.315Z</updated>
    
    <content type="html"><![CDATA[<p>2018，无所事事又带点丧的一年，感觉很对不起 23 岁这个年纪，要跟自己说声对不起了<a id="more"></a></p><h2 id="开源"><a href="#开源" class="headerlink" title="开源"></a>开源</h2><p>今年 4 月开坑了 <a href="https://github.com/DIYgod/RSSHub" target="_blank" rel="noopener">RSSHub</a>，让自己学到了的很多东西，认识了很多人，算是今年为数不多的有趣的事情之一了</p><p><a href="https://github.com/MoePlayer/APlayer" target="_blank" rel="noopener">APlayer</a> 和 <a href="https://github.com/MoePlayer/DPlayer" target="_blank" rel="noopener">DPlayer</a> 有半年时间在咕咕咕</p><p>2019 期望再开一个 LTS 一年以上的坑，暂时还没什么想法 🤯</p><p><img src="/images/2018-2.jpg" alt=""></p><p><img src="/images/2018-1.jpg" alt=""></p><h2 id="足迹"><a href="#足迹" class="headerlink" title="足迹"></a>足迹</h2><p>参展：</p><p><a href="https://diygod.me/2018-bao-zou-yu-ren-jie/">暴走 yu 人节</a><br><a href="https://diygod.me/bw2018/">bw &amp; bml</a><br><a href="https://diygod.me/cj2018/">ChinaJoy</a><br>CP22<br><a href="https://diygod.me/cp2018sp/">CP2018SP</a><br>Google 开发者大会<br>CP23</p><p>旅游：</p><p>无</p><p>漫展都快去烦了，却没意识到今年一次都没出去旅游，2019 要好好制定一下出行计划了，想 3 月底去日本看樱花 🌸，想去成都找阿猫和七夏姐姐吃火锅，想去深圳找汤圆逛下腾讯，然后去澳门塔蹦极</p><p><img src="/images/2018-3.jpg" alt=""></p><h2 id="技能"><a href="#技能" class="headerlink" title="技能"></a>技能</h2><p>🎨 画画：<a href="https://twitter.com/DIYgod/status/1005134065412943872" target="_blank" rel="noopener">一</a> <a href="https://twitter.com/DIYgod/status/1006221633470660608" target="_blank" rel="noopener">二</a> <a href="https://twitter.com/DIYgod/status/1011283860930215941" target="_blank" rel="noopener">三</a>，重拾了小学放下的画笔（<del>iPad Pencil</del>），画画真好玩，可惜 darling 烂尾之后很生气，没什么想画的了，就没能坚持下来，2019 再给我一个画画的动力吧</p><p>🤸‍♀️ HIPHOP 街舞：运动强度极大，上完体验课浑身疼了好几天，但是很酷，报了 10 节私教课和 9 节大课，还没开始正式上课，2019 应该可以坚持下来，毕竟挺贵的，这几节课就花了 8000 块左右（两个人）</p><p>🎬 vlog：<a href="https://diygod.me/bw2018/">一</a> <a href="https://diygod.me/cj2018/">二</a> <a href="https://diygod.me/cp2018sp/">三</a>，买了 Osmo Mobile 2，漫展拍了几次，已经失去兴趣了</p><p>🍛 做饭：在室友的指导下做了一盘<a href="https://twitter.com/DIYgod/status/1044928336802136064" target="_blank" rel="noopener">小炒肉</a>，比想象中简单嘛</p><p>🎃 做南瓜灯：<a href="https://twitter.com/DIYgod/status/1057545543252041728" target="_blank" rel="noopener">一</a> <a href="https://twitter.com/DIYgod/status/1057614657169514496" target="_blank" rel="noopener">二</a>，放进灯的一瞬间惊喜地跳了起来，很有成就感，最后一直放烂了才舍得扔</p><h2 id="健康"><a href="#健康" class="headerlink" title="健康"></a>健康</h2><p>12 月才开始健身，一天 keep 一天跑步，结果强度设置太大，喜闻乐见地伤到了，休息一周半了，没意外的话下周会恢复</p><p>体重没减下来，但也没增加</p><p>早睡：大失败</p><p>2019 想把头发染成橘黄色 👩‍🦰</p><p><img src="/images/2018-4.jpg" alt=""></p><h2 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a>游戏</h2><p>守望先锋练成了一手无敌强的法鸡，但在七夏姐姐不玩了之后也好几个月没玩过了</p><p>买了 PS4，肝了 60 多个小时后通关（出新手村）了怪物猎人世界，结尾的 BGM 真好听，通关后又被双爆鳞龙和炎妃龙打自闭了 🤐</p><p>堡垒之夜、分手厨房 2、王者荣耀、大表哥 2、跳楼少女、太鼓达人也稍微玩了一下下</p><p><img src="/images/2018-5.jpg" alt=""></p><h2 id="影视"><a href="#影视" class="headerlink" title="影视"></a>影视</h2><p>话剧：</p><p>《乌龙山伯爵》：最佳<br>《李茶的姑妈》<br>《皇帝的新娘》</p><p>电视剧：</p><p>《我是大哥大》：最佳<br>《保镖》<br>《迷雾》<br>《逃避虽可耻但有用》<br>《黑镜》<br>《这份恋情有罪吗！？》<br>《无法成为野兽的我们》<br>《西部世界》<br>《魔法觉醒》<br>《人类清除计划》</p><p>番剧：</p><p>《DARLING in the FRANXX》：最佳（勉强）<br>《齐木楠雄的灾难 第二季》<br>《青春猪头少年不会梦到兔女郎学姐》<br>《千绪的上学路》<br>《citrus～柑橘味香气～》<br>《工作细胞》<br>《路人女主的养成方法》<br>《NO GAME NO LIFE》<br>《我家女仆有够烦！》<br>《進擊的巨人 第三季》<br>《凸变英雄》<br>《JOJO的奇妙冒险 黄金之风》<br>《OVERLORD》<br>《博多豚骨拉面团》<br>《pop子和pipi美的日常》<br>《刻刻》</p><p>电影：</p><p>太多了，略过</p><p>一共 3 部话剧，10 部电视剧，16 部番剧，超出预期 🙋‍♀️</p><p>有很多想读的书一本都没读，2019 期望可以多读一些书</p><p><img src="/images/2018-6.jpg" alt=""></p><h2 id="情感"><a href="#情感" class="headerlink" title="情感"></a>情感</h2><p>跟酸奶的感情依然很好，她现在就在我旁边睡觉 🐱</p><p>跟发小的地理距离变近了，但是…事情变得怪怪的，希望只是暂时的</p><p>还有很多想说的，不能写出来</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>去年 ch 在她 23 岁的年终总结里写到</p><blockquote><p>现在的年纪</p><p>已经是不能再马马虎虎生活工作的年纪了</p><p>再也不是心情一好起来 什么都会好起来的年纪</p></blockquote><p>上次看到还不以为意，现在感觉真是一针见血</p><p>2019 希望可以活得更认真一点，尽量让自己变得充实有趣起来，但说实话我也没什么信心</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2018，无所事事又带点丧的一年，感觉很对不起 23 岁这个年纪，要跟自己说声对不起了
    
    </summary>
    
    
      <category term="日记本" scheme="https://diygod.me/categories/%E6%97%A5%E8%AE%B0%E6%9C%AC/"/>
    
    
  </entry>
  
  <entry>
    <title>从零开始的 NAS 生活</title>
    <link href="https://diygod.me/nas/"/>
    <id>https://diygod.me/nas/</id>
    <published>2018-11-08T23:40:52.000Z</published>
    <updated>2019-12-10T09:40:35.315Z</updated>
    
    <content type="html"><![CDATA[<p>很早就想组一个家庭 NAS 设备，趁着这次双十一，在京东买了一台群晖 DS218play 和一块酷狼 4T 硬盘，已经用了两天了，我的感受是：</p><p><strong>爽爆</strong><a id="more"></a></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>目前常用的有下面几个功能</p><h3 id="Time-Machine"><a href="#Time-Machine" class="headerlink" title="Time Machine"></a>Time Machine</h3><p><img src="/images/nas1.jpg" alt=""></p><p>之前用 Time Machine 做备份要一直连着移动硬盘，很麻烦而且容易忘记，经常是 Mac 提醒我已经 10 多天没备份了才想起来插上移动硬盘备份一下，有 NAS 之后可以实现无线和远程备份，在任何地方都可以让 Mac 每小时自动备份到家里的 NAS 里</p><h3 id="BT-下载"><a href="#BT-下载" class="headerlink" title="BT 下载"></a>BT 下载</h3><p><img src="/images/nas2.jpg" alt=""></p><p>使用 RSS 订阅喜欢的番剧或美剧，有更新可以自动下载，或者在公司<del>摸鱼</del>的时候看到一部喜欢的电影，可以远程登录到家里的群晖，添加 BT 任务，晚上回家就可以直接看了</p><h3 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h3><p>这是 NAS 最基础的功能了，它最大的好处是可以快速在不同设备间共享</p><p>比如我在电脑上把樱岛麻衣的照片存到 NAS 里，打开手机可以随时看</p><p><img src="/images/nas3.jpg" alt=""></p><p>再比如我下载了一部日剧，根据我心情的不同，我有可能想坐在桌子前用电脑看，也有可能想躺在床上用 iPad 看</p><p><img src="/images/nas4.png" alt=""></p><p>而在有 NAS 之前，我必须把 iPad 用数据线连到电脑上，打开难用的要死的 iTunes，然后把视频拷贝到 iPad 里才能看</p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>群晖有一个叫 QuickConnect 的东西，可以分配一个群晖的域名，可以直接用它在公网远程连接</p><p>但我想绑定自己的域名，还是折腾了一下，没想到那么麻烦</p><h3 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h3><p>为了将外网对应到内网的 NAS 上</p><p>家里的电信宽带已经有了公网 IP，设置下端口转发就行了，以为很简单，没想到是个大坑</p><p><img src="/images/nas5.jpg" alt=""></p><p>用路由器的 DMZ 功能设置好转发之后，发现没效果，访问公网 IP 返回的是光猫的登录界面，才知道光猫和路由器不是桥接，还需要在光猫上设置转发，尝试了下发现我没有光猫的超级管理员账号，没有权限设置</p><p>Google 上查到了几种电信光猫的破解方法，试了都无效，凌晨4点多给电信客服打电话，居然有人接…约了早上电信师傅上门处理</p><p>早上电信师傅过来给了超级管理员账号</p><p>超级管理员账号进了光猫后台，把光猫和路由器设置成桥接后端口转发正常了</p><h3 id="DDNS"><a href="#DDNS" class="headerlink" title="DDNS"></a>DDNS</h3><p>为了将动态的公网 IP 映射到我的域名上</p><p><img src="/images/nas6.jpg" alt=""></p><p><img src="/images/nas7.jpg" alt=""></p><p>群晖和路由器都带了 DDNS 功能，却发现都不支持 CloudXNS…只能自己动手了</p><p>惊喜地发现了这个东西：<a href="https://github.com/lixuy/CloudXNS-DDNS-with-BashShell" target="_blank" rel="noopener">https://github.com/lixuy/CloudXNS-DDNS-with-BashShell</a></p><p><img src="/images/nas8.jpg" alt=""></p><p>利用群晖的任务计划功能 10 分钟跑一下这个脚本，实现了 CloudXNS 的 DDNS</p><h3 id="SSL-证书"><a href="#SSL-证书" class="headerlink" title="SSL 证书"></a>SSL 证书</h3><p><img src="/images/nas9.jpg" alt=""></p><p>群晖自带了自动从 Let’s Encrypt 获取证书的功能，真香</p><p>却发现群晖用的验证方式必须用 80 端口，国内根本不能用，真臭</p><p><img src="/images/nas10.jpg" alt=""></p><p>也找到了解决方案：<a href="http://www.up4dev.com/2018/05/29/synology-ssl-wildcard-cert-update/" target="_blank" rel="noopener">http://www.up4dev.com/2018/05/29/synology-ssl-wildcard-cert-update/</a></p><p>同样是利用群晖的任务计划功能一个月跑一下这个脚本，解决了 SSL 证书和自动续签</p><p><img src="/images/nas11.jpg" alt=""></p><p>最后实现了通过自己的域名 <a href="https://nas.diygod.me:2222" target="_blank" rel="noopener">https://nas.diygod.me:2222</a> 远程访问 NAS，细心的小可爱刚才已经在文章第一张图里看到了这个域名</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很早就想组一个家庭 NAS 设备，趁着这次双十一，在京东买了一台群晖 DS218play 和一块酷狼 4T 硬盘，已经用了两天了，我的感受是：&lt;/p&gt;&lt;p&gt;&lt;strong&gt;爽爆&lt;/strong&gt;
    
    </summary>
    
    
      <category term="分享境" scheme="https://diygod.me/categories/%E5%88%86%E4%BA%AB%E5%A2%83/"/>
    
    
  </entry>
  
  <entry>
    <title>C94 &amp; CP2018SP 参展日记</title>
    <link href="https://diygod.me/cp2018sp/"/>
    <id>https://diygod.me/cp2018sp/</id>
    <published>2018-08-26T16:28:11.000Z</published>
    <updated>2019-12-10T09:40:35.315Z</updated>
    
    <content type="html"><![CDATA[<p>C94 和 CP2018SP 不是同一天，但都是同人展，时间又很近，就写在一起了</p><h2 id="C94"><a href="#C94" class="headerlink" title="C94"></a>C94</h2><p>Comic Market，全球最大的同人展，8 月 10 日在东京举办，我当然没钱去，三天都在 Twitter 云参展，口水流了一地</p><p>托朋友到 Aniplex 展台买了矢吹健太朗的 darling 本子，毕竟官方画师质量超级棒，舔爆！</p><p>如果再给我一次机会，我应该会买三本，一本自舔一本收藏一本传教</p><a id="more"></a><div id="player-cp1"></div><script type="text/javascript" src="https://player.dogecloud.com/js/loader"></script><script type="text/javascript">var player=new DogePlayer({container:document.getElementById("player-cp1"),userId:17,vcode:"596384de52393e72",autoPlay:!1})</script><p>&nbsp;</p><h2 id="CP2018SP"><a href="#CP2018SP" class="headerlink" title="CP2018SP"></a>CP2018SP</h2><p>出发前发现云台坏了，辣鸡大疆，所以这次没有 vlog 了</p><p>Comicup，8 月 25 日在上海举办，CP2018SP 规模比今年5月份的 CP22 小了很多，跟 C94 更没法比，全场两个多小时就逛完了，然后实在无聊又重头逛了一遍…</p><p>虽然规模小但还是买到了很多喜欢的本子，把遇到的 darling 都买了，舔爆！</p><p><img src="/images/cp2018sp.jpg" alt=""></p><p>对比 CP22</p><p><img src="/images/cp22.jpg" alt=""></p><p>出来之后和朋友去吃了牛肉火锅，然后看蚁人，然后又撸串，撸串这家散装的草莓啤酒超级好喝，讨厌喝酒的我都喝了一大杯，看 Freddy 开心得手舞足蹈就知道有多好喝了</p><style>#player-cp2 .dplayer-notice{display:none}</style><div id="player-cp2"></div><script type="text/javascript" src="https://player.dogecloud.com/js/loader"></script><script type="text/javascript">var player=new DogePlayer({container:document.getElementById("player-cp2"),userId:17,vcode:"af7819dc291a5920",autoPlay:!0,loop:!0})</script><p>&nbsp;</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;C94 和 CP2018SP 不是同一天，但都是同人展，时间又很近，就写在一起了&lt;/p&gt;&lt;h2 id=&quot;C94&quot;&gt;&lt;a href=&quot;#C94&quot; class=&quot;headerlink&quot; title=&quot;C94&quot;&gt;&lt;/a&gt;C94&lt;/h2&gt;&lt;p&gt;Comic Market，全球最大的同人展，8 月 10 日在东京举办，我当然没钱去，三天都在 Twitter 云参展，口水流了一地&lt;/p&gt;&lt;p&gt;托朋友到 Aniplex 展台买了矢吹健太朗的 darling 本子，毕竟官方画师质量超级棒，舔爆！&lt;/p&gt;&lt;p&gt;如果再给我一次机会，我应该会买三本，一本自舔一本收藏一本传教&lt;/p&gt;
    
    </summary>
    
    
      <category term="日记本" scheme="https://diygod.me/categories/%E6%97%A5%E8%AE%B0%E6%9C%AC/"/>
    
    
  </entry>
  
  <entry>
    <title>2018 ChinaJoy 参展日记</title>
    <link href="https://diygod.me/cj2018/"/>
    <id>https://diygod.me/cj2018/</id>
    <published>2018-08-10T23:42:32.000Z</published>
    <updated>2019-12-10T09:40:35.315Z</updated>
    
    <content type="html"><![CDATA[<p>8月4日去了 ChinaJoy，人还是一如既往的多</p><p>AC 娘真可爱，舔爆</p><p>第二次拍 vlog，然后拍完懒得剪，还是 Freddy 帮我剪的，我在视频里真可爱</p><div id="player-cj"></div><script type="text/javascript" src="https://player.dogecloud.com/js/loader"></script><script type="text/javascript">var player=new DogePlayer({container:document.getElementById("player-cj"),userId:17,vcode:"10c5de157e5129c0",autoPlay:!1})</script><a id="more"></a><p>&nbsp;</p><p><img src="/images/cj1.jpg" alt=""></p><p>又见到了王尼玛和全体暴走家族成员，但这次心情很复杂</p><p>终于买到了之前一直碎碎念的 AC 娘包子头，然后被一万个人问在哪里弄的</p><p><del>软磨硬泡求</del>拿到了很喜欢的触手直播的毛绒触手，懒得拍照了你们自己想象吧</p><p>然后晚上和<a href="https://wj.qq.com/s2/3318631/2970" target="_blank" rel="noopener">绒布球群</a>里的绒布球们吃了饭，第二届绒布球线下py</p><p><img src="/images/cj2.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;8月4日去了 ChinaJoy，人还是一如既往的多&lt;/p&gt;&lt;p&gt;AC 娘真可爱，舔爆&lt;/p&gt;&lt;p&gt;第二次拍 vlog，然后拍完懒得剪，还是 Freddy 帮我剪的，我在视频里真可爱&lt;/p&gt;&lt;div id=&quot;player-cj&quot;&gt;&lt;/div&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;https://player.dogecloud.com/js/loader&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt;var player=new DogePlayer({container:document.getElementById(&quot;player-cj&quot;),userId:17,vcode:&quot;10c5de157e5129c0&quot;,autoPlay:!1})&lt;/script&gt;
    
    </summary>
    
    
      <category term="日记本" scheme="https://diygod.me/categories/%E6%97%A5%E8%AE%B0%E6%9C%AC/"/>
    
    
  </entry>
  
  <entry>
    <title>2018 bw &amp; bml 参展日记</title>
    <link href="https://diygod.me/bw2018/"/>
    <id>https://diygod.me/bw2018/</id>
    <published>2018-08-06T00:00:05.000Z</published>
    <updated>2019-12-10T09:40:35.315Z</updated>
    
    <content type="html"><![CDATA[<p>7月21日和22日去了 bw 和 bml，面基了一万个人，py 通红</p><h3 id="BILIBILI-WORLD"><a href="#BILIBILI-WORLD" class="headerlink" title="BILIBILI WORLD"></a>BILIBILI WORLD</h3><p>2233 真可爱，舔爆</p><p>第一次拍 vlog，然后拍完懒得剪，还是 Freddy 帮我剪的</p><div id="player-bw"></div><script type="text/javascript" src="https://player.dogecloud.com/js/loader"></script><script type="text/javascript">var player=new DogePlayer({container:document.getElementById("player-bw"),userId:17,vcode:"e831056159c1f1a4",autoPlay:!1})</script><a id="more"></a><p>&nbsp;</p><p>然后晚上和<a href="https://wj.qq.com/s2/3318631/2970" target="_blank" rel="noopener">绒布球群</a>里的8个绒布球们吃了海底捞，第一届绒布球线下py</p><p>说好的都是肥宅，结果一个比一个<del>受</del>，不对，瘦</p><p>小桐桐、李聆歌、Siki、小萌、烷、冰喵、二九、DIYgod、Freddy</p><p><img src="/images/bw1.jpg" alt=""></p><h3 id="BILIBILI-MACRO-LINK"><a href="#BILIBILI-MACRO-LINK" class="headerlink" title="BILIBILI MACRO LINK"></a>BILIBILI MACRO LINK</h3><p>白天冒着台风跟可爱的 lwl 面基，带 lwl 逛了B站总部和撸酸奶</p><p><img src="/images/bw2.jpg" alt=""></p><p>又跟 <a href="https://www.rixcloud.com/" target="_blank" rel="noopener">richCloud</a> 老板 Zero 撸了串</p><p><img src="/images/bw3.jpg" alt=""></p><p>BML!</p><p><img src="/images/bw4.jpg" alt=""></p><p>一进场就被震撼到了，气氛超级嗨，每个人都在用荧光棒伴随节奏打着 call，特别是极乐净土出现的时候，非常激动，嗓子都要喊哑了</p><p>可惜坐的太靠后了，嘉宾的脸都看不清，希望明年可以买得起前面的位子（不要问我为什么公司不发票，用爱发电）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;7月21日和22日去了 bw 和 bml，面基了一万个人，py 通红&lt;/p&gt;&lt;h3 id=&quot;BILIBILI-WORLD&quot;&gt;&lt;a href=&quot;#BILIBILI-WORLD&quot; class=&quot;headerlink&quot; title=&quot;BILIBILI WORLD&quot;&gt;&lt;/a&gt;BILIBILI WORLD&lt;/h3&gt;&lt;p&gt;2233 真可爱，舔爆&lt;/p&gt;&lt;p&gt;第一次拍 vlog，然后拍完懒得剪，还是 Freddy 帮我剪的&lt;/p&gt;&lt;div id=&quot;player-bw&quot;&gt;&lt;/div&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;https://player.dogecloud.com/js/loader&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt;var player=new DogePlayer({container:document.getElementById(&quot;player-bw&quot;),userId:17,vcode:&quot;e831056159c1f1a4&quot;,autoPlay:!1})&lt;/script&gt;
    
    </summary>
    
    
      <category term="日记本" scheme="https://diygod.me/categories/%E6%97%A5%E8%AE%B0%E6%9C%AC/"/>
    
    
  </entry>
  
  <entry>
    <title>Polymer 初体验</title>
    <link href="https://diygod.me/polymer/"/>
    <id>https://diygod.me/polymer/</id>
    <published>2018-05-30T23:45:43.000Z</published>
    <updated>2019-12-10T09:40:35.319Z</updated>
    
    <content type="html"><![CDATA[<p>作为开发者，我们都知道组件化、标准化和代码复用的重要性，前端也从未停止过对前端组件化的尝试，产生了各式各样的组件化技术，从 Vue React 等前端框架，到 webpack 这样的全站打包工具</p><p>但前端一直缺乏这样一个模块化标准和浏览器级别的原生组件化方案</p><p>Web Components 是 WHATWG 和 W3C 正在尝试的 Web 组件化方案，为组件化的前端开发提供浏览器级别的支持。它由四项主要技术组成：Shadow DOM、Custom Elements、HTML Import、HTML Template</p><p>Polymer 项目是 Google 的基于 Web Components 机制的框架，定位于简单的 Polyfill 和易用性封装，包括数据绑定，模板声明，事件系统等。Google 在去年就已经将其应用到了 YouTube 上</p><p>Polymer 3.0 在 20 天前刚刚发布，正好 B 站播放器近期需要重构所有 UI 组件，所以做了这样的一个调研，下文所有 demo 托管在 <a href="https://github.com/DIYgod/polymer-demos" target="_blank" rel="noopener">polymer-demos</a>，这些小 demo 只作为一些简单体验，想了解 Polymer 的完整功能建议阅读<a href="https://www.polymer-project.org/3.0/docs/devguide/feature-overview" target="_blank" rel="noopener">官方文档</a></p><a id="more"></a><h2 id="浏览器支持"><a href="#浏览器支持" class="headerlink" title="浏览器支持"></a>浏览器支持</h2><p>目前使用 Web Components 的最大阻碍就是浏览器支持程度低，且 Polyfills 体积相对偏大（90+kb）</p><p>目前只有新版 Chrome Opera 和 Safari 可以提供完整的原生支持，具体支持情况可以参考 <a href="https://caniuse.com/#search=web%20components" target="_blank" rel="noopener">caniuse.com</a>，使用 <a href="https://github.com/webcomponents/webcomponentsjs" target="_blank" rel="noopener">Polyfills</a> 后可以支持到 Edge IE11+ Firefox Safari9+</p><p>Polyfills 有三个主要的文件：</p><ul><li><code>webcomponents-bundle.js</code>: 包含了所有 polyfills</li><li><code>webcomponents-loader.js</code>: 可以检测浏览器支持情况，然后去加载对应的 polyfills，对有原生支持的浏览器可以减少不必要的浪费</li><li><code>custom-elements-es5-adapter.js</code>: 注册 Custom Elements 时需要使用 ES6 语法，所以当浏览器不支持 ES6 时需要做额外的处理，再引用这个文件就好了</li></ul><p>总的来说兼容最多浏览器的最佳实践是这样的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">scirpt</span> <span class="attr">src</span>=<span class="string">"webcompoments-loader.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">scirpt</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">scirpt</span> <span class="attr">src</span>=<span class="string">"custom-elements-es5-adapter.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">scirpt</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"index.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></pre></td></tr></table></figure><p>其中 <code>webcompoments-loader.js</code> 必须单独引用，<code>custom-elements-es5-adapter.js</code> 可以跟 <code>polymer</code> 和你的代码用 Webpack 合到一起，但注意 <code>custom-elements-es5-adapter.js</code> 不要做额外的编译，其他代码用 babel 编译成 ES5，完整实践可以参考 <a href="https://github.com/DIYgod/polymer-demos" target="_blank" rel="noopener">polymer-demos</a></p><h2 id="Custom-elements"><a href="#Custom-elements" class="headerlink" title="Custom elements"></a>Custom elements</h2><p>下面尝试定义一个最简单的自定义元素，从 <code>PolymerElement</code> 继承一个类，然后传给 <code>window.customElements.define</code></p><p><strong>效果</strong></p><demo-custom-elements></demo-custom-elements><p><strong>HTML 代码</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">demo-custom-elements</span>&gt;</span><span class="tag">&lt;/<span class="name">demo-custom-elements</span>&gt;</span></span></pre></td></tr></table></figure><p><strong>JS 代码</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; PolymerElement &#125; <span class="keyword">from</span> <span class="string">'@polymer/polymer'</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoCustomElements</span> <span class="keyword">extends</span> <span class="title">PolymerElement</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">constructor</span>() &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">super</span>();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">this</span>.textContent = <span class="string">`I'm a custom element.`</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.customElements.define(<span class="string">'demo-custom-elements'</span>, DemoCustomElements);</span></pre></td></tr></table></figure><h2 id="Shadow-dom"><a href="#Shadow-dom" class="headerlink" title="Shadow dom"></a>Shadow dom</h2><p>Shadow dom 是一个隐藏、独立的 DOM，它的 HTML CSS 和行为与常规的 DOM 树分离，这样不同的功能不会混在一起，内外的 CSS 也互不影响</p><p>Shadow dom 不是一个新事物，一直以来，浏览器用它来封装一个元素的内部结构。以 <code>&lt;video&gt;</code> 元素为例。你所能看到的只是一个 <code>&lt;video&gt;</code> 标签，实际上，在它的 Shadow dom 中包含一系列的按钮和控制器</p><p>下面例子中，Shadow dom 里的 p 标签定义了 CSS 属性 <code>color</code>，它不会泄露到外部</p><p><strong>效果</strong></p><style>html{--my-background:#eee}</style><demo-shadow-dom></demo-shadow-dom><p>I am outside of demo-shadow-dom. Because of encapsulation, demo-shadow-dom's styles won't leak to me.</p><p><strong>HTML 代码</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    html &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="css">        <span class="selector-tag">--my-background</span>: <span class="selector-id">#eee</span>;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">demo-shadow-dom</span>&gt;</span><span class="tag">&lt;/<span class="name">demo-shadow-dom</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>I am outside of demo-shadow-dom. Because of encapsulation, demo-shadow-dom's styles won't leak to me.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></pre></td></tr></table></figure><p><strong>JS 代码</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; PolymerElement, html &#125; <span class="keyword">from</span> <span class="string">'@polymer/polymer'</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoShadowDom</span> <span class="keyword">extends</span> <span class="title">PolymerElement</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">static</span> <span class="keyword">get</span> template () &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> html`<span class="xml"></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="xml">                p &#123;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="xml">                    color: #F5712C;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="xml">                    background-color: var(--my-background);</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="xml">                &#125;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>I'm a DOM element.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is my shadow DOM!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="xml">        `</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.customElements.define(<span class="string">'demo-shadow-dom'</span>, DemoShadowDom);</span></pre></td></tr></table></figure><h2 id="HTML-templates"><a href="#HTML-templates" class="headerlink" title="HTML templates"></a>HTML templates</h2><p>使用 <code>&lt;template&gt;</code> 和 <code>&lt;slot&gt;</code> 组成 shadow DOM</p><p><strong>效果</strong></p><demo-html-template><p>I'm a custom slot.</p></demo-html-template><p><strong>HTML 代码</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">demo-html-template</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>I'm a custom slot.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">demo-html-template</span>&gt;</span></span></pre></td></tr></table></figure><p><strong>JS 代码</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; PolymerElement, html &#125; <span class="keyword">from</span> <span class="string">'@polymer/polymer'</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'@polymer/polymer/lib/elements/dom-repeat.js'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; DemoShadowDom &#125; <span class="keyword">from</span> <span class="string">'./demo-shadow-dom'</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoHTMLTemplate</span> <span class="keyword">extends</span> <span class="title">DemoShadowDom</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">constructor</span>() &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">super</span>();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">this</span>.employees = [</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">            &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">                name: <span class="string">'Blog'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">                link: <span class="string">'https://diygod.me'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">            &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">            &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">                name: <span class="string">'GitHub'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">                link: <span class="string">'https://github.com/DIYgod'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">            &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">        ];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">static</span> <span class="keyword">get</span> template () &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> html`<span class="xml"></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">strong</span>&gt;</span>Template:<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">"dom-repeat"</span> <span class="attr">items</span>=<span class="string">"&#123;&#123;employees&#125;&#125;"</span>&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123;item.link&#125;&#125;"</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">strong</span>&gt;</span>Slot:<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">strong</span>&gt;</span>Super template:<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line"><span class="xml">            </span><span class="subst">$&#123;<span class="keyword">super</span>.template&#125;</span><span class="xml"></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line"><span class="xml">        `</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.customElements.define(<span class="string">'demo-html-template'</span>, DemoHTMLTemplate);</span></pre></td></tr></table></figure><h2 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h2><p>支持双向的数据绑定，你可以尝试编辑下面的输入框，或者直接在控制台修改属性 <code>document.querySelector(&#39;demo-data&#39;).owner1 = &#39;DIYgay&#39;</code>，属性改变会即时反映到 DOM 里</p><p><strong>效果</strong></p><demo-data owner1="DIYgod1"></demo-data><p><strong>HTML 代码</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">demo-data</span> <span class="attr">owner1</span>=<span class="string">"DIYgod1"</span>&gt;</span><span class="tag">&lt;/<span class="name">demo-data</span>&gt;</span></span></pre></td></tr></table></figure><p><strong>JS 代码</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; PolymerElement, html &#125; <span class="keyword">from</span> <span class="string">'@polymer/polymer'</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'@polymer/iron-input'</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoData</span> <span class="keyword">extends</span> <span class="title">PolymerElement</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">constructor</span>() &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">super</span>();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">this</span>.owner3 = <span class="string">'DIYgod3'</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">static</span> <span class="keyword">get</span> properties () &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">            owner1: &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">                type: <span class="built_in">String</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">                value: <span class="string">'DIYgod'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">            &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">            owner2: &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">                type: <span class="built_in">String</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">                value: <span class="string">'DIYgod2'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">static</span> <span class="keyword">get</span> template () &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> html`<span class="xml"></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is <span class="tag">&lt;<span class="name">b</span>&gt;</span>[[owner1]]<span class="tag">&lt;/<span class="name">b</span>&gt;</span>'s element.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is <span class="tag">&lt;<span class="name">b</span>&gt;</span>[[owner2]]<span class="tag">&lt;/<span class="name">b</span>&gt;</span>'s element.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is <span class="tag">&lt;<span class="name">b</span>&gt;</span>&#123;&#123;owner3&#125;&#125;<span class="tag">&lt;/<span class="name">b</span>&gt;</span>'s element.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">iron-input</span> <span class="attr">bind-value</span>=<span class="string">"&#123;&#123;owner1&#125;&#125;"</span>&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">is</span>=<span class="string">"iron-input"</span> <span class="attr">placeholder</span>=<span class="string">"Your name here..."</span>&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">iron-input</span>&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line"><span class="xml">        `</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.customElements.define(<span class="string">'demo-data'</span>, DemoData);</span></pre></td></tr></table></figure><h2 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h2><p>下面我们来给我们的自定义元素定义一个名为 <code>diygod</code> 的事件，绑定事件回调的方法跟正常事件一样</p><p><strong>效果</strong></p><demo-events></demo-events><script>document.querySelector("demo-events").addEventListener("diygod",function(e){alert(e.detail.msg)})</script><p><strong>HTML 代码</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">demo-events</span>&gt;</span><span class="tag">&lt;/<span class="name">demo-events</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="javascript">    <span class="built_in">document</span>.querySelector(<span class="string">'demo-events'</span>).addEventListener(<span class="string">'diygod'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        alert(e.detail.msg);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    &#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></pre></td></tr></table></figure><p><strong>JS 代码</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; PolymerElement, html &#125; <span class="keyword">from</span> <span class="string">'@polymer/polymer'</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoEvents</span> <span class="keyword">extends</span> <span class="title">PolymerElement</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">static</span> <span class="keyword">get</span> template () &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> html`<span class="xml"></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">on-click</span>=<span class="string">"handleClick"</span>&gt;</span>Kick Me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="xml">        `</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    handleClick(e) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">this</span>.dispatchEvent(<span class="keyword">new</span> CustomEvent(<span class="string">'diygod'</span>, &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">            detail: &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">                msg: <span class="string">'diygod event fired'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        &#125;));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.customElements.define(<span class="string">'demo-events'</span>, DemoEvents);</span></pre></td></tr></table></figure><p><scirpt src="https://cdn.jsdelivr.net/gh/DIYgod/polymer-demos@0.0.1/dist/webcomponents-loader.js"></scirpt></p><script src="https://cdn.jsdelivr.net/gh/DIYgod/polymer-demos@0.0.1/dist/polymer-demos.js"></script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为开发者，我们都知道组件化、标准化和代码复用的重要性，前端也从未停止过对前端组件化的尝试，产生了各式各样的组件化技术，从 Vue React 等前端框架，到 webpack 这样的全站打包工具&lt;/p&gt;&lt;p&gt;但前端一直缺乏这样一个模块化标准和浏览器级别的原生组件化方案&lt;/p&gt;&lt;p&gt;Web Components 是 WHATWG 和 W3C 正在尝试的 Web 组件化方案，为组件化的前端开发提供浏览器级别的支持。它由四项主要技术组成：Shadow DOM、Custom Elements、HTML Import、HTML Template&lt;/p&gt;&lt;p&gt;Polymer 项目是 Google 的基于 Web Components 机制的框架，定位于简单的 Polyfill 和易用性封装，包括数据绑定，模板声明，事件系统等。Google 在去年就已经将其应用到了 YouTube 上&lt;/p&gt;&lt;p&gt;Polymer 3.0 在 20 天前刚刚发布，正好 B 站播放器近期需要重构所有 UI 组件，所以做了这样的一个调研，下文所有 demo 托管在 &lt;a href=&quot;https://github.com/DIYgod/polymer-demos&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;polymer-demos&lt;/a&gt;，这些小 demo 只作为一些简单体验，想了解 Polymer 的完整功能建议阅读&lt;a href=&quot;https://www.polymer-project.org/3.0/docs/devguide/feature-overview&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方文档&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="分享境" scheme="https://diygod.me/categories/%E5%88%86%E4%BA%AB%E5%A2%83/"/>
    
    
  </entry>
  
  <entry>
    <title>早安晚安自动化</title>
    <link href="https://diygod.me/goodnight/"/>
    <id>https://diygod.me/goodnight/</id>
    <published>2018-04-25T01:45:03.000Z</published>
    <updated>2019-12-10T09:40:35.315Z</updated>
    
    <content type="html"><![CDATA[<p>上一集：<a href="https://diygod.me/2920/">女朋友的微博情绪监控</a></p><p>发小一直很喜欢说早安晚安（当然是我说给她），但我经常会忘记，最近灵机一动，想出来这样一个科学高效方便快捷稳定地说早安晚安的办法：</p><p>把微信挂在服务器上，每天固定时间，自动执行发送早晚安文本消息的命令！</p><p>代码很简单，放在了 <a href="https://github.com/DIYgod/GoodNight" target="_blank" rel="noopener">GitHub</a> 上，具体效果是每天早上 9 点半发一个 “早安”，然后晚上 12 点再发一个 “晚安”。</p><p>太好了！以后再也不会忘记说早安晚安了！开心！</p><p><img src="/images/havefun.jpg" alt=""></p><p>脚本已经部署到服务器上了，明天早上给发小一个惊喜！</p><p>实际使用的效果明天会更新到下面（肯定没问题，稳得很！）：</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上一集：&lt;a href=&quot;https://diygod.me/2920/&quot;&gt;女朋友的微博情绪监控&lt;/a&gt;&lt;/p&gt;&lt;p&gt;发小一直很喜欢说早安晚安（当然是我说给她），但我经常会忘记，最近灵机一动，想出来这样一个科学高效方便快捷稳定地说早安晚安的办法：&lt;/p&gt;&lt;p&gt;把微信挂在服务
      
    
    </summary>
    
    
      <category term="创作集" scheme="https://diygod.me/categories/%E5%88%9B%E4%BD%9C%E9%9B%86/"/>
    
    
  </entry>
  
  <entry>
    <title>RSSHub - 使用 RSS 连接全世界</title>
    <link href="https://diygod.me/rsshub/"/>
    <id>https://diygod.me/rsshub/</id>
    <published>2018-04-13T00:53:01.000Z</published>
    <updated>2019-12-10T09:40:35.319Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://github.com/DIYgod/RSSHub" target="_blank" rel="noopener">项目地址</a></strong></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>RSSHub 是一个轻量、易于扩展的 RSS 生成器，可以给任何奇奇怪怪的内容生成 RSS 订阅源</p><p>当前支持列表：</p><ul><li>bilibili<ul><li>番剧</li><li>UP 主投稿</li><li>UP 主动态</li><li>UP 主收藏夹</li><li>分区视频</li></ul></li><li>微博<ul><li>博主</li></ul></li><li>网易云音乐<ul><li>歌单</li></ul></li><li>掘金<ul><li>分类</li></ul></li><li>自如<ul><li>房源</li></ul></li><li>快递</li></ul><a id="more"></a><h2 id="参与我们"><a href="#参与我们" class="headerlink" title="参与我们"></a>参与我们</h2><p>如果有任何想法或需求，可以在 <a href="https://github.com/DIYgod/RSSHub/issues" target="_blank" rel="noopener">issue</a> 中告诉我们，同时我们欢迎各种 pull requests</p><p>可以通过以下途径参与讨论：</p><ul><li><a href="https://t.me/rsshub" target="_blank" rel="noopener">Telegram 群</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/DIYgod/RSSHub&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;项目地址&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;RSSHub 是一个轻量、易于扩展的 RSS 生成器，可以给任何奇奇怪怪的内容生成 RSS 订阅源&lt;/p&gt;&lt;p&gt;当前支持列表：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;bilibili&lt;ul&gt;&lt;li&gt;番剧&lt;/li&gt;&lt;li&gt;UP 主投稿&lt;/li&gt;&lt;li&gt;UP 主动态&lt;/li&gt;&lt;li&gt;UP 主收藏夹&lt;/li&gt;&lt;li&gt;分区视频&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;微博&lt;ul&gt;&lt;li&gt;博主&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;网易云音乐&lt;ul&gt;&lt;li&gt;歌单&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;掘金&lt;ul&gt;&lt;li&gt;分类&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;自如&lt;ul&gt;&lt;li&gt;房源&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;快递&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="创作集" scheme="https://diygod.me/categories/%E5%88%9B%E4%BD%9C%E9%9B%86/"/>
    
    
  </entry>
  
  <entry>
    <title>2018 暴走 yu 人节参展日记</title>
    <link href="https://diygod.me/2018-bao-zou-yu-ren-jie/"/>
    <id>https://diygod.me/2018-bao-zou-yu-ren-jie/</id>
    <published>2018-04-02T00:23:24.000Z</published>
    <updated>2019-12-10T09:40:35.315Z</updated>
    
    <content type="html"><![CDATA[<p>暴走 yu 人节是暴走漫画首届互动娱乐展会，作为暴走粉当然不能错过，很早就买了票。</p><p>总体感觉还是很棒的，嘉宾阵容强大，互动很多（还可以跟王尼玛一起上厕所），诚意满满，但不足也很明显，暴走 yu 人节主要内容集中在主舞台的节目表演，但上海新国际博览中心的现场座位远远不够，感觉还是更适合在类似 BML 的举办地梅赛德斯-奔驰文化中心这种地方举办。</p><a id="more"></a><p><img src="/images/bz1.jpg" alt=""></p><p>上午去得比较晚，逛了下厂商展台，没看节目，中午暴走家族在主舞台互动了一波，然后就是下午的节目。</p><h3 id="醋醋"><a href="#醋醋" class="headerlink" title="醋醋"></a>醋醋</h3><p>超级可爱，被圈粉了</p><div class="dplayer" id="dplayer-bz-1"></div><script>$(function(){var d=new DPlayer({container:document.getElementById("dplayer-bz-1"),preload:"metadata",video:{url:"https://cdn1.diygod.me/bz/1.mp4"},danmaku:{id:"diygodme-bz-1",api:"https://api.diygod.me/dplayer/"}});window.dplayers||(window.dplayers=[]),window.dplayers.push(d)})</script><p>&nbsp;</p><div class="dplayer" id="dplayer-bz-2"></div><script>$(function(){var d=new DPlayer({container:document.getElementById("dplayer-bz-2"),preload:"metadata",video:{url:"https://cdn1.diygod.me/bz/2.mp4"},danmaku:{id:"diygodme-bz-2",api:"https://api.diygod.me/dplayer/"}});window.dplayers||(window.dplayers=[]),window.dplayers.push(d)})</script><h3 id="金馆长"><a href="#金馆长" class="headerlink" title="金馆长"></a>金馆长</h3><p>哦哈哈哈哈哈哈</p><div class="dplayer" id="dplayer-bz-3"></div><script>$(function(){var d=new DPlayer({container:document.getElementById("dplayer-bz-3"),preload:"metadata",video:{url:"https://cdn1.diygod.me/bz/3.mp4"},danmaku:{id:"diygodme-bz-3",api:"https://api.diygod.me/dplayer/"}});window.dplayers||(window.dplayers=[]),window.dplayers.push(d)})</script><p>&nbsp;</p><div class="dplayer" id="dplayer-bz-4"></div><script>$(function(){var d=new DPlayer({container:document.getElementById("dplayer-bz-4"),preload:"metadata",video:{url:"https://cdn1.diygod.me/bz/4.mp4"},danmaku:{id:"diygodme-bz-4",api:"https://api.diygod.me/dplayer/"}});window.dplayers||(window.dplayers=[]),window.dplayers.push(d)})</script><h3 id="暴走家族"><a href="#暴走家族" class="headerlink" title="暴走家族"></a>暴走家族</h3><p>全阵容，激动</p><div class="dplayer" id="dplayer-bz-5"></div><script>$(function(){var d=new DPlayer({container:document.getElementById("dplayer-bz-5"),preload:"metadata",video:{url:"https://cdn1.diygod.me/bz/5.mp4"},danmaku:{id:"diygodme-bz-5",api:"https://api.diygod.me/dplayer/"}});window.dplayers||(window.dplayers=[]),window.dplayers.push(d)})</script><h3 id="咬人猫-赤九玖-有咩酱"><a href="#咬人猫-赤九玖-有咩酱" class="headerlink" title="咬人猫 赤九玖 有咩酱"></a>咬人猫 赤九玖 有咩酱</h3><p>还说什么，舔爆就行了</p><div class="dplayer" id="dplayer-bz-6"></div><script>$(function(){var d=new DPlayer({container:document.getElementById("dplayer-bz-6"),preload:"metadata",video:{url:"https://cdn1.diygod.me/bz/6.mp4"},danmaku:{id:"diygodme-bz-6",api:"https://api.diygod.me/dplayer/"}});window.dplayers||(window.dplayers=[]),window.dplayers.push(d)})</script><p>&nbsp;</p><div class="dplayer" id="dplayer-bz-7"></div><script>$(function(){var d=new DPlayer({container:document.getElementById("dplayer-bz-7"),preload:"metadata",video:{url:"https://cdn1.diygod.me/bz/7.mp4"},danmaku:{id:"diygodme-bz-7",api:"https://api.diygod.me/dplayer/"}});window.dplayers||(window.dplayers=[]),window.dplayers.push(d)})</script><p>&nbsp;</p><div class="dplayer" id="dplayer-bz-8"></div><script>$(function(){var d=new DPlayer({container:document.getElementById("dplayer-bz-8"),preload:"metadata",video:{url:"https://cdn1.diygod.me/bz/8.mp4"},danmaku:{id:"diygodme-bz-8",api:"https://api.diygod.me/dplayer/"}});window.dplayers||(window.dplayers=[]),window.dplayers.push(d)})</script><h3 id="山下智博"><a href="#山下智博" class="headerlink" title="山下智博"></a>山下智博</h3><p>签售会，签名 合照 get√</p><p><img src="/images/bz2.jpg" alt=""></p><p>最后离场的时候还在厕所里遇到了王尼玛，上厕所也带着头套，身边有个工作人员，很激动，呆住了好几秒…发现王尼玛比我矮好多，应该在170以下😂</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;暴走 yu 人节是暴走漫画首届互动娱乐展会，作为暴走粉当然不能错过，很早就买了票。&lt;/p&gt;&lt;p&gt;总体感觉还是很棒的，嘉宾阵容强大，互动很多（还可以跟王尼玛一起上厕所），诚意满满，但不足也很明显，暴走 yu 人节主要内容集中在主舞台的节目表演，但上海新国际博览中心的现场座位远远不够，感觉还是更适合在类似 BML 的举办地梅赛德斯-奔驰文化中心这种地方举办。&lt;/p&gt;
    
    </summary>
    
    
      <category term="日记本" scheme="https://diygod.me/categories/%E6%97%A5%E8%AE%B0%E6%9C%AC/"/>
    
    
  </entry>
  
  <entry>
    <title>关于开源项目赞助这件事</title>
    <link href="https://diygod.me/open-source-project-donation/"/>
    <id>https://diygod.me/open-source-project-donation/</id>
    <published>2018-03-05T23:21:21.000Z</published>
    <updated>2019-12-10T09:40:35.319Z</updated>
    
    <content type="html"><![CDATA[<div class="aplayer" id="aplayer-open-source"></div><script>$(function(){$.ajax({url:"https://api.i-meto.com/meting/api?server=netease&type=song&id=536622447",success:function(e){var a=new APlayer({element:document.getElementById("aplayer-open-source"),showlrc:3,theme:"#ad7a86",mode:"random",music:JSON.parse(e)[0]});window.aplayers||(window.aplayers=[]),window.aplayers.push(a)}})})</script><p>相信没人做开源项目是为了赚钱，因为它还不如去天桥贴膜赚得快。</p><p>但即使没有这种想法，维护一个开源项目也会遇到一些很头疼的现实问题，比如服务器和 CDN 的开销。以 DPlayer 为例，弹幕接口服务器每年需要花费 2000 多块，文档里的视频 CDN 费用每年也需要花费 1500 多块，并且随着用户增多这些花费只增不减。</p><p>虽然一直在 README 的显著位置挂着赞助方式，但也没抱太大希望，毕竟 DPlayer 用户几乎都是国人，能遇到一个可以描述清楚自己问题的用户就已经很不容易了，结果也不出我所料，一年里零星收到的赞助只不过是杯水车薪。说实话，让我自己承担这些花费我是不乐意的，再加上用户大多是盗版站和小黄站，这曾一度让我产生了弃坑的想法。<a id="more"></a></p><p>后面的事情很多朋友都知道了，<a href="https://www.upyun.com/" target="_blank" rel="noopener">又拍云</a>和<a href="https://pear.hk/" target="_blank" rel="noopener">梨享计算</a>先后赞助了 DPlayer，又拍云赞助了 DPlayer 的全部 CDN 费用，梨享计算则每月提供一笔数量可观的金钱赞助。</p><p>一般来说，如果一个团体或企业将开源项目用在商业产品中，那么赞助开源项目有直接的商业上的益处：可以让产品所依赖的框架保持健康并得到积极的维护。不同的是又拍云并没有用到 DPlayer，短期内也不会有任何直接的商业回报，可能更多的是一种情怀，又拍云作为一家商业公司，其不求回报的慷慨赞助是我尤其感动的。</p><p>这篇文章当然不是为了号召大家进行赞助或去天桥贴膜，目前两家公司的赞助已经足够人力以外的日常开销，除了赞助，贡献代码、提一个描述清楚的 bug 或意见、一句鼓励、或者仅仅是使用我的开源项目都同样可以让我很开心，这些都是让我继续花时间做开源的动力。</p><p>以下硬广：</p><blockquote><p><a href="https://pear.hk/" target="_blank" rel="noopener">梨享计算</a>是一家雾计算技术研发商，专注于为用户提供 IaaS 架构、PaaS 平台、SaaS 软件服务。Pear Fog 不仅是跨越网络中心到边缘的资源池，也是新型的 P2P 系统。其中 Fog CDN 在以透明且 Web 友好的方式帮视频厂商降低内容分发成本、提高质量。</p></blockquote><blockquote><p><a href="https://www.upyun.com/" target="_blank" rel="noopener">又拍云</a>是国内知名企业级云服务商，致力于为客户提供一站式的在线业务加速服务，为客户提供对象存储、HTTPS／SSL 证书、多媒体处理（WebP 自适应、H.265 自适应等）、影像识别、文字识别、短视频 SDK、直播 SDK、连麦 SDK 等服务。又拍云拥有 6 个数据处理中心、300 多个国内CDN节点、15 个海外CDN节点、5000 台服务器、5TB 保有带宽，日均请求超过 1000 亿次。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;aplayer&quot; id=&quot;aplayer-open-source&quot;&gt;&lt;/div&gt;&lt;script&gt;$(function(){$.ajax({url:&quot;https://api.i-meto.com/meting/api?server=netease&amp;type=song&amp;id=536622447&quot;,success:function(e){var a=new APlayer({element:document.getElementById(&quot;aplayer-open-source&quot;),showlrc:3,theme:&quot;#ad7a86&quot;,mode:&quot;random&quot;,music:JSON.parse(e)[0]});window.aplayers||(window.aplayers=[]),window.aplayers.push(a)}})})&lt;/script&gt;&lt;p&gt;相信没人做开源项目是为了赚钱，因为它还不如去天桥贴膜赚得快。&lt;/p&gt;&lt;p&gt;但即使没有这种想法，维护一个开源项目也会遇到一些很头疼的现实问题，比如服务器和 CDN 的开销。以 DPlayer 为例，弹幕接口服务器每年需要花费 2000 多块，文档里的视频 CDN 费用每年也需要花费 1500 多块，并且随着用户增多这些花费只增不减。&lt;/p&gt;&lt;p&gt;虽然一直在 README 的显著位置挂着赞助方式，但也没抱太大希望，毕竟 DPlayer 用户几乎都是国人，能遇到一个可以描述清楚自己问题的用户就已经很不容易了，结果也不出我所料，一年里零星收到的赞助只不过是杯水车薪。说实话，让我自己承担这些花费我是不乐意的，再加上用户大多是盗版站和小黄站，这曾一度让我产生了弃坑的想法。
    
    </summary>
    
    
      <category term="闲言语" scheme="https://diygod.me/categories/%E9%97%B2%E8%A8%80%E8%AF%AD/"/>
    
    
  </entry>
  
  <entry>
    <title>DARLING in the FRANXX 博客样式</title>
    <link href="https://diygod.me/darling-in-the-franxx-style/"/>
    <id>https://diygod.me/darling-in-the-franxx-style/</id>
    <published>2018-02-05T00:08:53.000Z</published>
    <updated>2019-12-10T09:40:35.315Z</updated>
    
    <content type="html"><![CDATA[<div class="aplayer" id="aplayer-darling"></div><script>$(function(){$.ajax({url:"https://api.i-meto.com/meting/api?server=netease&type=song&id=531051597",success:function(e){var a=new APlayer({element:document.getElementById("aplayer-darling"),showlrc:3,theme:"#ad7a86",mode:"random",music:JSON.parse(e)[0]});window.aplayers||(window.aplayers=[]),window.aplayers.push(a)}})})</script><p>&nbsp;<br><strong>点击<a href="javascript:;" id="darling-trigger">这里</a>切换样式</strong></p><script>$("#darling-trigger").click(function(){var a=$("body");a.hasClass("theme-darling")?a.removeClass("theme-darling"):a.addClass("theme-darling")})</script><p>救命啊，我被撩到了！<br>没错，我就是她的 Darling！<br>天哪，世界上怎么会有那么可爱的女孩子！<br>我现在只想看 DITF 第五集别的什么都不想干.jpg<br><img src="https://diygod.me/images/header-darling.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;aplayer&quot; id=&quot;aplayer-darling&quot;&gt;&lt;/div&gt;&lt;script&gt;$(function(){$.ajax({url:&quot;https://api.i-meto.com/meting/api?server=netease&amp;type=song
      
    
    </summary>
    
    
      <category term="分享境" scheme="https://diygod.me/categories/%E5%88%86%E4%BA%AB%E5%A2%83/"/>
    
    
  </entry>
  
  <entry>
    <title>Web Workers 初体验</title>
    <link href="https://diygod.me/web-workers/"/>
    <id>https://diygod.me/web-workers/</id>
    <published>2018-01-30T22:24:15.000Z</published>
    <updated>2019-12-10T09:40:35.319Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/av18682336/" target="_blank" rel="noopener">这个视频</a>有 15+MB 的 BAS 弹幕脚本需要解析，这会导致页面卡死 7 秒左右的时间，期间 UI 被冻结，体验很糟糕，如果使用 Web Workers 进行优化，把解析放入 Web Workers 执行，就可以避免 UI 线程阻塞造成的页面冻结。</p><a id="more"></a><h2 id="单线程"><a href="#单线程" class="headerlink" title="单线程"></a>单线程</h2><p>使用 parse 来模拟解析函数</p><p><strong>index.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parse</span> (<span class="params">time</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">const</span> start = <span class="keyword">new</span> <span class="built_in">Date</span>();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">while</span>(<span class="keyword">new</span> <span class="built_in">Date</span>() - start &lt; time) &#123;&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="string">'DIYgod'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(parse(<span class="number">1000</span>));</span></pre></td></tr></table></figure><p>此时页面会卡死 1s，然后输出一个 ‘DIYgod’。</p><h2 id="使用-Web-Workers"><a href="#使用-Web-Workers" class="headerlink" title="使用 Web Workers"></a>使用 Web Workers</h2><p><strong>index.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> wk = <span class="keyword">new</span> Worker(<span class="string">'worker.js'</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">wk.postMessage(<span class="number">1000</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">wk.addEventListener(<span class="string">'message'</span>, (e) =&gt; &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(e.data);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure><p><strong>worker.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parse</span> (<span class="params">time</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">const</span> start = <span class="keyword">new</span> <span class="built_in">Date</span>();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">while</span>(<span class="keyword">new</span> <span class="built_in">Date</span>() - start &lt; time) &#123;&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="string">'DIYgod'</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    postMessage(parse(e.data));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>这是 Web Workers 的一个最基础用法，index.js 把 1000 传给 worker.js，worker.js 在后台解析 1000 ms，再把结果 ‘DIYgod’ 传回 index.js，这样解析就不会再占用 js 主线程，避免了页面卡死。</p><h2 id="内嵌-Worker"><a href="#内嵌-Worker" class="headerlink" title="内嵌 Worker"></a>内嵌 Worker</h2><p>上一步我们加载了两个 js 文件，index.js 和 worker.js，在 HTML 里引用 index.js，然后 index.js 会加载 worker.js，那么不想创建单独的 Worker 文件怎么办呢？</p><p><strong>index.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> workerBlob = <span class="keyword">new</span> Blob([<span class="string">`function parse (time) &#123;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="string">    const start = new Date();</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="string">    while(new Date() - start &lt; time) &#123;&#125;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="string">    return 'DIYgod';</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="string">&#125;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="string"></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="string">onmessage = function (e) &#123;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="string">    postMessage(parse(e.data));</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="string">&#125;`</span>], &#123; <span class="attr">type</span>: <span class="string">'application/javascript'</span> &#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> workerURL = URL.createObjectURL(workerBlob);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> wk = <span class="keyword">new</span> Worker(workerURL);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">wk.postMessage(<span class="number">1000</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">wk.addEventListener(<span class="string">'message'</span>, (e) =&gt; &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(e.data);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure><p>URL.createObjectURL(blob) 会创建一个 DOMString，它包含一个表示 blob 的 URL。</p><p>打开控制台的 Network 标签页，你会看到浏览器加载了一个形如 <code>blob:http://example.com/16215a1e-21d4-450c-b441-070e1981b69d</code> 的奇怪链接的 js 文件，这个 js 文件的内容正是我们传给 workerBlob 的字符串内容。</p><p>这个 URL 是唯一的，且它的生命周期和创建它的窗口中的 document 绑定，只要页面存在，该网址就会一直有效。</p><h2 id="使用-webpack-worker-loader"><a href="#使用-webpack-worker-loader" class="headerlink" title="使用 webpack worker-loader"></a>使用 webpack worker-loader</h2><p>上一步中我们把 js 代码放在了字符串里，它不能拆分模块，也不利于后期维护，如果项目正在使用 webpack，安装 <a href="https://github.com/webpack-contrib/worker-loader" target="_blank" rel="noopener">worker-loader</a> 可以解决这个问题。</p><p><strong>index.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> WK <span class="keyword">from</span> <span class="string">'worker-loader?inline=true&amp;fallback=false!./worker.js'</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> wk = <span class="keyword">new</span> WK();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">wk.postMessage(<span class="number">1000</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">wk.addEventListener(<span class="string">'message'</span>, (e) =&gt; &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(e.data);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure><p><strong>worker.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Parse <span class="keyword">from</span> <span class="string">'./parse.js'</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">self.addEventListener(<span class="string">'message'</span>, (e) =&gt; &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    self.postMessage(Parse(e.data));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure><p><strong>parse.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parse</span> (<span class="params">time</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">const</span> start = <span class="keyword">new</span> <span class="built_in">Date</span>();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">while</span>(<span class="keyword">new</span> <span class="built_in">Date</span>() - start &lt; time) &#123;&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="string">'DIYgod'</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Parse;</span></pre></td></tr></table></figure><p>只需要使用 worker-loader 引用 worker.js 模块，剩下的 worker-loader 会帮我们自动处理，最后编译的结果类似我们上一步的代码。</p><p>对比不使用 Web Workers 时：</p><p><strong>index.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Parse <span class="keyword">from</span> <span class="string">'./parse.js'</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(Parse(<span class="number">1000</span>));</span></pre></td></tr></table></figure><p><strong>parse.js（不变）</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parse</span> (<span class="params">time</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">const</span> start = <span class="keyword">new</span> <span class="built_in">Date</span>();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">while</span>(<span class="keyword">new</span> <span class="built_in">Date</span>() - start &lt; time) &#123;&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="string">'DIYgod'</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Parse;</span></pre></td></tr></table></figure><p>这样不用修改原有的解析模块，非侵入式，只需要加个 worker.js 中转模块，再改下调用方法即可，维护起来也很方便。</p><h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><p>如果我把一个计算放入 4 个 Worker，那么这个计算会快 4 倍？</p><p>不，它不仅不会快 4 倍，而且会变得更慢。</p><p>Web Workers 不是为了缩短计算时间，而是为了避免 UI 线程冻结。创建线程、线程调度、传输数据等行为会导致计算变得比单线程稍微更慢一点。</p><p>我记录了开头那个视频在不同 Worker 数量下解析 100 条弹幕的时间，7 次记录取平均值：</p><table><thead><tr><th>Worker 数量</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>10</th></tr></thead><tbody><tr><td>平均时间(ms)</td><td>6085</td><td>8216</td><td>6310</td><td>6388</td><td>6483</td><td>6317</td><td>6475</td><td>7233</td></tr></tbody></table><p>不使用 Worker 的解析速度最快，1 个 Worker 的速度比其他明显更慢，2 3 4 5 6 个 Worker 速度没有明显差异，但 Worker 数量一直增加速度又会逐渐变慢。</p><p>另外又测试了弹幕比较少的视频，结果是 1 2 3 4 5 个 Worker 的速度都差不多。</p><p>最后不靠谱地决定使用 2 个 Worker 进行解析。</p><p>优化结果妙不可言，不需要等待解析完成才能进行其他操作，也可以一边播放视频一边解析，区别只是播放到没解析好的弹幕不会显示，解析完成才会显示。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/av18682336/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这个视频&lt;/a&gt;有 15+MB 的 BAS 弹幕脚本需要解析，这会导致页面卡死 7 秒左右的时间，期间 UI 被冻结，体验很糟糕，如果使用 Web Workers 进行优化，把解析放入 Web Workers 执行，就可以避免 UI 线程阻塞造成的页面冻结。&lt;/p&gt;
    
    </summary>
    
    
      <category term="创作集" scheme="https://diygod.me/categories/%E5%88%9B%E4%BD%9C%E9%9B%86/"/>
    
    
  </entry>
  
  <entry>
    <title>NetEaseCloudMusic2RSS — 使用RSS订阅她喜欢的网易云音乐</title>
    <link href="https://diygod.me/neteasecloudmusic2rss/"/>
    <id>https://diygod.me/neteasecloudmusic2rss/</id>
    <published>2018-01-29T02:23:01.000Z</published>
    <updated>2019-12-10T09:40:35.315Z</updated>
    
    <content type="html"><![CDATA[<p>音乐，人类生活中永恒的主题。音乐可以很大程度上体现一个人的喜好、品味，更是最有力量的情感传输器。</p><p>现在快使用RSS订阅我喜欢的网易云音乐吧：<a href="https://api.prprpr.me/necm2rss/playlist/35798529" target="_blank" rel="noopener">https://api.prprpr.me/necm2rss/playlist/35798529</a>，跟网红 DIYgod 听一样的音乐！</p><p>项目名叫 NetEaseCloudMusic2RSS，开源在 <a href="https://github.com/DIYgod/NetEaseCloudMusic2RSS" target="_blank" rel="noopener">GitHub</a>。</p><p>另外可以使用相关项目 <a href="https://github.com/DIYgod/Weibo2RSS" target="_blank" rel="noopener">Weibo2RSS</a> 订阅喜欢的微博博主，<a href="https://github.com/DIYgod/bilibili2RSS" target="_blank" rel="noopener">bilibili2RSS</a> 订阅B站UP主、收藏夹、投币视频、番剧、分区等。</p><p>RSS 干杯！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;音乐，人类生活中永恒的主题。音乐可以很大程度上体现一个人的喜好、品味，更是最有力量的情感传输器。&lt;/p&gt;&lt;p&gt;现在快使用RSS订阅我喜欢的网易云音乐吧：&lt;a href=&quot;https://api.prprpr.me/necm2rss/playlist/35798529&quot; ta
      
    
    </summary>
    
    
      <category term="创作集" scheme="https://diygod.me/categories/%E5%88%9B%E4%BD%9C%E9%9B%86/"/>
    
    
  </entry>
  
</feed>
