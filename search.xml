<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>我家 Android 初养成</title>
    <url>/android/</url>
    <content><![CDATA[<p>最近把用了两年的 iPhone X 换成了 Redmi K20 Pro，体验一下 Android 自由香甜的空气</p><p><img style="width:100%;max-width:300px" src="/images/android1.jpg"></p><a id="more"></a><h2 id="解锁-Bootloader"><a href="#解锁-Bootloader" class="headerlink" title="解锁 Bootloader"></a>解锁 Bootloader</h2><p>小米手机出厂都是锁 Bootloader 的，需要到<a href="http://www.miui.com/unlock/index.html" target="_blank" rel="noopener">官网</a>下载解锁工具解锁</p><p>刷机、ROOT 都需要解锁 Bootloader，这是折腾所有东西的第一步</p><p>所以我一拿到手机第一件事就是兴冲冲地连接电脑、下载解锁工具、运行解锁程序：</p><p><img src="/images/android2.jpg" alt=""></p><p><img src="/images/android3.png" alt=""></p><p>游戏结束</p><p>———————————————————————</p><p>7 天后：</p><p><img src="/images/android4.png" alt=""></p><h2 id="刷入-TWRP"><a href="#刷入-TWRP" class="headerlink" title="刷入 TWRP"></a>刷入 TWRP</h2><p>Recovery 是安卓的恢复系统，类似 <a href="https://docs.microsoft.com/zh-cn/windows-hardware/manufacture/desktop/winpe-intro" target="_blank" rel="noopener">Windows 的 PE</a> 和 <a href="https://support.apple.com/zh-cn/HT201314" target="_blank" rel="noopener">macOS 的恢复功能</a>，可以用来系统升级和重置手机</p><p>刷入第三方的 Recovery 可以获得更多的功能，比如 Root 和 刷入第三方 ROM</p><p>其中 <a href="https://twrp.me/" target="_blank" rel="noopener">TWRP</a> 是一个著名的开源 Recovery 映像，在 TWRP 官网搜索 <code>Redmi K20</code> 可以看到 TWRP 官方已经提供了对 Redmi K20 Pro 的支持</p><p><img src="/images/android5.jpg" alt=""></p><p>但是因为这篇文章咕咕太久了，我刷 TWRP 的时候官方还没有支持 Redmi K20 Pro，我用的是一位国内开发者 <a href="https://weibo.com/u/6033736159" target="_blank" rel="noopener">wzsx150</a> 适配的 <a href="https://weibo.com/ttarticle/p/show?id=2309404160776561631202" target="_blank" rel="noopener">TWRP 映像</a></p><p><img src="/images/android6.png" alt=""></p><p>wzsx150 团队提供了非常方便的一键刷入工具，打开 <code>recovery-twrp一键刷入工具</code></p><p><img src="/images/android7.png" alt=""></p><p>根据提示下一步下一步</p><p><img src="/images/android8.png" alt=""></p><p><img src="/images/android9.png" alt=""></p><p>期间手机重启一次，再启动自动进入了 TWRP，证明刷入成功</p><p><img src="/images/android10.jpg" alt=""></p><h2 id="刷入-Magisk"><a href="#刷入-Magisk" class="headerlink" title="刷入 Magisk"></a>刷入 Magisk</h2><p>Magisk 是一个兼具稳定性和可玩性的神器：作为一个 Root 方案，它能不破坏系统实现无痛 OTA，作为一个插件扩展平台，它又能提供丰富的自定义模块来满足多样化的定制需求</p><p>参考阅读：<a href="https://sspai.com/post/53043" target="_blank" rel="noopener">少数派 - 每个 Android 玩家都不可错过的神器</a></p><p>Magisk 同样也是开源项目，在 <a href="https://github.com/topjohnwu/Magisk/releases" target="_blank" rel="noopener">GitHub</a> 上下载最新版的 Magisk 安装包导入手机中，然后点击 TWRP 的 <code>安装</code> 按钮，找到 Magisk 安装包，就可以刷入了</p><p><img src="/images/android11.jpg" alt=""></p><p>重启系统后，会发现桌面多了一个 <code>Magisk Manager</code>，证明刷入成功</p><p><img src="/images/android12.jpg" alt=""></p><h2 id="Magisk"><a href="#Magisk" class="headerlink" title="Magisk"></a>Magisk</h2><p>前面准备了那么多，终于可以安装 Magisk 模块了，Magisk 模块非常丰富，网上资料也很多，所以这里只介绍一下我使用的几个模块</p><p><img style="width:100%;max-width:400px" src="/images/android13.png"></p><p>筑紫A丸：全局替换系统字体，字体名叫筑紫A丸ゴシック，效果就如图所示，很可爱，介绍和下载在<a href="https://mp.weixin.qq.com/s/zGaX15vRE-ZPoHtAiXawhQ" target="_blank" rel="noopener">这里</a></p><p>Google Lens Enabler：欺骗 Google 相册这个设备是一台 Pixel 设备，来开启 Google 智能镜头的功能，然后还有一个重要的额外效果：让 Google 相册拥有无限空间</p><p><img style="width:100%;max-width:400px" src="/images/android14.jpg"></p><p>Riru - Core：Riru 是一个系列模块，使用 Riru 模块都需要先安装 Riru - Core</p><p>Riru - Storage Redirect：存储重定向，几乎所有的 Android 应用都会在我们的手机中储存信息，为此，Android 系统提供了 <code>/data</code> 和 <code>sdcard/Android/data</code> 这两个目录来进行应用数据文件存放，遗憾的是，很多应用开发者并不会遵从这个规范，这让手机内部储存目录显得极为杂乱且文件管理效率低下，使用 Storage Redirect 能很好地解决上述问题，它将散落于各处的应用私有文件夹重新定位到指定的位置，<a href="https://sr.rikka.app/zh-hans/" target="_blank" rel="noopener">这里</a>有它的官方介绍和文档</p><p><img style="width:100%;max-width:400px" src="/images/android15.jpg"></p><p>Tai Chi：太极模块，见下一节</p><h2 id="太极"><a href="#太极" class="headerlink" title="太极"></a>太极</h2><p>介绍太极要先从 Xposed 框架开始</p><p>很多人都对 Xposed 的大名有所耳闻，它通过对系统框架的偷天换日，可以修改系统与应用的各种数据，籍此实现无数种可能性，同时也大大地提升了 Android 系统的可玩性，而且有比 Magisk 更丰富的模块</p><p>但是 Xposed 框架没有像 Android 系统版本一样能够快速的更新，最新版本停留在了 Android 8.0/8.1 beta3 版本，对于 Android 9.0/10.0 用户，只能选择第三方实现，现在常用的有<a href="https://taichi.cool/README_CN.html" target="_blank" rel="noopener">太极</a>和 <a href="https://github.com/ElderDrivers/EdXposed" target="_blank" rel="noopener">Edxposed</a> 两种方案</p><p>我一开始装的是 Edxposed，但是貌似跟 MIUI 11 有兼容性问题无法使用，所以换了太极</p><p>下面是我使用的几个模块：</p><p><img style="width:100%;max-width:400px" src="/images/android16.jpg"></p><p>大圣净化和去你大爷的内置浏览器非常香</p><h2 id="Google-相机"><a href="#Google-相机" class="headerlink" title="Google 相机"></a>Google 相机</h2><p>Redmi K20 Pro 支持 Camera2 API，所以不需要额外折腾就可以安装 Google 相机</p><p>国内开发者<a href="https://weibo.com/u/5213532617" target="_blank" rel="noopener">阿狗酱</a>有分享专门为 Redmi K20 Pro 调教的谷歌相机</p><p><img style="width:100%;max-width:400px" src="/images/android17.jpg"></p><p>得益于 HDR+ 算法，提升非常明显，Google 真的太强了</p><p>MIUI 自带相机 vs Google 相机</p><p><img src="/images/android18.jpg" alt=""></p><p>iPhone 11 自带相机 vs Google 相机</p><p><img src="/images/android19.jpg" alt=""></p><p>综上所述，Android 上很多黑科技确实很香，但整个系统的精致程度、设计感、人性化和软件生态还是跟 iOS 有非常大的差距，这让我痛苦地适应了一个多星期才开始慢慢可以接受，要不是拼多多拆封不给退我可能第二天就换回 iPhone 了</p><p>但一旦接受了这种设定，香</p>]]></content>
      <tags>
        <tag>分享境</tag>
      </tags>
  </entry>
  <entry>
    <title>RSSHub Radar — 订阅一个 RSS 源不应该这么难</title>
    <url>/rsshub-radar/</url>
    <content><![CDATA[<p><img src="/images/rsshub-radar5.jpg" alt=""></p><blockquote><p>如果你问我，RSSHub 能否改变 RSS 的命运，我也不晓得，但我晓得，不认命，就是 RSSHub 的命。 ——《哪吒之魔童降世》</p></blockquote><p>如果你还不知道 RSS：<a href="https://diygod.me/ohmyrss/">《我有特别的 RSS 使用技巧》</a><br>如果你还不知道 RSSHub：<a href="https://sspai.com/post/47100" target="_blank" rel="noopener">《通过 RSSHub 订阅不支持 RSS 的网站》</a></p><p>首先最大的 respect 献给 RSSHub 的 <a href="https://docs.rsshub.app/#contributors" target="_blank" rel="noopener">244 名参与者</a></p><h2 id="订阅一个-RSS-源太难了"><a href="#订阅一个-RSS-源太难了" class="headerlink" title="订阅一个 RSS 源太难了"></a>订阅一个 RSS 源太难了</h2><p>首先需要网站提供了 RSS（这一前提通常就无法满足）；然后我们要随缘在页面中找到 RSS 链接；然后复制链接、打开如 Feedly Inoreader 的 RSS 服务、点击添加订阅、粘贴链接、添加</p><p>看，顺利订阅一个 RSS 源需要天时（随缘找到了 RSS）地利（网站提供了 RSS）人和（不因为订阅步骤过于麻烦而中途放弃），缺一不可</p><p>都 9102 年了，世界不应该这样</p><a id="more"></a><h2 id="解决这个问题"><a href="#解决这个问题" class="headerlink" title="解决这个问题"></a>解决这个问题</h2><p>为了解决这个问题，RSSHub Radar 诞生了</p><p><a href="https://chrome.google.com/webstore/detail/rsshub-radar/kefjpfngnndepjbopdmoebkipbgkggaa" target="_blank" rel="noopener">Chrome Web Store</a> | <a href="https://github.com/DIYgod/RSSHub-Radar" target="_blank" rel="noopener">GitHub</a></p><p>RSSHub Radar 是 RSSHub 的衍生项目，她是一个可以帮助你快速发现和订阅当前网站 RSS 和 RSSHub 的浏览器扩展</p><p><img src="/images/rsshub-radar1.jpg" alt=""></p><p>使用很简单，我们在进入一个新页面时，RSSHub Radar 会<strong>自动检测</strong>当前页面有没有 RSS 和 RSSHub 支持，检测到则会在右下角显示一个角标，如果我们想订阅当前页面的 RSS，点击扩展图标，会弹出一个列表，如图所示，列表有三项内容：<strong>当前页面上的 RSS、适用于当前页面的 RSSHub、适用于当前网站的 RSSHub</strong>，你可以选择复制链接或<strong>一键订阅</strong>到 Feedly Inoreader TinyTinyRSS</p><p><img src="/images/rsshub-radar2.jpg" alt=""></p><p>设置页允许你使用自建的 RSSHub 域名、设置快捷键、立即更新规则、选择一键订阅到 TinyTinyRSS 还是 Feedly Inoreader、选择是否开启角标提醒等</p><p><img src="/images/rsshub-radar3.jpg" alt=""></p><p>支持列表列出了当前支持的 RSSHub 规则</p><h2 id="RSSHub-Radar-是如何工作的"><a href="#RSSHub-Radar-是如何工作的" class="headerlink" title="RSSHub Radar 是如何工作的"></a>RSSHub Radar 是如何工作的</h2><p>RSSHub Radar 是开源的，你可以直接去 <a href="https://github.com/DIYgod/RSSHub-Radar" target="_blank" rel="noopener">GitHub</a> 看源码</p><p>当我们进入一个新页面时，RSSHub Radar 开始检测当前页面的 RSS 和 RSSHub</p><p><strong>当前页面自带的 RSS</strong></p><p>分析页面中的每个链接显然是不现实的，好在标准中指定了一种特殊 MIME 类型的 link 标签来指明 RSS 链接，<code>link[type=&quot;application/rss+xml&quot;]</code> 和 <code>link[type=&quot;application/atom+xml&quot;]</code>，RSSHub Radar 正是通过这个标签来检测页面是否有自带 RSS，具体实现在<a href="https://github.com/DIYgod/RSSHub-Radar/blob/master/src/js/content/utils.js#L14" target="_blank" rel="noopener">这里</a></p><p><strong>适用于当前页面的 RSSHub</strong></p><p>使用<a href="https://github.com/DIYgod/RSSHub/blob/master/assets/radar-rules.js" target="_blank" rel="noopener">给定规则</a>，根据当前页面的 URL 或 DOM 来获取 RSSHub 链接，规则各个字段的具体含义见<a href="https://docs.rsshub.app/joinus/#%E6%8F%90%E4%BA%A4%E6%96%B0%E7%9A%84-rsshub-radar-%E8%A7%84%E5%88%99" target="_blank" rel="noopener">文档</a>，具体实现在<a href="https://github.com/DIYgod/RSSHub-Radar/blob/master/src/js/background/utils.js#L111" target="_blank" rel="noopener">这里</a></p><p>每隔 5 个小时从 GitHub 远程更新一次规则</p><p><strong>一键订阅</strong></p><p>Feedly Inoreader TinyTinyRSS 都提供了用于订阅的接口，不同的是 Feedly 需要进入页面确认一下，而另外两个会直接订阅上</p><p>比如访问这个 URL 可以快速使用 Feedly 订阅我的博客（需要点 FOLLOW 确认）：<br><a href="https://feedly.com/i/subscription/feed/https://diygod.me/atom.xml" target="_blank" rel="noopener">https://feedly.com/i/subscription/feed/https://diygod.me/atom.xml</a></p><p>这个 URL 可以快速使用 Inoreader 订阅我的博客：<br><a href="https://www.inoreader.com/feed/https://diygod.me/atom.xml" target="_blank" rel="noopener">https://www.inoreader.com/feed/https://diygod.me/atom.xml</a></p><h2 id="参与我们"><a href="#参与我们" class="headerlink" title="参与我们"></a>参与我们</h2><p>如果你对 RSSHub 感兴趣，欢迎<a href="https://docs.rsshub.app/joinus/" target="_blank" rel="noopener">参与</a>或<a href="https://docs.rsshub.app/support/" target="_blank" rel="noopener">支持</a>我们</p><p>最后祝哪吒票房破 50 亿，还没看的一定要去看嗷！</p><p><img src="/images/rsshub-radar4.gif" alt=""></p>]]></content>
      <categories>
        <category>创作集</category>
      </categories>
  </entry>
  <entry>
    <title>小米手环 4 NFC 模拟加密卡探索</title>
    <url>/pn532/</url>
    <content><![CDATA[<p>小米手环 4 NFC 版一发售就迫不及待找黄牛买了一只</p><p>手环的 NFC 主要有三个功能：小爱同学、公交卡、模拟门禁卡</p><p>结果手环的小爱同学很难用，功能缺失、反应慢<a href="https://twitter.com/DIYgod/status/1141718298658086913" target="_blank" rel="noopener">还老骂我</a>，上海公交也不支持，门禁卡顿时成为了全村人的希望，正好我有两个门禁卡，试着模拟一下吧</p><p><img src="/images/pn5321.jpg" alt=""></p><p>这 NFC 一事无成，像极了人生</p><a id="more"></a><p>第一张是 ID 卡，铁定没救了，希望全在第二张加密 IC 卡上，为了拯救鸡肋的 NFC，我到淘宝买了一个 NFC 读写器 PN532</p><p>把加密卡放到 PN532 上读取数据</p><p><img src="/images/pn5322.jpg" alt=""></p><p>使用 MifareOne Tool 解卡</p><p><img src="/images/pn5323.png" alt=""></p><p>解卡失败…根据网上的说法可能是 PN532 过热导致的，那么哪里最凉快呢？</p><p>冰箱</p><p><img src="/images/pn5324.jpg" alt=""></p><p>经过漫长的等待，成功了</p><p><img src="/images/pn5325.png" alt=""></p><p>得到加密卡数据</p><p><img src="/images/pn5326.png" alt=""></p><p>然后把其中的 0 扇区 0 区块数据写入一张空白卡</p><p><img src="/images/pn5327.jpg" alt=""></p><p><img src="/images/pn5328.png" alt=""></p><p>然后再把空白卡的数据写入手环</p><p><img src="/images/pn5329.jpg" alt=""></p><p><img src="/images/pn53210.jpg" alt=""></p><p>这时候手环上就有卡了，但是里面只有 0 扇区 0 区块数据，这时候再把剩下的数据写到手环里就好了</p><p><img src="/images/pn53211.jpg" alt=""></p><p><img src="/images/pn53212.png" alt=""></p><p>验证：对比原卡和手环卡的数据，</p><p><img src="/images/pn53213.png" alt=""><br><img src="/images/pn53214.png" alt=""></p><p>只有 0 扇区 0 区块的部分数据（厂商号）不同，且 15 扇区的加密数据相同，说明已经模拟成功</p><p>NFC 终于没白买</p>]]></content>
      <categories>
        <category>分享境</category>
      </categories>
  </entry>
  <entry>
    <title>优雅地下载我的B站投币视频</title>
    <url>/download-webhook/</url>
    <content><![CDATA[<style>twitter-widget{margin:0 auto!important}</style><blockquote class="twitter-tweet" data-cards="hidden" data-lang="zh-cn"><p lang="zh" dir="ltr">B站收藏夹一堆失效视频，想做一个收藏后自动下载的小工具🤔<br><br>RSS+IFTTT+Webhooks+ffmpeg?</p><a href="https://twitter.com/DIYgod/status/1131898671111450625?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">&mdash; DIYgod (@DIYgod) 2019年5月24日</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>&nbsp;</p><p>下载B站视频很简单，you-get 一行命令的事，但我已经懒到命令都不想输了，如果投币之后 NAS 可以自己去下载就好了<a id="more"></a></p><h2 id="设想"><a href="#设想" class="headerlink" title="设想"></a>设想</h2><p>整个设想是这样的：投币操作 -&gt; RSS 更新 -&gt; IFTTT 触发 Webhook -&gt; 服务器下载</p><p>投币到 RSS 更新可以直接用 <a href="https://docs.rsshub.app/social-media.html#up-%E4%B8%BB%E6%8A%95%E5%B8%81%E8%A7%86%E9%A2%91" target="_blank" rel="noopener">RSSHub</a> 实现，RSS 更新到触发 Webhook 也可以直接在 IFTTT 里配置，整个多米诺骨牌就只缺少 Webhook 到下载这一块</p><h2 id="行动"><a href="#行动" class="headerlink" title="行动"></a>行动</h2><p>于是写了一个简单的小工具 —— <a href="https://github.com/DIYgod/download-webhook" target="_blank" rel="noopener">download-webhook</a>，它可以通过一个简单的 post 请求，触发服务器执行 you-get，下载视频到指定目录</p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><ol><li><p>给咬人猫投币</p><p><img src="/images/download-webhook1.jpg" alt=""></p></li><li><p>RSS 更新</p><p><img src="/images/download-webhook2.jpg" alt=""></p></li><li><p>IFTTT 触发</p><p><img src="/images/download-webhook3.jpg" alt=""></p></li><li><p>download-webhook 收到下载请求</p><p><img src="/images/download-webhook4.jpg" alt=""></p></li><li><p>下载完成</p><p><img src="/images/download-webhook5.png" alt=""></p></li></ol><h2 id="进一步"><a href="#进一步" class="headerlink" title="进一步"></a>进一步</h2><p>以上同样适用于自动下载 YouTube \ Instagram \ Tumblr 视频、网易云音乐歌曲等，只要 RSSHub 和 you-get 支持</p><p>另外对于图片，Webhook URL 参数直接传入图片地址也可以下载，所以也可以轻松实现自动下载 Bing 每日壁纸、甚至 Telegram 的涩图频道（这里就不做推荐了）</p>]]></content>
      <categories>
        <category>创作集</category>
      </categories>
  </entry>
  <entry>
    <title>我有特别的 RSS 使用技巧</title>
    <url>/ohmyrss/</url>
    <content><![CDATA[<p>大家都知道 RSS 是一种用来消息聚合的格式规范，有着更高的阅读效率、更好的阅读体验、可以掌握主动权等等优点。</p><p>本文不会介绍 RSS 的各种好处和各式各样的阅读器，因为相关网络资料已经足够多了。这里我介绍一下怎样充分挖掘 RSS 的使用价值，因为它的用途一直被大家低估。</p><h2 id="阅读器"><a href="#阅读器" class="headerlink" title="阅读器"></a>阅读器</h2><p>从最简单的开始，我们可以看看如何用 RSS 订阅一个博客。</p><a id="more"></a><p>假设你想订阅世界上最可爱的博客 <a href="https://diygod.me/">Hi, DIYgod</a>，巧的是它已经很贴心地提供了 <a href="https://diygod.me/atom.xml">RSS 地址</a>，你只需要找一个适合自己的 RSS 阅读器。</p><p>这里有几个推荐：</p><p>iOS 和 macOS 平台 - Reeder</p><p>Android 平台 - Palabre 和 FeedMe</p><p>打开阅读器，输入链接，点击订阅</p><p><img src="/images/9102rss1.png" alt=""></p><p><img src="/images/9102rss2.png" alt=""></p><p>我们便学会了 RSS 最基础的使用方法。</p><h2 id="云服务"><a href="#云服务" class="headerlink" title="云服务"></a>云服务</h2><p>这时候你可能会发现一些问题。</p><p>只有一直开着电脑或手机才能获取到更新，如果勤劳的 DIYgod 一天更新了 100 篇文章，而 RSS 的输出数量是有限的，等一天后再开电脑，这时候阅读器刷新，你只能看到最新的几篇了（当然 DIYgod 不可能一天更新 100 篇，这个例子不是很好）。</p><p>还有，你同时在手机和电脑上订阅了 DIYgod，在电脑上看完，手机上还是未读状态，如果订阅了很多内容，这会很糟糕。</p><p>所以我们需要一个服务端来同步和刷新 RSS 内容。</p><p>其中用的人数最多的是 Feedly 和 Inoreader。</p><p>它们固然很好，但我更推荐功能更强自由度更高的自建 <a href="https://github.com/HenryQW/docker-ttrss-plugins" target="_blank" rel="noopener">Tiny Tiny RSS</a>。</p><p>自建不仅可以使数据更可控，它还有丰富的插件可以满足各种各样的需求，比如全文内容提取、Fever API 模拟、DOM 操控、繁体转简体。上面提到的阅读器都可以配合它使用。</p><p><img src="/images/9102rss3.png" alt=""></p><h2 id="RSSHub"><a href="#RSSHub" class="headerlink" title="RSSHub"></a>RSSHub</h2><p>看起来很美好，但提供 RSS 订阅的网站实在是太少了，原因很好理解：RSS 不利于网站方的广告投放、隐私搜集、用户存留等商业行为。</p><p>我们当然不满于此，于是我发起了 <a href="https://github.com/DIYgod/RSSHub" target="_blank" rel="noopener">RSSHub</a> 项目，项目原理很简单：RSSHub 请求你想要的源站数据，然后把它们以 RSS 格式输出，做到了万物皆可 RSS。</p><p>经过近 200 名开发者历时一年多的活跃开发，RSSHub 已经支持了 300 多个网站的近 600 种数据，而且这些数字还在快速增长中。</p><p>这里分享一部分我常用的路由：</p><ul><li><p>什么值得买排行榜：谨慎订阅，它浪费了我不少钱</p></li><li><p>各种老婆的手办更新：闭着眼买就完事了</p></li><li><p>微小微和猫饼的 bilibili 动态</p></li><li><p>DIYgod 关注视频动态：DIYgod 关注的 UP 主们的动态，不用刷很蠢的 B 站动态了</p></li><li><p>JFlaMusic 的 Youtube 视频</p></li><li><p>Dcard 论坛：一个超级有趣的台湾论坛，适合配合 Tiny Tiny RSS 的繁体转简体插件使用</p></li><li><p>PlayStation Store 会员限免游戏：再也不怕忘记领免费游戏（虽然领了也不会玩）</p></li><li><p>RSSHub 有新路由啦</p></li><li><p>himitsu 的 Twitter 动态：NSFW</p></li><li><p>发小的微博：不会再因为错过发小的微博被骂了</p></li><li><p>即刻工作日闹钟设置提醒</p></li><li><p>公众号“微小微”更新</p></li><li><p>豆瓣正在上映的超过 7.5 分的电影</p></li><li><p>知乎热榜</p></li></ul><h2 id="BT-下载"><a href="#BT-下载" class="headerlink" title="BT 下载"></a>BT 下载</h2><p>假设你是一个美剧爱好者，我们可以看看如何用 RSS 来追权利的游戏第 8 季。</p><p>RSSHub 有一些支持 BT 下载的路由，比如权利的游戏字幕组源订阅地址为：<a href="https://rsshub.app/zimuzu/resource/10733" target="_blank" rel="noopener">https://rsshub.app/zimuzu/resource/10733</a>，接着我们加一个 filter 参数过滤出第 8 季内容：<a href="https://rsshub.app/zimuzu/resource/10733?filter=S08" target="_blank" rel="noopener">https://rsshub.app/zimuzu/resource/10733?filter=S08</a>。</p><p>然后挑选一个正常的 BT 客户端（迅雷不算），我用的是群晖的 Download Station。</p><p>把地址添加到 BT 客户端的 RSS 订阅，这样美剧更新后 BT 客户端就会自动把最新一集下载到硬盘里，晚上下班回家打开电视就可以直接看了。</p><p>最近我订阅的美剧和日剧</p><p><img src="/images/9102rss4.jpg" alt=""></p><p>获取到更新并下载完成群晖会发邮件告诉我</p><p><img src="/images/9102rss5.png" alt=""></p><h2 id="播客"><a href="#播客" class="headerlink" title="播客"></a>播客</h2><p>假设你是一个播客爱好者，我们可以看看如何用 RSS 来扩充你的播客库。</p><p>播客客户端可以访问 RSS 检查更新，以下载系列中新的集数收听，RSSHub 或 <a href="https://getpodcast.xyz/" target="_blank" rel="noopener">getpodcast</a> 有一些支持播客的 RSS 可以直接使用，比如用 iOS 自带的播客应用订阅一个网易云音乐的 ASMR 电台：</p><p><img src="/images/9102rss6.jpg" alt=""></p><h2 id="联动"><a href="#联动" class="headerlink" title="联动"></a>联动</h2><p>RSS 可以通过 IFTTT 跟各种奇奇怪怪的东西联动。</p><p>其中一个使用案例是我的 Telegram 频道：<a href="https://t.me/awesomeDIYgod" target="_blank" rel="noopener">https://t.me/awesomeDIYgod</a>，它通过 IFTTT 监听了很多 RSS 更新，有 DIYgod 的博客更新、DIYgod 的扇贝打卡、DIYgod 的 Twitter 更新、DIYgod 喜欢的网易云音乐、DIYgod 的 bilibili 投币视频…</p><p>这样你甚至可以很容易实现通过 RSS 控制开关灯、咕咕鸡自动打印小姐姐的微博、把权利的游戏差评自动发推特艾特编剧等等操作，虽然可能没什么用就是了。</p><p>6 月 2 日更新：</p><p>一次优秀的联动：<a href="/download-webhook">《优雅地下载我的B站投币视频》</a></p><p>&nbsp;</p><p>以上是我列举的几个适合 RSS 使用的场景和方式，现在大家是不是对 “RSS 是一种用来消息聚合的格式规范” 这句话有了更深的理解呢？</p>]]></content>
      <categories>
        <category>分享境</category>
      </categories>
  </entry>
  <entry>
    <title>《青春猪头少年不会梦到兔女郎学姐》圣地巡礼</title>
    <url>/mai-tour/</url>
    <content><![CDATA[<div class="aplayer" id="aplayer-mai"></div><script>$(function(){$.ajax({url:"https://api.i-meto.com/meting/api?server=netease&type=song&id=1313052943",success:function(e){var a=new APlayer({element:document.getElementById("aplayer-mai"),showlrc:3,theme:"#8d7561",music:JSON.parse(e)[0]});window.aplayers||(window.aplayers=[]),window.aplayers.push(a)}})})</script><p>之前去日本玩了几天，最后一天没什么事了，初雪说我们去看兔女郎吧</p><p>4月7日，清晨 11 点半，我们便早早地起床坐上了前往湘南的 JR，开始了这次《青春猪头少年不会梦到兔女郎学姐》 江之岛 ~ 镰仓高校前 ~ 七里滨 ~ 藤泽车站 的圣地巡礼之旅</p><p><img src="/images/mai-tour0.jpg" alt=""></p><a id="more"></a><h2 id="江之岛"><a href="#江之岛" class="headerlink" title="江之岛"></a>江之岛</h2><p>我们从新宿坐 JR 一路南下到了江之岛，还是挺远的，全程花了一个多小时，还好我们起得早，下午 1 点就到了</p><p>除了兔女郎学姐之外，江之岛也是诸多动画与日剧的取景圣地，以至于江之岛观光案内所专门有一本动漫巡礼地图</p><p><img src="/images/mai-tour1.jpg" alt=""></p><p>上岛之后第一件事就是找麻衣代言的限定桃子味汽水</p><p>找了好几台自动售卖机才找到，超级开心，没错了，是学姐的味道！</p><p><img src="/images/mai-tour2.jpg" alt=""></p><p>我可以一口气喝 10 瓶</p><p>继续往前走，可以经过江之岛上的诸多神社，动画第 6 话中师傅与学妹参拜的是主干道上的江岛神社</p><p><img src="/images/mai-tour3.jpg" alt=""></p><p><a href="https://www.bilibili.com/bangumi/play/ep251081?t=14m36s" target="_blank" rel="noopener">视频直达</a></p><p><img src="/images/mai-tour4.jpg" alt=""></p><p><a href="https://www.bilibili.com/bangumi/play/ep251081?t=14m51s" target="_blank" rel="noopener">视频直达</a></p><p><img src="/images/mai-tour5.jpg" alt=""></p><p><a href="https://www.bilibili.com/bangumi/play/ep251081?t=15m28s" target="_blank" rel="noopener">视频直达</a></p><p>第 6 话剧情高潮的展望台</p><p><img src="/images/mai-tour6.jpg" alt=""></p><p><a href="https://www.bilibili.com/bangumi/play/ep251081?t=16m42s" target="_blank" rel="noopener">视频直达</a></p><p><img src="/images/mai-tour7.jpg" alt=""></p><p><a href="https://www.bilibili.com/bangumi/play/ep251081?t=15m47s" target="_blank" rel="noopener">视频直达</a></p><p>然后<del>坐电梯</del>爬到山顶可以登上一个高塔，塔上可以看到很远</p><p><img src="/images/mai-tour8.jpg" alt=""></p><p>江之岛游览完毕后，原路从大桥返回地铁站，会经过一段地下通道</p><p><img src="/images/mai-tour9.jpg" alt=""></p><p><a href="https://www.bilibili.com/bangumi/play/ep251081?t=14m02s" target="_blank" rel="noopener">视频直达</a></p><p><img src="/images/mai-tour10.jpg" alt=""></p><p><a href="https://www.bilibili.com/bangumi/play/ep251081?t=14m07s" target="_blank" rel="noopener">视频直达</a></p><h2 id="镰仓高校前"><a href="#镰仓高校前" class="headerlink" title="镰仓高校前"></a>镰仓高校前</h2><p>现在回到江之岛站，坐江之岛电铁线到下一站 —— 镰仓高校前站</p><p>江之电是很特别的绿皮火车，一路上的风景特别好，街道、海岸</p><p>镰仓高校前站下车，沿着铁路线向腰越方向步行，一分钟便可到达 OP 中最先登场的踢你的肾场景</p><p>这里为了拍到场景中一样的火车在路边站了好久，拍完之后惊喜地发现连左边的汽车都惊人的相似</p><p><img src="/images/mai-tour11.jpg" alt=""></p><p><a href="https://www.bilibili.com/bangumi/play/ep251076?t=58s" target="_blank" rel="noopener">视频直达</a></p><p><img src="/images/mai-tour12.jpg" alt=""></p><p><a href="https://www.bilibili.com/bangumi/play/ep251076?t=1m52s" target="_blank" rel="noopener">视频直达</a></p><p>接着返回镰仓高校前站内，这里是动画第 9 话中，小姨子代替麻衣参加 CM 的摄影拍摄地</p><p><img src="/images/mai-tour13.jpg" alt=""></p><p><a href="https://www.bilibili.com/bangumi/play/ep251084?t=18m18s" target="_blank" rel="noopener">视频直达</a></p><p><img src="/images/mai-tour14.jpg" alt=""></p><p><a href="https://www.bilibili.com/bangumi/play/ep251084?t=18m11s" target="_blank" rel="noopener">视频直达</a></p><p>在镰仓高校前站向七里滨站方向走一分钟，发现这里有很多小姐姐在拍照，这里正是著名的《灌篮高手》取景地，樱木花道与赤木晴子相遇的铁道口</p><p><img src="/images/mai-tour15.jpg" alt=""></p><p>铁道口对面就是七里滨海滩，站在沙滩上可以看见不远处的江之岛，动画中在沙滩上的诸多场景，皆是取景于此，但是没时间去了</p><h2 id="七里滨"><a href="#七里滨" class="headerlink" title="七里滨"></a>七里滨</h2><p>接着坐江之岛电铁线到下一站，便可以来到动画中出现次数最多的车站 —— 七里滨站</p><p>动画中对于七里滨车站超级还原，无论是出入口还是站台内的自动贩卖机，给我一种转头就可以看到麻衣学姐的错觉</p><p><img src="/images/mai-tour16.jpg" alt=""></p><p><a href="https://www.bilibili.com/bangumi/play/ep251076?t=9m6s" target="_blank" rel="noopener">视频直达</a></p><p><img src="/images/mai-tour17.jpg" alt=""></p><p><a href="https://www.bilibili.com/bangumi/play/ep251076?t=8m33s" target="_blank" rel="noopener">视频直达</a></p><p><img src="/images/mai-tour18.jpg" alt=""></p><p><a href="https://www.bilibili.com/bangumi/play/ep251076?t=8m31s" target="_blank" rel="noopener">视频直达</a></p><p><img src="/images/mai-tour19.jpg" alt=""></p><p><a href="https://www.bilibili.com/bangumi/play/ep251076?t=9m33s" target="_blank" rel="noopener">视频直达</a></p><p><img src="/images/mai-tour20.jpg" alt=""></p><p><a href="https://www.bilibili.com/bangumi/play/ep251080?t=20m5s" target="_blank" rel="noopener">视频直达</a></p><p>后面还有师傅与学姐上学的峰原高中、ED 中的海岸公园、初次相遇兔女郎的藤泽市综合市民图书馆、和学妹互踢屁股的御所谷公园、师傅打工的餐厅 等众多打卡点，但看时间快要误机了，此次巡礼之旅就到此为止</p><h2 id="藤泽车站"><a href="#藤泽车站" class="headerlink" title="藤泽车站"></a>藤泽车站</h2><p>回东京的时候路过了藤泽车站，师傅上学就是从这里出发，乘坐江之岛电铁线到七里滨站</p><p>藤泽车站及其附近还有很多场景，但这时候快误机了，紧张的一批，没时间仔细看了，只随便拍了一张</p><p>师傅跟学姐第一次约会迟到的改札口</p><p><img src="/images/mai-tour21.jpg" alt=""></p><p><a href="https://www.bilibili.com/bangumi/play/ep251076?t=12m29s" target="_blank" rel="noopener">视频直达</a></p><p>回到东京站拿到行李后向成田机场一路狂奔</p><p>在成田特快 Express 上面姬合照</p><p><img src="/images/mai-tour22.jpg" alt=""></p><p>赶到机场登机口时候已经开始登机了，还好赶上了，不然再晚 10 分钟只能去初雪家睡了</p><p>&nbsp;</p><p>下集预告：我们在日本一共玩了 9 天，本文是最后一天的内容，过一两周会剪一个 9 天的 vlog 出来，9 倍的快乐，记得看哟</p><p>&nbsp;</p><p>巡礼参考攻略：</p><p><a href="https://itunes.apple.com/jp/app/%E8%88%9E%E5%8F%B0%E3%82%81%E3%81%90%E3%82%8A-%E3%82%A2%E3%83%8B%E3%83%A1%E8%81%96%E5%9C%B0%E5%B7%A1%E7%A4%BC-%E3%82%B3%E3%83%B3%E3%83%86%E3%83%B3%E3%83%84%E3%83%84%E3%83%BC%E3%83%AA%E3%82%BA%E3%83%A0%E3%82%A2%E3%83%97%E3%83%AA/id680489568" target="_blank" rel="noopener">‎「舞台めぐり - アニメ聖地巡礼・コンテンツツーリズムアプリ」をApp Storeで</a></p><p><a href="https://zhuanlan.zhihu.com/p/52373529" target="_blank" rel="noopener">《青春猪头少年不会梦到兔女郎学姐》圣地巡礼攻略（详） - 知乎</a></p><p><a href="https://bbs.qyer.com/thread-3102232-1.html" target="_blank" rel="noopener">《青春期笨蛋不会做兔女郎学姐的梦》动画【圣地巡礼】 - 穷游网</a></p>]]></content>
      <categories>
        <category>日记本</category>
      </categories>
  </entry>
  <entry>
    <title>HeadlessChrome 自动化测试探索</title>
    <url>/headlesschrome/</url>
    <content><![CDATA[<p>埋点一直是B站 HTML5 播放器开发和测试过程中的一个痛点，埋点的种类和接口参数很多，测试很麻烦也很容易出错</p><p>虽然测试很麻烦，但它们的规则都很简单，比如点击或 hover 一个按钮、错误上报、播放和性能上报，那么能不能通过自动化的 E2E 测试来代替这些又繁琐又机械化又容易出错的测试工作呢？</p><p>在一次埋点线上事故后，我花了一天时间做了一些探索，最后效果还不错，在这里做一下简单的总结</p><a id="more"></a><h2 id="编写测试脚本"><a href="#编写测试脚本" class="headerlink" title="编写测试脚本"></a>编写测试脚本</h2><p>模拟用户操作就需要用到无头浏览器，我采用了 Jest + Puppeteer 的组合</p><p>Jest 是一个测试框架，Puppeteer 是用来控制 Chrome 或 Chromium</p><p>选择 Jest 是因为我对 Jest 最熟悉，然后又找到了一个 preset: <a href="https://github.com/smooth-code/jest-puppeteer" target="_blank" rel="noopener">jest-puppeteer</a>，不是必需的，但它可以简化很多 Puppeteer 操作</p><p>安装依赖：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save-dev jest jest-puppeteer puppeteer</span></pre></td></tr></table></figure><p>测试脚本很简单：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">describe(<span class="string">'log'</span>, () =&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    beforeAll(<span class="keyword">async</span> () =&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        page.goto(<span class="string">'https://www.bilibili.com/video/av44890855'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    it(<span class="string">'play_screen'</span>, <span class="keyword">async</span> (done) =&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        page.on(<span class="string">'request'</span>, (request) =&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> (request.url().match(<span class="regexp">/^https:\/\/data\.bilibili\.com\/log\/web\?play_screen...参数参数/</span>)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                done();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        page.click(<span class="string">'video'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure><p>让 HeadlessChrome 打开一个播放页，监控页面请求的接口，模拟点击 video 元素，监控到浏览器请求了 play_screen 埋点即测试成功</p><p>看起来没什么问题，开开心心地执行了测试，结果 failed</p><p>发生了什么？配置 <code>headless: false</code> 观看了一下测试过程</p><p><img src="/images/headlesschrome1.jpg" alt=""></p><p>发现是因为检测到浏览器不支持 HTML5 播放器，加载了 Flash 播放器</p><p>Puppeteer <a href="https://github.com/GoogleChrome/puppeteer#q-what-features-does-puppeteer-not-support" target="_blank" rel="noopener">文档里说道</a></p><blockquote><p>Puppeteer is bundled with Chromium–not Chrome…Puppeteer does not support licensed formats such as AAC or H.264</p></blockquote><p>解决方法也很简单，把 Puppeteer 自带的 Chromium 换成本地的 Chrome</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">launch: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    executablePath: <span class="string">'/Applications/Google Chrome.app/Contents/MacOS/Google Chrome'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>测试通过</p><p><img src="/images/headlesschrome2.jpg" alt=""></p><h2 id="Chrome-as-a-service"><a href="#Chrome-as-a-service" class="headerlink" title="Chrome as a service"></a>Chrome as a service</h2><p>刚才使用了本地的 Chrome，会依赖本地环境，而且想作为自动化测试跑在测试机上也是不行的</p><p>所以我又在测试机上跑了一个 docker 容器：<a href="https://hub.docker.com/r/browserless/chrome" target="_blank" rel="noopener">browserless/chrome</a>，它可以把 Chrome 当做一个 service，测试脚本使用 websocket 协议操作 docker 里的 Chrome，这样就避免了依赖本地 Chrome</p><p>启动容器：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull browserless/chrome:release-chrome-stable</span></pre></td></tr><tr><td class="code"><pre><span class="line">docker run -d -p 3000:3000 browserless/chrome:release-chrome-stable</span></pre></td></tr></table></figure><p>使用：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">connect: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    browserWSEndpoint: <span class="string">'ws://localhost:3000'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h2 id="劫持-js"><a href="#劫持-js" class="headerlink" title="劫持 js"></a>劫持 js</h2><p>这样用的是线上版本，根本没有测试本地代码啊！</p><p>哦，忘了说了，还需要把线上 js 劫持为本地版本</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> page.setRequestInterception(<span class="literal">true</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">page.goto(<span class="string">'https://www.bilibili.com/video/av44890855'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">page.on(<span class="string">'request'</span>, (request) =&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (request.url().match(<span class="regexp">/player\.js/</span>)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        request.respond(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            status: <span class="number">200</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            contentType: <span class="string">'application/javascript'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            body: fs.readFileSync(<span class="string">'dist/release/player.js'</span>).toString()</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        request.continue();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>创作集</tag>
      </tags>
  </entry>
  <entry>
    <title>2018 年终总结</title>
    <url>/2018/</url>
    <content><![CDATA[<p>2018，无所事事又带点丧的一年，感觉很对不起 23 岁这个年纪，要跟自己说声对不起了<a id="more"></a></p><h2 id="开源"><a href="#开源" class="headerlink" title="开源"></a>开源</h2><p>今年 4 月开坑了 <a href="https://github.com/DIYgod/RSSHub" target="_blank" rel="noopener">RSSHub</a>，让自己学到了的很多东西，认识了很多人，算是今年为数不多的有趣的事情之一了</p><p><a href="https://github.com/MoePlayer/APlayer" target="_blank" rel="noopener">APlayer</a> 和 <a href="https://github.com/MoePlayer/DPlayer" target="_blank" rel="noopener">DPlayer</a> 有半年时间在咕咕咕</p><p>2019 期望再开一个 LTS 一年以上的坑，暂时还没什么想法 🤯</p><p><img src="/images/2018-2.jpg" alt=""></p><p><img src="/images/2018-1.jpg" alt=""></p><h2 id="足迹"><a href="#足迹" class="headerlink" title="足迹"></a>足迹</h2><p>参展：</p><p><a href="https://diygod.me/2018-bao-zou-yu-ren-jie/">暴走 yu 人节</a><br><a href="https://diygod.me/bw2018/">bw &amp; bml</a><br><a href="https://diygod.me/cj2018/">ChinaJoy</a><br>CP22<br><a href="https://diygod.me/cp2018sp/">CP2018SP</a><br>Google 开发者大会<br>CP23</p><p>旅游：</p><p>无</p><p>漫展都快去烦了，却没意识到今年一次都没出去旅游，2019 要好好制定一下出行计划了，想 3 月底去日本看樱花 🌸，想去成都找阿猫和七夏姐姐吃火锅，想去深圳找汤圆逛下腾讯，然后去澳门塔蹦极</p><p><img src="/images/2018-3.jpg" alt=""></p><h2 id="技能"><a href="#技能" class="headerlink" title="技能"></a>技能</h2><p>🎨 画画：<a href="https://twitter.com/DIYgod/status/1005134065412943872" target="_blank" rel="noopener">一</a> <a href="https://twitter.com/DIYgod/status/1006221633470660608" target="_blank" rel="noopener">二</a> <a href="https://twitter.com/DIYgod/status/1011283860930215941" target="_blank" rel="noopener">三</a>，重拾了小学放下的画笔（<del>iPad Pencil</del>），画画真好玩，可惜 darling 烂尾之后很生气，没什么想画的了，就没能坚持下来，2019 再给我一个画画的动力吧</p><p>🤸‍♀️ HIPHOP 街舞：运动强度极大，上完体验课浑身疼了好几天，但是很酷，报了 10 节私教课和 9 节大课，还没开始正式上课，2019 应该可以坚持下来，毕竟挺贵的，这几节课就花了 8000 块左右（两个人）</p><p>🎬 vlog：<a href="https://diygod.me/bw2018/">一</a> <a href="https://diygod.me/cj2018/">二</a> <a href="https://diygod.me/cp2018sp/">三</a>，买了 Osmo Mobile 2，漫展拍了几次，已经失去兴趣了</p><p>🍛 做饭：在室友的指导下做了一盘<a href="https://twitter.com/DIYgod/status/1044928336802136064" target="_blank" rel="noopener">小炒肉</a>，比想象中简单嘛</p><p>🎃 做南瓜灯：<a href="https://twitter.com/DIYgod/status/1057545543252041728" target="_blank" rel="noopener">一</a> <a href="https://twitter.com/DIYgod/status/1057614657169514496" target="_blank" rel="noopener">二</a>，放进灯的一瞬间惊喜地跳了起来，很有成就感，最后一直放烂了才舍得扔</p><h2 id="健康"><a href="#健康" class="headerlink" title="健康"></a>健康</h2><p>12 月才开始健身，一天 keep 一天跑步，结果强度设置太大，喜闻乐见地伤到了，休息一周半了，没意外的话下周会恢复</p><p>体重没减下来，但也没增加</p><p>早睡：大失败</p><p>2019 想把头发染成橘黄色 👩‍🦰</p><p><img src="/images/2018-4.jpg" alt=""></p><h2 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a>游戏</h2><p>守望先锋练成了一手无敌强的法鸡，但在七夏姐姐不玩了之后也好几个月没玩过了</p><p>买了 PS4，肝了 60 多个小时后通关（出新手村）了怪物猎人世界，结尾的 BGM 真好听，通关后又被双爆鳞龙和炎妃龙打自闭了 🤐</p><p>堡垒之夜、分手厨房 2、王者荣耀、大表哥 2、跳楼少女、太鼓达人也稍微玩了一下下</p><p><img src="/images/2018-5.jpg" alt=""></p><h2 id="影视"><a href="#影视" class="headerlink" title="影视"></a>影视</h2><p>话剧：</p><p>《乌龙山伯爵》：最佳<br>《李茶的姑妈》<br>《皇帝的新娘》</p><p>电视剧：</p><p>《我是大哥大》：最佳<br>《保镖》<br>《迷雾》<br>《逃避虽可耻但有用》<br>《黑镜》<br>《这份恋情有罪吗！？》<br>《无法成为野兽的我们》<br>《西部世界》<br>《魔法觉醒》<br>《人类清除计划》</p><p>番剧：</p><p>《DARLING in the FRANXX》：最佳（勉强）<br>《齐木楠雄的灾难 第二季》<br>《青春猪头少年不会梦到兔女郎学姐》<br>《千绪的上学路》<br>《citrus～柑橘味香气～》<br>《工作细胞》<br>《路人女主的养成方法》<br>《NO GAME NO LIFE》<br>《我家女仆有够烦！》<br>《進擊的巨人 第三季》<br>《凸变英雄》<br>《JOJO的奇妙冒险 黄金之风》<br>《OVERLORD》<br>《博多豚骨拉面团》<br>《pop子和pipi美的日常》<br>《刻刻》</p><p>电影：</p><p>太多了，略过</p><p>一共 3 部话剧，10 部电视剧，16 部番剧，超出预期 🙋‍♀️</p><p>有很多想读的书一本都没读，2019 期望可以多读一些书</p><p><img src="/images/2018-6.jpg" alt=""></p><h2 id="情感"><a href="#情感" class="headerlink" title="情感"></a>情感</h2><p>跟酸奶的感情依然很好，她现在就在我旁边睡觉 🐱</p><p>跟发小的地理距离变近了，但是…事情变得怪怪的，希望只是暂时的</p><p>还有很多想说的，不能写出来</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>去年 ch 在她 23 岁的年终总结里写到</p><blockquote><p>现在的年纪</p><p>已经是不能再马马虎虎生活工作的年纪了</p><p>再也不是心情一好起来 什么都会好起来的年纪</p></blockquote><p>上次看到还不以为意，现在感觉真是一针见血</p><p>2019 希望可以活得更认真一点，尽量让自己变得充实有趣起来，但说实话我也没什么信心</p>]]></content>
      <categories>
        <category>日记本</category>
      </categories>
  </entry>
  <entry>
    <title>从零开始的 NAS 生活</title>
    <url>/nas/</url>
    <content><![CDATA[<p>很早就想组一个家庭 NAS 设备，趁着这次双十一，在京东买了一台群晖 DS218play 和一块酷狼 4T 硬盘，已经用了两天了，我的感受是：</p><p><strong>爽爆</strong><a id="more"></a></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>目前常用的有下面几个功能</p><h3 id="Time-Machine"><a href="#Time-Machine" class="headerlink" title="Time Machine"></a>Time Machine</h3><p><img src="/images/nas1.jpg" alt=""></p><p>之前用 Time Machine 做备份要一直连着移动硬盘，很麻烦而且容易忘记，经常是 Mac 提醒我已经 10 多天没备份了才想起来插上移动硬盘备份一下，有 NAS 之后可以实现无线和远程备份，在任何地方都可以让 Mac 每小时自动备份到家里的 NAS 里</p><h3 id="BT-下载"><a href="#BT-下载" class="headerlink" title="BT 下载"></a>BT 下载</h3><p><img src="/images/nas2.jpg" alt=""></p><p>使用 RSS 订阅喜欢的番剧或美剧，有更新可以自动下载，或者在公司<del>摸鱼</del>的时候看到一部喜欢的电影，可以远程登录到家里的群晖，添加 BT 任务，晚上回家就可以直接看了</p><h3 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h3><p>这是 NAS 最基础的功能了，它最大的好处是可以快速在不同设备间共享</p><p>比如我在电脑上把樱岛麻衣的照片存到 NAS 里，打开手机可以随时看</p><p><img src="/images/nas3.jpg" alt=""></p><p>再比如我下载了一部日剧，根据我心情的不同，我有可能想坐在桌子前用电脑看，也有可能想躺在床上用 iPad 看</p><p><img src="/images/nas4.png" alt=""></p><p>而在有 NAS 之前，我必须把 iPad 用数据线连到电脑上，打开难用的要死的 iTunes，然后把视频拷贝到 iPad 里才能看</p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>群晖有一个叫 QuickConnect 的东西，可以分配一个群晖的域名，可以直接用它在公网远程连接</p><p>但我想绑定自己的域名，还是折腾了一下，没想到那么麻烦</p><h3 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h3><p>为了将外网对应到内网的 NAS 上</p><p>家里的电信宽带已经有了公网 IP，设置下端口转发就行了，以为很简单，没想到是个大坑</p><p><img src="/images/nas5.jpg" alt=""></p><p>用路由器的 DMZ 功能设置好转发之后，发现没效果，访问公网 IP 返回的是光猫的登录界面，才知道光猫和路由器不是桥接，还需要在光猫上设置转发，尝试了下发现我没有光猫的超级管理员账号，没有权限设置</p><p>Google 上查到了几种电信光猫的破解方法，试了都无效，凌晨4点多给电信客服打电话，居然有人接…约了早上电信师傅上门处理</p><p>早上电信师傅过来给了超级管理员账号</p><p>超级管理员账号进了光猫后台，把光猫和路由器设置成桥接后端口转发正常了</p><h3 id="DDNS"><a href="#DDNS" class="headerlink" title="DDNS"></a>DDNS</h3><p>为了将动态的公网 IP 映射到我的域名上</p><p><img src="/images/nas6.jpg" alt=""></p><p><img src="/images/nas7.jpg" alt=""></p><p>群晖和路由器都带了 DDNS 功能，却发现都不支持 CloudXNS…只能自己动手了</p><p>惊喜地发现了这个东西：<a href="https://github.com/lixuy/CloudXNS-DDNS-with-BashShell" target="_blank" rel="noopener">https://github.com/lixuy/CloudXNS-DDNS-with-BashShell</a></p><p><img src="/images/nas8.jpg" alt=""></p><p>利用群晖的任务计划功能 10 分钟跑一下这个脚本，实现了 CloudXNS 的 DDNS</p><h3 id="SSL-证书"><a href="#SSL-证书" class="headerlink" title="SSL 证书"></a>SSL 证书</h3><p><img src="/images/nas9.jpg" alt=""></p><p>群晖自带了自动从 Let’s Encrypt 获取证书的功能，真香</p><p>却发现群晖用的验证方式必须用 80 端口，国内根本不能用，真臭</p><p><img src="/images/nas10.jpg" alt=""></p><p>也找到了解决方案：<a href="http://www.up4dev.com/2018/05/29/synology-ssl-wildcard-cert-update/" target="_blank" rel="noopener">http://www.up4dev.com/2018/05/29/synology-ssl-wildcard-cert-update/</a></p><p>同样是利用群晖的任务计划功能一个月跑一下这个脚本，解决了 SSL 证书和自动续签</p><p><img src="/images/nas11.jpg" alt=""></p><p>最后实现了通过自己的域名 <a href="https://nas.diygod.me:2222" target="_blank" rel="noopener">https://nas.diygod.me:2222</a> 远程访问 NAS，细心的小可爱刚才已经在文章第一张图里看到了这个域名</p>]]></content>
      <categories>
        <category>分享境</category>
      </categories>
  </entry>
  <entry>
    <title>C94 & CP2018SP 参展日记</title>
    <url>/cp2018sp/</url>
    <content><![CDATA[<p>C94 和 CP2018SP 不是同一天，但都是同人展，时间又很近，就写在一起了</p><h2 id="C94"><a href="#C94" class="headerlink" title="C94"></a>C94</h2><p>Comic Market，全球最大的同人展，8 月 10 日在东京举办，我当然没钱去，三天都在 Twitter 云参展，口水流了一地</p><p>托朋友到 Aniplex 展台买了矢吹健太朗的 darling 本子，毕竟官方画师质量超级棒，舔爆！</p><p>如果再给我一次机会，我应该会买三本，一本自舔一本收藏一本传教</p><a id="more"></a><div id="player-cp1"></div><script type="text/javascript" src="https://player.dogecloud.com/js/loader"></script><script type="text/javascript">var player=new DogePlayer({container:document.getElementById("player-cp1"),userId:17,vcode:"596384de52393e72",autoPlay:!1})</script><p>&nbsp;</p><h2 id="CP2018SP"><a href="#CP2018SP" class="headerlink" title="CP2018SP"></a>CP2018SP</h2><p>出发前发现云台坏了，辣鸡大疆，所以这次没有 vlog 了</p><p>Comicup，8 月 25 日在上海举办，CP2018SP 规模比今年5月份的 CP22 小了很多，跟 C94 更没法比，全场两个多小时就逛完了，然后实在无聊又重头逛了一遍…</p><p>虽然规模小但还是买到了很多喜欢的本子，把遇到的 darling 都买了，舔爆！</p><p><img src="/images/cp2018sp.jpg" alt=""></p><p>对比 CP22</p><p><img src="/images/cp22.jpg" alt=""></p><p>出来之后和朋友去吃了牛肉火锅，然后看蚁人，然后又撸串，撸串这家散装的草莓啤酒超级好喝，讨厌喝酒的我都喝了一大杯，看 Freddy 开心得手舞足蹈就知道有多好喝了</p><style>#player-cp2 .dplayer-notice{display:none}</style><div id="player-cp2"></div><script type="text/javascript" src="https://player.dogecloud.com/js/loader"></script><script type="text/javascript">var player=new DogePlayer({container:document.getElementById("player-cp2"),userId:17,vcode:"af7819dc291a5920",autoPlay:!0,loop:!0})</script><p>&nbsp;</p>]]></content>
      <categories>
        <category>日记本</category>
      </categories>
  </entry>
  <entry>
    <title>2018 ChinaJoy 参展日记</title>
    <url>/cj2018/</url>
    <content><![CDATA[<p>8月4日去了 ChinaJoy，人还是一如既往的多</p><p>AC 娘真可爱，舔爆</p><p>第二次拍 vlog，然后拍完懒得剪，还是 Freddy 帮我剪的，我在视频里真可爱</p><div id="player-cj"></div><script type="text/javascript" src="https://player.dogecloud.com/js/loader"></script><script type="text/javascript">var player=new DogePlayer({container:document.getElementById("player-cj"),userId:17,vcode:"10c5de157e5129c0",autoPlay:!1})</script><a id="more"></a><p>&nbsp;</p><p><img src="/images/cj1.jpg" alt=""></p><p>又见到了王尼玛和全体暴走家族成员，但这次心情很复杂</p><p>终于买到了之前一直碎碎念的 AC 娘包子头，然后被一万个人问在哪里弄的</p><p><del>软磨硬泡求</del>拿到了很喜欢的触手直播的毛绒触手，懒得拍照了你们自己想象吧</p><p>然后晚上和<a href="https://wj.qq.com/s2/3318631/2970" target="_blank" rel="noopener">绒布球群</a>里的绒布球们吃了饭，第二届绒布球线下py</p><p><img src="/images/cj2.jpg" alt=""></p>]]></content>
      <categories>
        <category>日记本</category>
      </categories>
  </entry>
  <entry>
    <title>2018 bw & bml 参展日记</title>
    <url>/bw2018/</url>
    <content><![CDATA[<p>7月21日和22日去了 bw 和 bml，面基了一万个人，py 通红</p><h3 id="BILIBILI-WORLD"><a href="#BILIBILI-WORLD" class="headerlink" title="BILIBILI WORLD"></a>BILIBILI WORLD</h3><p>2233 真可爱，舔爆</p><p>第一次拍 vlog，然后拍完懒得剪，还是 Freddy 帮我剪的</p><div id="player-bw"></div><script type="text/javascript" src="https://player.dogecloud.com/js/loader"></script><script type="text/javascript">var player=new DogePlayer({container:document.getElementById("player-bw"),userId:17,vcode:"e831056159c1f1a4",autoPlay:!1})</script><a id="more"></a><p>&nbsp;</p><p>然后晚上和<a href="https://wj.qq.com/s2/3318631/2970" target="_blank" rel="noopener">绒布球群</a>里的8个绒布球们吃了海底捞，第一届绒布球线下py</p><p>说好的都是肥宅，结果一个比一个<del>受</del>，不对，瘦</p><p>小桐桐、李聆歌、Siki、小萌、烷、冰喵、二九、DIYgod、Freddy</p><p><img src="/images/bw1.jpg" alt=""></p><h3 id="BILIBILI-MACRO-LINK"><a href="#BILIBILI-MACRO-LINK" class="headerlink" title="BILIBILI MACRO LINK"></a>BILIBILI MACRO LINK</h3><p>白天冒着台风跟可爱的 lwl 面基，带 lwl 逛了B站总部和撸酸奶</p><p><img src="/images/bw2.jpg" alt=""></p><p>又跟 <a href="https://www.rixcloud.com/" target="_blank" rel="noopener">richCloud</a> 老板 Zero 撸了串</p><p><img src="/images/bw3.jpg" alt=""></p><p>BML!</p><p><img src="/images/bw4.jpg" alt=""></p><p>一进场就被震撼到了，气氛超级嗨，每个人都在用荧光棒伴随节奏打着 call，特别是极乐净土出现的时候，非常激动，嗓子都要喊哑了</p><p>可惜坐的太靠后了，嘉宾的脸都看不清，希望明年可以买得起前面的位子（不要问我为什么公司不发票，用爱发电）</p>]]></content>
      <categories>
        <category>日记本</category>
      </categories>
  </entry>
  <entry>
    <title>Polymer 初体验</title>
    <url>/polymer/</url>
    <content><![CDATA[<p>作为开发者，我们都知道组件化、标准化和代码复用的重要性，前端也从未停止过对前端组件化的尝试，产生了各式各样的组件化技术，从 Vue React 等前端框架，到 webpack 这样的全站打包工具</p><p>但前端一直缺乏这样一个模块化标准和浏览器级别的原生组件化方案</p><p>Web Components 是 WHATWG 和 W3C 正在尝试的 Web 组件化方案，为组件化的前端开发提供浏览器级别的支持。它由四项主要技术组成：Shadow DOM、Custom Elements、HTML Import、HTML Template</p><p>Polymer 项目是 Google 的基于 Web Components 机制的框架，定位于简单的 Polyfill 和易用性封装，包括数据绑定，模板声明，事件系统等。Google 在去年就已经将其应用到了 YouTube 上</p><p>Polymer 3.0 在 20 天前刚刚发布，正好 B 站播放器近期需要重构所有 UI 组件，所以做了这样的一个调研，下文所有 demo 托管在 <a href="https://github.com/DIYgod/polymer-demos" target="_blank" rel="noopener">polymer-demos</a>，这些小 demo 只作为一些简单体验，想了解 Polymer 的完整功能建议阅读<a href="https://www.polymer-project.org/3.0/docs/devguide/feature-overview" target="_blank" rel="noopener">官方文档</a></p><a id="more"></a><h2 id="浏览器支持"><a href="#浏览器支持" class="headerlink" title="浏览器支持"></a>浏览器支持</h2><p>目前使用 Web Components 的最大阻碍就是浏览器支持程度低，且 Polyfills 体积相对偏大（90+kb）</p><p>目前只有新版 Chrome Opera 和 Safari 可以提供完整的原生支持，具体支持情况可以参考 <a href="https://caniuse.com/#search=web%20components" target="_blank" rel="noopener">caniuse.com</a>，使用 <a href="https://github.com/webcomponents/webcomponentsjs" target="_blank" rel="noopener">Polyfills</a> 后可以支持到 Edge IE11+ Firefox Safari9+</p><p>Polyfills 有三个主要的文件：</p><ul><li><code>webcomponents-bundle.js</code>: 包含了所有 polyfills</li><li><code>webcomponents-loader.js</code>: 可以检测浏览器支持情况，然后去加载对应的 polyfills，对有原生支持的浏览器可以减少不必要的浪费</li><li><code>custom-elements-es5-adapter.js</code>: 注册 Custom Elements 时需要使用 ES6 语法，所以当浏览器不支持 ES6 时需要做额外的处理，再引用这个文件就好了</li></ul><p>总的来说兼容最多浏览器的最佳实践是这样的：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">scirpt</span> <span class="attr">src</span>=<span class="string">"webcompoments-loader.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">scirpt</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">scirpt</span> <span class="attr">src</span>=<span class="string">"custom-elements-es5-adapter.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">scirpt</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"index.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></pre></td></tr></table></figure><p>其中 <code>webcompoments-loader.js</code> 必须单独引用，<code>custom-elements-es5-adapter.js</code> 可以跟 <code>polymer</code> 和你的代码用 Webpack 合到一起，但注意 <code>custom-elements-es5-adapter.js</code> 不要做额外的编译，其他代码用 babel 编译成 ES5，完整实践可以参考 <a href="https://github.com/DIYgod/polymer-demos" target="_blank" rel="noopener">polymer-demos</a></p><h2 id="Custom-elements"><a href="#Custom-elements" class="headerlink" title="Custom elements"></a>Custom elements</h2><p>下面尝试定义一个最简单的自定义元素，从 <code>PolymerElement</code> 继承一个类，然后传给 <code>window.customElements.define</code></p><p><strong>效果</strong></p><demo-custom-elements></demo-custom-elements><p><strong>HTML 代码</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">demo-custom-elements</span>&gt;</span><span class="tag">&lt;/<span class="name">demo-custom-elements</span>&gt;</span></span></pre></td></tr></table></figure><p><strong>JS 代码</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; PolymerElement &#125; <span class="keyword">from</span> <span class="string">'@polymer/polymer'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoCustomElements</span> <span class="keyword">extends</span> <span class="title">PolymerElement</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">constructor</span>() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">super</span>();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.textContent = <span class="string">`I'm a custom element.`</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.customElements.define(<span class="string">'demo-custom-elements'</span>, DemoCustomElements);</span></pre></td></tr></table></figure><h2 id="Shadow-dom"><a href="#Shadow-dom" class="headerlink" title="Shadow dom"></a>Shadow dom</h2><p>Shadow dom 是一个隐藏、独立的 DOM，它的 HTML CSS 和行为与常规的 DOM 树分离，这样不同的功能不会混在一起，内外的 CSS 也互不影响</p><p>Shadow dom 不是一个新事物，一直以来，浏览器用它来封装一个元素的内部结构。以 <code>&lt;video&gt;</code> 元素为例。你所能看到的只是一个 <code>&lt;video&gt;</code> 标签，实际上，在它的 Shadow dom 中包含一系列的按钮和控制器</p><p>下面例子中，Shadow dom 里的 p 标签定义了 CSS 属性 <code>color</code>，它不会泄露到外部</p><p><strong>效果</strong></p><style>html{--my-background:#eee}</style><demo-shadow-dom></demo-shadow-dom><p>I am outside of demo-shadow-dom. Because of encapsulation, demo-shadow-dom's styles won't leak to me.</p><p><strong>HTML 代码</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    html &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="css">        <span class="selector-tag">--my-background</span>: <span class="selector-id">#eee</span>;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">demo-shadow-dom</span>&gt;</span><span class="tag">&lt;/<span class="name">demo-shadow-dom</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>I am outside of demo-shadow-dom. Because of encapsulation, demo-shadow-dom's styles won't leak to me.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></pre></td></tr></table></figure><p><strong>JS 代码</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; PolymerElement, html &#125; <span class="keyword">from</span> <span class="string">'@polymer/polymer'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoShadowDom</span> <span class="keyword">extends</span> <span class="title">PolymerElement</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">static</span> <span class="keyword">get</span> template () &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> html`<span class="xml"></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="xml">                p &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="xml">                    color: #F5712C;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="xml">                    background-color: var(--my-background);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="xml">                &#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>I'm a DOM element.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is my shadow DOM!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="xml">        `</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.customElements.define(<span class="string">'demo-shadow-dom'</span>, DemoShadowDom);</span></pre></td></tr></table></figure><h2 id="HTML-templates"><a href="#HTML-templates" class="headerlink" title="HTML templates"></a>HTML templates</h2><p>使用 <code>&lt;template&gt;</code> 和 <code>&lt;slot&gt;</code> 组成 shadow DOM</p><p><strong>效果</strong></p><demo-html-template><p>I'm a custom slot.</p></demo-html-template><p><strong>HTML 代码</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">demo-html-template</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>I'm a custom slot.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">demo-html-template</span>&gt;</span></span></pre></td></tr></table></figure><p><strong>JS 代码</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; PolymerElement, html &#125; <span class="keyword">from</span> <span class="string">'@polymer/polymer'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'@polymer/polymer/lib/elements/dom-repeat.js'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; DemoShadowDom &#125; <span class="keyword">from</span> <span class="string">'./demo-shadow-dom'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoHTMLTemplate</span> <span class="keyword">extends</span> <span class="title">DemoShadowDom</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">constructor</span>() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">super</span>();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.employees = [</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                name: <span class="string">'Blog'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                link: <span class="string">'https://diygod.me'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                name: <span class="string">'GitHub'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                link: <span class="string">'https://github.com/DIYgod'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">static</span> <span class="keyword">get</span> template () &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> html`<span class="xml"></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">strong</span>&gt;</span>Template:<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">"dom-repeat"</span> <span class="attr">items</span>=<span class="string">"&#123;&#123;employees&#125;&#125;"</span>&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123;item.link&#125;&#125;"</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">strong</span>&gt;</span>Slot:<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">strong</span>&gt;</span>Super template:<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="xml">            </span><span class="subst">$&#123;<span class="keyword">super</span>.template&#125;</span><span class="xml"></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="xml">        `</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.customElements.define(<span class="string">'demo-html-template'</span>, DemoHTMLTemplate);</span></pre></td></tr></table></figure><h2 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h2><p>支持双向的数据绑定，你可以尝试编辑下面的输入框，或者直接在控制台修改属性 <code>document.querySelector(&#39;demo-data&#39;).owner1 = &#39;DIYgay&#39;</code>，属性改变会即时反映到 DOM 里</p><p><strong>效果</strong></p><demo-data owner1="DIYgod1"></demo-data><p><strong>HTML 代码</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">demo-data</span> <span class="attr">owner1</span>=<span class="string">"DIYgod1"</span>&gt;</span><span class="tag">&lt;/<span class="name">demo-data</span>&gt;</span></span></pre></td></tr></table></figure><p><strong>JS 代码</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; PolymerElement, html &#125; <span class="keyword">from</span> <span class="string">'@polymer/polymer'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'@polymer/iron-input'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoData</span> <span class="keyword">extends</span> <span class="title">PolymerElement</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">constructor</span>() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">super</span>();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.owner3 = <span class="string">'DIYgod3'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">static</span> <span class="keyword">get</span> properties () &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            owner1: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                type: <span class="built_in">String</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                value: <span class="string">'DIYgod'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            owner2: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                type: <span class="built_in">String</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                value: <span class="string">'DIYgod2'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">static</span> <span class="keyword">get</span> template () &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> html`<span class="xml"></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is <span class="tag">&lt;<span class="name">b</span>&gt;</span>[[owner1]]<span class="tag">&lt;/<span class="name">b</span>&gt;</span>'s element.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is <span class="tag">&lt;<span class="name">b</span>&gt;</span>[[owner2]]<span class="tag">&lt;/<span class="name">b</span>&gt;</span>'s element.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is <span class="tag">&lt;<span class="name">b</span>&gt;</span>&#123;&#123;owner3&#125;&#125;<span class="tag">&lt;/<span class="name">b</span>&gt;</span>'s element.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">iron-input</span> <span class="attr">bind-value</span>=<span class="string">"&#123;&#123;owner1&#125;&#125;"</span>&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">is</span>=<span class="string">"iron-input"</span> <span class="attr">placeholder</span>=<span class="string">"Your name here..."</span>&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">iron-input</span>&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="xml">        `</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.customElements.define(<span class="string">'demo-data'</span>, DemoData);</span></pre></td></tr></table></figure><h2 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h2><p>下面我们来给我们的自定义元素定义一个名为 <code>diygod</code> 的事件，绑定事件回调的方法跟正常事件一样</p><p><strong>效果</strong></p><demo-events></demo-events><script>document.querySelector("demo-events").addEventListener("diygod",function(e){alert(e.detail.msg)})</script><p><strong>HTML 代码</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">demo-events</span>&gt;</span><span class="tag">&lt;/<span class="name">demo-events</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="javascript">    <span class="built_in">document</span>.querySelector(<span class="string">'demo-events'</span>).addEventListener(<span class="string">'diygod'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        alert(e.detail.msg);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></pre></td></tr></table></figure><p><strong>JS 代码</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; PolymerElement, html &#125; <span class="keyword">from</span> <span class="string">'@polymer/polymer'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoEvents</span> <span class="keyword">extends</span> <span class="title">PolymerElement</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">static</span> <span class="keyword">get</span> template () &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> html`<span class="xml"></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">on-click</span>=<span class="string">"handleClick"</span>&gt;</span>Kick Me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="xml">        `</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    handleClick(e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.dispatchEvent(<span class="keyword">new</span> CustomEvent(<span class="string">'diygod'</span>, &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            detail: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                msg: <span class="string">'diygod event fired'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.customElements.define(<span class="string">'demo-events'</span>, DemoEvents);</span></pre></td></tr></table></figure><p><scirpt src="https://cdn.jsdelivr.net/gh/DIYgod/polymer-demos@0.0.1/dist/webcomponents-loader.js"></scirpt></p><script src="https://cdn.jsdelivr.net/gh/DIYgod/polymer-demos@0.0.1/dist/polymer-demos.js"></script>]]></content>
      <categories>
        <category>分享境</category>
      </categories>
  </entry>
  <entry>
    <title>早安晚安自动化</title>
    <url>/goodnight/</url>
    <content><![CDATA[<p>上一集：<a href="https://diygod.me/2920/">女朋友的微博情绪监控</a></p><p>发小一直很喜欢说早安晚安（当然是我说给她），但我经常会忘记，最近灵机一动，想出来这样一个科学高效方便快捷稳定地说早安晚安的办法：</p><p>把微信挂在服务器上，每天固定时间，自动执行发送早晚安文本消息的命令！</p><p>代码很简单，放在了 <a href="https://github.com/DIYgod/GoodNight" target="_blank" rel="noopener">GitHub</a> 上，具体效果是每天早上 9 点半发一个 “早安”，然后晚上 12 点再发一个 “晚安”。</p><p>太好了！以后再也不会忘记说早安晚安了！开心！</p><p><img src="/images/havefun.jpg" alt=""></p><p>脚本已经部署到服务器上了，明天早上给发小一个惊喜！</p><p>实际使用的效果明天会更新到下面（肯定没问题，稳得很！）：</p>]]></content>
      <categories>
        <category>创作集</category>
      </categories>
  </entry>
  <entry>
    <title>RSSHub - 使用 RSS 连接全世界</title>
    <url>/rsshub/</url>
    <content><![CDATA[<p><strong><a href="https://github.com/DIYgod/RSSHub" target="_blank" rel="noopener">项目地址</a></strong></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>RSSHub 是一个轻量、易于扩展的 RSS 生成器，可以给任何奇奇怪怪的内容生成 RSS 订阅源</p><p>当前支持列表：</p><ul><li>bilibili<ul><li>番剧</li><li>UP 主投稿</li><li>UP 主动态</li><li>UP 主收藏夹</li><li>分区视频</li></ul></li><li>微博<ul><li>博主</li></ul></li><li>网易云音乐<ul><li>歌单</li></ul></li><li>掘金<ul><li>分类</li></ul></li><li>自如<ul><li>房源</li></ul></li><li>快递</li></ul><a id="more"></a><h2 id="参与我们"><a href="#参与我们" class="headerlink" title="参与我们"></a>参与我们</h2><p>如果有任何想法或需求，可以在 <a href="https://github.com/DIYgod/RSSHub/issues" target="_blank" rel="noopener">issue</a> 中告诉我们，同时我们欢迎各种 pull requests</p><p>可以通过以下途径参与讨论：</p><ul><li><a href="https://t.me/rsshub" target="_blank" rel="noopener">Telegram 群</a></li></ul>]]></content>
      <categories>
        <category>创作集</category>
      </categories>
  </entry>
  <entry>
    <title>2018 暴走 yu 人节参展日记</title>
    <url>/2018-bao-zou-yu-ren-jie/</url>
    <content><![CDATA[<p>暴走 yu 人节是暴走漫画首届互动娱乐展会，作为暴走粉当然不能错过，很早就买了票。</p><p>总体感觉还是很棒的，嘉宾阵容强大，互动很多（还可以跟王尼玛一起上厕所），诚意满满，但不足也很明显，暴走 yu 人节主要内容集中在主舞台的节目表演，但上海新国际博览中心的现场座位远远不够，感觉还是更适合在类似 BML 的举办地梅赛德斯-奔驰文化中心这种地方举办。</p><a id="more"></a><p><img src="/images/bz1.jpg" alt=""></p><p>上午去得比较晚，逛了下厂商展台，没看节目，中午暴走家族在主舞台互动了一波，然后就是下午的节目。</p><h3 id="醋醋"><a href="#醋醋" class="headerlink" title="醋醋"></a>醋醋</h3><p>超级可爱，被圈粉了</p><div class="dplayer" id="dplayer-bz-1"></div><script>$(function(){var d=new DPlayer({container:document.getElementById("dplayer-bz-1"),preload:"metadata",video:{url:"https://cdn1.diygod.me/bz/1.mp4"},danmaku:{id:"diygodme-bz-1",api:"https://api.diygod.me/dplayer/"}});window.dplayers||(window.dplayers=[]),window.dplayers.push(d)})</script><p>&nbsp;</p><div class="dplayer" id="dplayer-bz-2"></div><script>$(function(){var d=new DPlayer({container:document.getElementById("dplayer-bz-2"),preload:"metadata",video:{url:"https://cdn1.diygod.me/bz/2.mp4"},danmaku:{id:"diygodme-bz-2",api:"https://api.diygod.me/dplayer/"}});window.dplayers||(window.dplayers=[]),window.dplayers.push(d)})</script><h3 id="金馆长"><a href="#金馆长" class="headerlink" title="金馆长"></a>金馆长</h3><p>哦哈哈哈哈哈哈</p><div class="dplayer" id="dplayer-bz-3"></div><script>$(function(){var d=new DPlayer({container:document.getElementById("dplayer-bz-3"),preload:"metadata",video:{url:"https://cdn1.diygod.me/bz/3.mp4"},danmaku:{id:"diygodme-bz-3",api:"https://api.diygod.me/dplayer/"}});window.dplayers||(window.dplayers=[]),window.dplayers.push(d)})</script><p>&nbsp;</p><div class="dplayer" id="dplayer-bz-4"></div><script>$(function(){var d=new DPlayer({container:document.getElementById("dplayer-bz-4"),preload:"metadata",video:{url:"https://cdn1.diygod.me/bz/4.mp4"},danmaku:{id:"diygodme-bz-4",api:"https://api.diygod.me/dplayer/"}});window.dplayers||(window.dplayers=[]),window.dplayers.push(d)})</script><h3 id="暴走家族"><a href="#暴走家族" class="headerlink" title="暴走家族"></a>暴走家族</h3><p>全阵容，激动</p><div class="dplayer" id="dplayer-bz-5"></div><script>$(function(){var d=new DPlayer({container:document.getElementById("dplayer-bz-5"),preload:"metadata",video:{url:"https://cdn1.diygod.me/bz/5.mp4"},danmaku:{id:"diygodme-bz-5",api:"https://api.diygod.me/dplayer/"}});window.dplayers||(window.dplayers=[]),window.dplayers.push(d)})</script><h3 id="咬人猫-赤九玖-有咩酱"><a href="#咬人猫-赤九玖-有咩酱" class="headerlink" title="咬人猫 赤九玖 有咩酱"></a>咬人猫 赤九玖 有咩酱</h3><p>还说什么，舔爆就行了</p><div class="dplayer" id="dplayer-bz-6"></div><script>$(function(){var d=new DPlayer({container:document.getElementById("dplayer-bz-6"),preload:"metadata",video:{url:"https://cdn1.diygod.me/bz/6.mp4"},danmaku:{id:"diygodme-bz-6",api:"https://api.diygod.me/dplayer/"}});window.dplayers||(window.dplayers=[]),window.dplayers.push(d)})</script><p>&nbsp;</p><div class="dplayer" id="dplayer-bz-7"></div><script>$(function(){var d=new DPlayer({container:document.getElementById("dplayer-bz-7"),preload:"metadata",video:{url:"https://cdn1.diygod.me/bz/7.mp4"},danmaku:{id:"diygodme-bz-7",api:"https://api.diygod.me/dplayer/"}});window.dplayers||(window.dplayers=[]),window.dplayers.push(d)})</script><p>&nbsp;</p><div class="dplayer" id="dplayer-bz-8"></div><script>$(function(){var d=new DPlayer({container:document.getElementById("dplayer-bz-8"),preload:"metadata",video:{url:"https://cdn1.diygod.me/bz/8.mp4"},danmaku:{id:"diygodme-bz-8",api:"https://api.diygod.me/dplayer/"}});window.dplayers||(window.dplayers=[]),window.dplayers.push(d)})</script><h3 id="山下智博"><a href="#山下智博" class="headerlink" title="山下智博"></a>山下智博</h3><p>签售会，签名 合照 get√</p><p><img src="/images/bz2.jpg" alt=""></p><p>最后离场的时候还在厕所里遇到了王尼玛，上厕所也带着头套，身边有个工作人员，很激动，呆住了好几秒…发现王尼玛比我矮好多，应该在170以下😂</p>]]></content>
      <categories>
        <category>日记本</category>
      </categories>
  </entry>
  <entry>
    <title>关于开源项目赞助这件事</title>
    <url>/open-source-project-donation/</url>
    <content><![CDATA[<div class="aplayer" id="aplayer-open-source"></div><script>$(function(){$.ajax({url:"https://api.i-meto.com/meting/api?server=netease&type=song&id=536622447",success:function(e){var a=new APlayer({element:document.getElementById("aplayer-open-source"),showlrc:3,theme:"#ad7a86",mode:"random",music:JSON.parse(e)[0]});window.aplayers||(window.aplayers=[]),window.aplayers.push(a)}})})</script><p>相信没人做开源项目是为了赚钱，因为它还不如去天桥贴膜赚得快。</p><p>但即使没有这种想法，维护一个开源项目也会遇到一些很头疼的现实问题，比如服务器和 CDN 的开销。以 DPlayer 为例，弹幕接口服务器每年需要花费 2000 多块，文档里的视频 CDN 费用每年也需要花费 1500 多块，并且随着用户增多这些花费只增不减。</p><p>虽然一直在 README 的显著位置挂着赞助方式，但也没抱太大希望，毕竟 DPlayer 用户几乎都是国人，能遇到一个可以描述清楚自己问题的用户就已经很不容易了，结果也不出我所料，一年里零星收到的赞助只不过是杯水车薪。说实话，让我自己承担这些花费我是不乐意的，再加上用户大多是盗版站和小黄站，这曾一度让我产生了弃坑的想法。<a id="more"></a></p><p>后面的事情很多朋友都知道了，<a href="https://www.upyun.com/" target="_blank" rel="noopener">又拍云</a>和<a href="https://pear.hk/" target="_blank" rel="noopener">梨享计算</a>先后赞助了 DPlayer，又拍云赞助了 DPlayer 的全部 CDN 费用，梨享计算则每月提供一笔数量可观的金钱赞助。</p><p>一般来说，如果一个团体或企业将开源项目用在商业产品中，那么赞助开源项目有直接的商业上的益处：可以让产品所依赖的框架保持健康并得到积极的维护。不同的是又拍云并没有用到 DPlayer，短期内也不会有任何直接的商业回报，可能更多的是一种情怀，又拍云作为一家商业公司，其不求回报的慷慨赞助是我尤其感动的。</p><p>这篇文章当然不是为了号召大家进行赞助或去天桥贴膜，目前两家公司的赞助已经足够人力以外的日常开销，除了赞助，贡献代码、提一个描述清楚的 bug 或意见、一句鼓励、或者仅仅是使用我的开源项目都同样可以让我很开心，这些都是让我继续花时间做开源的动力。</p><p>以下硬广：</p><blockquote><p><a href="https://pear.hk/" target="_blank" rel="noopener">梨享计算</a>是一家雾计算技术研发商，专注于为用户提供 IaaS 架构、PaaS 平台、SaaS 软件服务。Pear Fog 不仅是跨越网络中心到边缘的资源池，也是新型的 P2P 系统。其中 Fog CDN 在以透明且 Web 友好的方式帮视频厂商降低内容分发成本、提高质量。</p></blockquote><blockquote><p><a href="https://www.upyun.com/" target="_blank" rel="noopener">又拍云</a>是国内知名企业级云服务商，致力于为客户提供一站式的在线业务加速服务，为客户提供对象存储、HTTPS／SSL 证书、多媒体处理（WebP 自适应、H.265 自适应等）、影像识别、文字识别、短视频 SDK、直播 SDK、连麦 SDK 等服务。又拍云拥有 6 个数据处理中心、300 多个国内CDN节点、15 个海外CDN节点、5000 台服务器、5TB 保有带宽，日均请求超过 1000 亿次。</p></blockquote>]]></content>
      <categories>
        <category>闲言语</category>
      </categories>
  </entry>
  <entry>
    <title>DARLING in the FRANXX 博客样式</title>
    <url>/darling-in-the-franxx-style/</url>
    <content><![CDATA[<div class="aplayer" id="aplayer-darling"></div><script>$(function(){$.ajax({url:"https://api.i-meto.com/meting/api?server=netease&type=song&id=531051597",success:function(e){var a=new APlayer({element:document.getElementById("aplayer-darling"),showlrc:3,theme:"#ad7a86",mode:"random",music:JSON.parse(e)[0]});window.aplayers||(window.aplayers=[]),window.aplayers.push(a)}})})</script><p>&nbsp;<br><strong>点击<a href="javascript:;" id="darling-trigger">这里</a>切换样式</strong></p><script>$("#darling-trigger").click(function(){var a=$("body");a.hasClass("theme-darling")?a.removeClass("theme-darling"):a.addClass("theme-darling")})</script><p>救命啊，我被撩到了！<br>没错，我就是她的 Darling！<br>天哪，世界上怎么会有那么可爱的女孩子！<br>我现在只想看 DITF 第五集别的什么都不想干.jpg<br><img src="https://diygod.me/images/header-darling.jpg" alt=""></p>]]></content>
      <categories>
        <category>分享境</category>
      </categories>
  </entry>
  <entry>
    <title>Web Workers 初体验</title>
    <url>/web-workers/</url>
    <content><![CDATA[<p><a href="https://www.bilibili.com/video/av18682336/" target="_blank" rel="noopener">这个视频</a>有 15+MB 的 BAS 弹幕脚本需要解析，这会导致页面卡死 7 秒左右的时间，期间 UI 被冻结，体验很糟糕，如果使用 Web Workers 进行优化，把解析放入 Web Workers 执行，就可以避免 UI 线程阻塞造成的页面冻结。</p><a id="more"></a><h2 id="单线程"><a href="#单线程" class="headerlink" title="单线程"></a>单线程</h2><p>使用 parse 来模拟解析函数</p><p><strong>index.js</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parse</span> (<span class="params">time</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">const</span> start = <span class="keyword">new</span> <span class="built_in">Date</span>();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span>(<span class="keyword">new</span> <span class="built_in">Date</span>() - start &lt; time) &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="string">'DIYgod'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(parse(<span class="number">1000</span>));</span></pre></td></tr></table></figure><p>此时页面会卡死 1s，然后输出一个 ‘DIYgod’。</p><h2 id="使用-Web-Workers"><a href="#使用-Web-Workers" class="headerlink" title="使用 Web Workers"></a>使用 Web Workers</h2><p><strong>index.js</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> wk = <span class="keyword">new</span> Worker(<span class="string">'worker.js'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">wk.postMessage(<span class="number">1000</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">wk.addEventListener(<span class="string">'message'</span>, (e) =&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(e.data);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure><p><strong>worker.js</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parse</span> (<span class="params">time</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">const</span> start = <span class="keyword">new</span> <span class="built_in">Date</span>();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span>(<span class="keyword">new</span> <span class="built_in">Date</span>() - start &lt; time) &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="string">'DIYgod'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    postMessage(parse(e.data));</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>这是 Web Workers 的一个最基础用法，index.js 把 1000 传给 worker.js，worker.js 在后台解析 1000 ms，再把结果 ‘DIYgod’ 传回 index.js，这样解析就不会再占用 js 主线程，避免了页面卡死。</p><h2 id="内嵌-Worker"><a href="#内嵌-Worker" class="headerlink" title="内嵌 Worker"></a>内嵌 Worker</h2><p>上一步我们加载了两个 js 文件，index.js 和 worker.js，在 HTML 里引用 index.js，然后 index.js 会加载 worker.js，那么不想创建单独的 Worker 文件怎么办呢？</p><p><strong>index.js</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> workerBlob = <span class="keyword">new</span> Blob([<span class="string">`function parse (time) &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    const start = new Date();</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    while(new Date() - start &lt; time) &#123;&#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    return 'DIYgod';</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">&#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string"></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">onmessage = function (e) &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    postMessage(parse(e.data));</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">&#125;`</span>], &#123; <span class="attr">type</span>: <span class="string">'application/javascript'</span> &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> workerURL = URL.createObjectURL(workerBlob);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> wk = <span class="keyword">new</span> Worker(workerURL);</span></pre></td></tr><tr><td class="code"><pre><span class="line">wk.postMessage(<span class="number">1000</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">wk.addEventListener(<span class="string">'message'</span>, (e) =&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(e.data);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure><p>URL.createObjectURL(blob) 会创建一个 DOMString，它包含一个表示 blob 的 URL。</p><p>打开控制台的 Network 标签页，你会看到浏览器加载了一个形如 <code>blob:http://example.com/16215a1e-21d4-450c-b441-070e1981b69d</code> 的奇怪链接的 js 文件，这个 js 文件的内容正是我们传给 workerBlob 的字符串内容。</p><p>这个 URL 是唯一的，且它的生命周期和创建它的窗口中的 document 绑定，只要页面存在，该网址就会一直有效。</p><h2 id="使用-webpack-worker-loader"><a href="#使用-webpack-worker-loader" class="headerlink" title="使用 webpack worker-loader"></a>使用 webpack worker-loader</h2><p>上一步中我们把 js 代码放在了字符串里，它不能拆分模块，也不利于后期维护，如果项目正在使用 webpack，安装 <a href="https://github.com/webpack-contrib/worker-loader" target="_blank" rel="noopener">worker-loader</a> 可以解决这个问题。</p><p><strong>index.js</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> WK <span class="keyword">from</span> <span class="string">'worker-loader?inline=true&amp;fallback=false!./worker.js'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> wk = <span class="keyword">new</span> WK();</span></pre></td></tr><tr><td class="code"><pre><span class="line">wk.postMessage(<span class="number">1000</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">wk.addEventListener(<span class="string">'message'</span>, (e) =&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(e.data);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure><p><strong>worker.js</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Parse <span class="keyword">from</span> <span class="string">'./parse.js'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">self.addEventListener(<span class="string">'message'</span>, (e) =&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    self.postMessage(Parse(e.data));</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure><p><strong>parse.js</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parse</span> (<span class="params">time</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">const</span> start = <span class="keyword">new</span> <span class="built_in">Date</span>();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span>(<span class="keyword">new</span> <span class="built_in">Date</span>() - start &lt; time) &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="string">'DIYgod'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Parse;</span></pre></td></tr></table></figure><p>只需要使用 worker-loader 引用 worker.js 模块，剩下的 worker-loader 会帮我们自动处理，最后编译的结果类似我们上一步的代码。</p><p>对比不使用 Web Workers 时：</p><p><strong>index.js</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Parse <span class="keyword">from</span> <span class="string">'./parse.js'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(Parse(<span class="number">1000</span>));</span></pre></td></tr></table></figure><p><strong>parse.js（不变）</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parse</span> (<span class="params">time</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">const</span> start = <span class="keyword">new</span> <span class="built_in">Date</span>();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span>(<span class="keyword">new</span> <span class="built_in">Date</span>() - start &lt; time) &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="string">'DIYgod'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Parse;</span></pre></td></tr></table></figure><p>这样不用修改原有的解析模块，非侵入式，只需要加个 worker.js 中转模块，再改下调用方法即可，维护起来也很方便。</p><h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><p>如果我把一个计算放入 4 个 Worker，那么这个计算会快 4 倍？</p><p>不，它不仅不会快 4 倍，而且会变得更慢。</p><p>Web Workers 不是为了缩短计算时间，而是为了避免 UI 线程冻结。创建线程、线程调度、传输数据等行为会导致计算变得比单线程稍微更慢一点。</p><p>我记录了开头那个视频在不同 Worker 数量下解析 100 条弹幕的时间，7 次记录取平均值：</p><table><thead><tr><th>Worker 数量</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>10</th></tr></thead><tbody><tr><td>平均时间(ms)</td><td>6085</td><td>8216</td><td>6310</td><td>6388</td><td>6483</td><td>6317</td><td>6475</td><td>7233</td></tr></tbody></table><p>不使用 Worker 的解析速度最快，1 个 Worker 的速度比其他明显更慢，2 3 4 5 6 个 Worker 速度没有明显差异，但 Worker 数量一直增加速度又会逐渐变慢。</p><p>另外又测试了弹幕比较少的视频，结果是 1 2 3 4 5 个 Worker 的速度都差不多。</p><p>最后不靠谱地决定使用 2 个 Worker 进行解析。</p><p>优化结果妙不可言，不需要等待解析完成才能进行其他操作，也可以一边播放视频一边解析，区别只是播放到没解析好的弹幕不会显示，解析完成才会显示。</p>]]></content>
      <categories>
        <category>创作集</category>
      </categories>
  </entry>
  <entry>
    <title>NetEaseCloudMusic2RSS — 使用RSS订阅她喜欢的网易云音乐</title>
    <url>/neteasecloudmusic2rss/</url>
    <content><![CDATA[<p>音乐，人类生活中永恒的主题。音乐可以很大程度上体现一个人的喜好、品味，更是最有力量的情感传输器。</p><p>现在快使用RSS订阅我喜欢的网易云音乐吧：<a href="https://api.prprpr.me/necm2rss/playlist/35798529" target="_blank" rel="noopener">https://api.prprpr.me/necm2rss/playlist/35798529</a>，跟网红 DIYgod 听一样的音乐！</p><p>项目名叫 NetEaseCloudMusic2RSS，开源在 <a href="https://github.com/DIYgod/NetEaseCloudMusic2RSS" target="_blank" rel="noopener">GitHub</a>。</p><p>另外可以使用相关项目 <a href="https://github.com/DIYgod/Weibo2RSS" target="_blank" rel="noopener">Weibo2RSS</a> 订阅喜欢的微博博主，<a href="https://github.com/DIYgod/bilibili2RSS" target="_blank" rel="noopener">bilibili2RSS</a> 订阅B站UP主、收藏夹、投币视频、番剧、分区等。</p><p>RSS 干杯！</p>]]></content>
      <categories>
        <category>创作集</category>
      </categories>
  </entry>
  <entry>
    <title>BAS 高级弹幕</title>
    <url>/bas/</url>
    <content><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>如果你好奇 B 站的工作有不有趣，或者我来 B 站之后都在做什么，那么这篇文章或许可以解答你的部分疑问。</p><p>来 B 站后，除了负责 HTML5 播放器的一些模块、重构和日常维护以外，BAS 高级弹幕算是我半年来负责开发的最大一个项目了。</p><p>本文整理自今天在公司的超极电磁波分享（据说我还是有史以来年龄最小的讲师(=・ω・=)，也算是对这个项目的一个阶段性总结。</p><a id="more"></a><h2 id="什么是-BAS-弹幕"><a href="#什么是-BAS-弹幕" class="headerlink" title="什么是 BAS 弹幕"></a>什么是 BAS 弹幕</h2><p>BAS，全称 Bilibili Animation Script，是新一代 bilibili 高级弹幕脚本语言，是一种用来描述高级弹幕样式、交互和动画的文本。</p><p>BAS 弹幕是用 BAS 描述的高级弹幕，由元素和动画组成，元素分为文本对象、交互按钮、path 对象，动画分为简单动画、串联动画、并联动画。</p><p>BAS 弹幕主要面向字幕君等高端玩家，可以用于字幕、特效、交互应用、游戏、纯弹幕作品等场景。</p><p>目前 Web 端已经上线，移动端也基本开发完成，期望在明年的活动或拜年祭中能够用到。</p><p>我们做了几个视频来直观展示 BAS 弹幕：</p><p>第一个是毛酱大佬做的弹幕 PV：<a href="https://www.bilibili.com/video/av257649/" target="_blank" rel="noopener">https://www.bilibili.com/video/av257649/</a></p><p>第二个是弹幕实现的烂苹果：<a href="https://www.bilibili.com/video/av18682336/" target="_blank" rel="noopener">https://www.bilibili.com/video/av18682336/</a></p><p>第三个是交互按钮的演示：<a href="https://www.bilibili.com/video/av16558829/index_3.html#page=3" target="_blank" rel="noopener">https://www.bilibili.com/video/av16558829/index_3.html#page=3</a> ，另外像哔哩哔哩排行榜周刊这种也是很好的应用场景</p><p>字幕应用方面可以很容易实现一个字幕文件转 BAS 之类的工具，今后会继续做这样的事情。</p><h3 id="几种高级弹幕比较"><a href="#几种高级弹幕比较" class="headerlink" title="几种高级弹幕比较"></a>几种高级弹幕比较</h3><h4 id="mode7"><a href="#mode7" class="headerlink" title="mode7"></a>mode7</h4><p>弹幕通过界面设置，不需要编写代码，使用简单但功能比较局限。</p><p><img src="/images/bas1.jpg" alt=""></p><h4 id="mode8"><a href="#mode8" class="headerlink" title="mode8"></a>mode8</h4><p>即代码弹幕，功能非常强大但需要编写代码，使用复杂、安全性较差，而且只支持 Flash 平台。</p><p><img src="/images/bas2.jpg" alt=""></p><h4 id="mode9"><a href="#mode9" class="headerlink" title="mode9"></a>mode9</h4><p>即 BAS 弹幕，是 mode 7 和 mode 8 的折中方案。</p><p>跟 mode 7 相比，mode 9 需要编写脚本，使用稍复杂，但支持交互、图形和更复杂的动画，功能要强大得多。</p><p>跟 mode 8 相比，mode 9 简化了语法，改用声明式，使用更简单；更安全，播放器解析实现，不合法脚本不会放行，程序可控，而不是直接操作弹幕；可以跨平台。</p><p><img src="/images/bas3.jpg" alt=""></p><h2 id="使用-BAS-弹幕"><a href="#使用-BAS-弹幕" class="headerlink" title="使用 BAS 弹幕"></a>使用 BAS 弹幕</h2><h3 id="发送权限"><a href="#发送权限" class="headerlink" title="发送权限"></a>发送权限</h3><p>首先权限上对 BAS 弹幕的发送权限有着严格的限制，设计上一般用户需要先用硬币购买，然后等待 UP 主确认之后才可以使用，字幕君等有特殊权限的用户才可以直接使用，但目前只开放给字幕君使用，字幕君使用并完善之后再考虑扩大使用场景。</p><table><thead><tr><th></th><th>硬币购买</th><th>UP 主确认</th></tr></thead><tbody><tr><td>一般会员</td><td>√</td><td>√</td></tr><tr><td>UP 主</td><td>√</td><td>×</td></tr><tr><td>VIP</td><td>×</td><td>√</td></tr><tr><td>字幕君/管理员</td><td>×</td><td>×</td></tr></tbody></table><h3 id="发送入口"><a href="#发送入口" class="headerlink" title="发送入口"></a>发送入口</h3><ol><li><img src="/images/bas4.jpg" alt=""></li><li><img src="/images/bas5.jpg" alt=""></li></ol><p>注意没有发送权限时入口是隐藏的，这时候可以在<a href="https://bilibili.github.io/bas/#/playground" target="_blank" rel="noopener">试验室</a>中进行尝试。</p><h3 id="编写脚本"><a href="#编写脚本" class="headerlink" title="编写脚本"></a>编写脚本</h3><p>下面我们来尝试编写一些简单的脚本，BAS 脚本非常简单，它是一种声明式描述性的脚本，语法易用，保证了对象块和操作块的独立性。</p><p>尝试 BAS 弹幕最简单的方法是使用<a href="https://bilibili.github.io/bas" target="_blank" rel="noopener">文档</a>上的例子和试验室，你可以在浏览器新标签页中打开它，跟着例子尝试一些基础用法。</p><p>以文本对象为例，一个简单的带渐隐动画的文本对象是这样的：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def text demo &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    content &#x3D; &quot;BAS&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">set demo &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    alpha &#x3D; 0</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125; 5s</span></pre></td></tr></table></figure><p>这样我们就成功创建了一条渐隐的 BAS 弹幕，看起来很简单，但是 js 在背后做了大量工作，js 会先把 BAS 脚本解析成 js 可识别的对象，应用上默认属性，再把它渲染到播放器里，同时开始动画，这时候就可以在播放器左上角看到一个渐隐的白色文本。</p><h4 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h4><p>定位也非常简单，BAS 弹幕的定位由弹幕锚点（anchorX anchorY）和舞台位置（x y）共同决定。锚点是弹幕的中心点，(0, 0)为弹幕的左上角，(1, 1)为弹幕的右下角。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def text tl &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    content &#x3D; &quot;左上&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    x &#x3D; 0</span></pre></td></tr><tr><td class="code"><pre><span class="line">    y &#x3D; 0</span></pre></td></tr><tr><td class="code"><pre><span class="line">    anchorX &#x3D; 0</span></pre></td></tr><tr><td class="code"><pre><span class="line">    anchorY &#x3D; 0</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">def text tr &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    content &#x3D; &quot;右上&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    x &#x3D; 100%</span></pre></td></tr><tr><td class="code"><pre><span class="line">    y &#x3D; 0</span></pre></td></tr><tr><td class="code"><pre><span class="line">    anchorX &#x3D; 1</span></pre></td></tr><tr><td class="code"><pre><span class="line">    anchorY &#x3D; 0</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">def text bl &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    content &#x3D; &quot;左下&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    x &#x3D; 0</span></pre></td></tr><tr><td class="code"><pre><span class="line">    y &#x3D; 100%</span></pre></td></tr><tr><td class="code"><pre><span class="line">    anchorX &#x3D; 0</span></pre></td></tr><tr><td class="code"><pre><span class="line">    anchorY &#x3D; 1</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">def text br &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    content &#x3D; &quot;右下&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    x &#x3D; 100%</span></pre></td></tr><tr><td class="code"><pre><span class="line">    y &#x3D; 100%</span></pre></td></tr><tr><td class="code"><pre><span class="line">    anchorX &#x3D; 1</span></pre></td></tr><tr><td class="code"><pre><span class="line">    anchorY &#x3D; 1</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">def text c &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    content &#x3D; &quot;中心&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    x &#x3D; 50%</span></pre></td></tr><tr><td class="code"><pre><span class="line">    y &#x3D; 50%</span></pre></td></tr><tr><td class="code"><pre><span class="line">    anchorX &#x3D; 0.5</span></pre></td></tr><tr><td class="code"><pre><span class="line">    anchorY &#x3D; 0.5</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h4 id="弹幕舞台"><a href="#弹幕舞台" class="headerlink" title="弹幕舞台"></a>弹幕舞台</h4><p>弹幕舞台是弹幕的绘制范围，弹幕舞台默认为视频的真实区域，此外文本对象可以通过 parent 属性把其他文本对象指定为父级元素，以父级元素作为舞台进行绘制，父级元素会影响子级元素的定位、缩放等。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def text a &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    content &#x3D; &quot;□&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    fontSize &#x3D; 40%</span></pre></td></tr><tr><td class="code"><pre><span class="line">    x &#x3D; 0</span></pre></td></tr><tr><td class="code"><pre><span class="line">    y &#x3D; 0</span></pre></td></tr><tr><td class="code"><pre><span class="line">    color &#x3D; 0xffff00</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">def text b &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    parent &#x3D; &quot;a&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    content &#x3D; &quot;□&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    fontSize &#x3D; 20%</span></pre></td></tr><tr><td class="code"><pre><span class="line">    x &#x3D; 0</span></pre></td></tr><tr><td class="code"><pre><span class="line">    y &#x3D; 0</span></pre></td></tr><tr><td class="code"><pre><span class="line">    color &#x3D; 0xff00ff</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">set a &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    x &#x3D; 50%</span></pre></td></tr><tr><td class="code"><pre><span class="line">    y &#x3D; 0</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125; 2s</span></pre></td></tr><tr><td class="code"><pre><span class="line">then set a &#123;&#125; 3s</span></pre></td></tr><tr><td class="code"><pre><span class="line">set b &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    y &#x3D; 50%</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125; 3s</span></pre></td></tr><tr><td class="code"><pre><span class="line">then set b &#123;&#125; 3s</span></pre></td></tr></table></figure><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><p>生命周期是 BAS 的另一个重要概念，生命周期是弹幕存活的时间，没有指定 duration 属性时，元素生命周期为动画总时间，没有动画时默认为4s。生命周期结束后元素就会在舞台中被清除。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def text a &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    content &#x3D; &quot;BAS&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def text a &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    content &#x3D; &quot;BAS&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    duration &#x3D; 10s</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def text a &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    content &#x3D; &quot;BAS&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">set a &#123;&#125; 10s</span></pre></td></tr></table></figure><h4 id="自适应"><a href="#自适应" class="headerlink" title="自适应"></a>自适应</h4><p>位置和字号为百分比值时可以根据舞台大小自适应，可以实现各个平台、不同播放器大小时弹幕的一致性效果，使弹幕在不同情况下相对于视频的位置和大小是固定的，位置坐标为当前舞台宽高 * 百分比值 px，字号为当前舞台宽度 * 百分比值 px。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def text c &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    content &#x3D; &quot;BAS&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    x &#x3D; 50%</span></pre></td></tr><tr><td class="code"><pre><span class="line">    y &#x3D; 50%</span></pre></td></tr><tr><td class="code"><pre><span class="line">    anchorX &#x3D; 0.5</span></pre></td></tr><tr><td class="code"><pre><span class="line">    anchorY &#x3D; 0.5</span></pre></td></tr><tr><td class="code"><pre><span class="line">    fontSize &#x3D; 5%</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>这时候改变播放器大小，弹幕大小也会跟随播放器改变，结果是它相对于视频的位置和大小是固定的。</p><h4 id="交互"><a href="#交互" class="headerlink" title="交互"></a>交互</h4><p>目前只有交互按钮支持一些简单的点击效果，转跳到视频某个时间点、新窗口打开其他视频等。</p><p>seek 按钮：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def button c &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    text &#x3D; &quot;跳转到30分钟&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    x &#x3D; 35%</span></pre></td></tr><tr><td class="code"><pre><span class="line">    y &#x3D; 45%</span></pre></td></tr><tr><td class="code"><pre><span class="line">    fontSize &#x3D; 5%</span></pre></td></tr><tr><td class="code"><pre><span class="line">    textColor &#x3D; 0xffffff</span></pre></td></tr><tr><td class="code"><pre><span class="line">    fillColor &#x3D; 0x80D8FF</span></pre></td></tr><tr><td class="code"><pre><span class="line">    target &#x3D; seek &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        time &#x3D; 30m</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>av 跳转按钮：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def button c &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    text &#x3D; &quot;av1714157&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    x &#x3D; 35%</span></pre></td></tr><tr><td class="code"><pre><span class="line">    y &#x3D; 45%</span></pre></td></tr><tr><td class="code"><pre><span class="line">    fontSize &#x3D; 5%</span></pre></td></tr><tr><td class="code"><pre><span class="line">    textColor &#x3D; 0xffffff</span></pre></td></tr><tr><td class="code"><pre><span class="line">    fillColor &#x3D; 0x80D8FF</span></pre></td></tr><tr><td class="code"><pre><span class="line">    duration &#x3D; 2s</span></pre></td></tr><tr><td class="code"><pre><span class="line">    target &#x3D; av &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        av &#x3D; 1714157</span></pre></td></tr><tr><td class="code"><pre><span class="line">        page &#x3D; 1</span></pre></td></tr><tr><td class="code"><pre><span class="line">        time &#x3D; 20.5s500ms</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>bangumi 跳转按钮：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def button c &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    text &#x3D; &quot;第22话 春风&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    x &#x3D; 35%</span></pre></td></tr><tr><td class="code"><pre><span class="line">    y &#x3D; 45%</span></pre></td></tr><tr><td class="code"><pre><span class="line">    fontSize &#x3D; 5%</span></pre></td></tr><tr><td class="code"><pre><span class="line">    textColor &#x3D; 0xffffff</span></pre></td></tr><tr><td class="code"><pre><span class="line">    fillColor &#x3D; 0x80D8FF</span></pre></td></tr><tr><td class="code"><pre><span class="line">    duration &#x3D; 2s</span></pre></td></tr><tr><td class="code"><pre><span class="line">    target &#x3D; bangumi &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        seasonId &#x3D; 1699</span></pre></td></tr><tr><td class="code"><pre><span class="line">        episodeId &#x3D; 80041</span></pre></td></tr><tr><td class="code"><pre><span class="line">        time &#x3D; 1m30s</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h4 id="图形"><a href="#图形" class="headerlink" title="图形"></a>图形</h4><p>可以使用 path 对象绘制 svg 图形，d 属性对应 svg 的路径。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def path p &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    d &#x3D; &quot;M30.828,30.422 18.997,16.260 Z&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    viewBox&#x3D;&quot;0 0 32 34&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    x &#x3D; 45%</span></pre></td></tr><tr><td class="code"><pre><span class="line">    y &#x3D; 45%</span></pre></td></tr><tr><td class="code"><pre><span class="line">    scale &#x3D; 3</span></pre></td></tr><tr><td class="code"><pre><span class="line">    borderWidth &#x3D; 1</span></pre></td></tr><tr><td class="code"><pre><span class="line">    borderColor &#x3D; 0xffffff</span></pre></td></tr><tr><td class="code"><pre><span class="line">    borderAlpha &#x3D; 0.8</span></pre></td></tr><tr><td class="code"><pre><span class="line">    fillColor &#x3D; 0x00a1d6</span></pre></td></tr><tr><td class="code"><pre><span class="line">    fillAlpha &#x3D; 0.8</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h4 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h4><p>动画分为简单动画、串联动画、并联动画。</p><p>弹幕的属性有可渐变、不可渐变、不可变之分，只有可渐变属性才有正常的动画效果，对非渐变属性设置新值会立即生效，对不可变的属性设值将被忽略。原则上某一属性在一个 set 语句中最多只能出现一次，在实现上，如果多次出现，以最后一次为准。</p><p>串联动画以先后顺序运行。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def text a &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  content &#x3D; &quot;BAS&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">set a &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    color &#x3D; 0x000000</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125; 1s</span></pre></td></tr><tr><td class="code"><pre><span class="line">then set a &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    alpha &#x3D; 0</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125; 1s</span></pre></td></tr></table></figure><p>并联动画同时进行，并联相同属性时，以最后一次为准，之前冲突的动画会被忽略，由于技术限制，x y rotateX rotateY rotateZ scale 视为相同属性。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def text a &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  content &#x3D; &quot;BAS&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">set a &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    color &#x3D; 0x000000</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125; 1s</span></pre></td></tr><tr><td class="code"><pre><span class="line">set a &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    alpha &#x3D; 0</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125; 1s</span></pre></td></tr></table></figure><h2 id="BAS-弹幕的前端实现"><a href="#BAS-弹幕的前端实现" class="headerlink" title="BAS 弹幕的前端实现"></a>BAS 弹幕的前端实现</h2><p>从 BAS 脚本到渲染在浏览器的 DOM 元素主要有以下步骤：</p><ol><li>将 BAS 脚本解析成 js 对象（<a href="https://github.com/aristotle9/as3cc" target="_blank" rel="noopener">https://github.com/aristotle9/as3cc</a>）</li><li>应用默认值、计算百分比值</li><li>监控生命周期</li><li>解决属性冲突</li><li>绘制元素、应用样式和动画</li><li>绑定交互事件</li></ol><h3 id="定位-1"><a href="#定位-1" class="headerlink" title="定位"></a>定位</h3><p>定位由 BAS 脚本的锚点（anchorX anchorY）和位置（x y）共同决定，实现上使用两个嵌套的 DOM 元素，外部元素定位舞台位置，内部元素定位弹幕锚点，比如一个居中的文本对象：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def text c &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    content &#x3D; &quot;BAS&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    x &#x3D; 50%</span></pre></td></tr><tr><td class="code"><pre><span class="line">    y &#x3D; 50%</span></pre></td></tr><tr><td class="code"><pre><span class="line">    anchorX &#x3D; 0.5</span></pre></td></tr><tr><td class="code"><pre><span class="line">    anchorY &#x3D; 0.5</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>渲染出的 DOM 结构大概是这样：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"transform:translate((舞台宽度*50%)px, (舞台高度*50%)px);"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"transform:translate(-50%,-50%);"</span>&gt;</span>BAS弹幕<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr></table></figure><h3 id="动画-1"><a href="#动画-1" class="headerlink" title="动画"></a>动画</h3><p>动画上考虑到浏览器兼容性和易用性，CSS3 的 animation 是最佳的选择，其中涉及属性有：</p><table><thead><tr><th align="left">属性</th><th>描述</th></tr></thead><tbody><tr><td align="left">@keyframes</td><td>定义动画</td></tr><tr><td align="left">animation-name</td><td>对应 @keyframes 动画的名称</td></tr><tr><td align="left">animation-duration</td><td>动画完成一个周期的时间</td></tr><tr><td align="left">animation-play-state</td><td>动画运行或者暂停</td></tr><tr><td align="left">animation-timing-function</td><td>动画的速度曲线</td></tr></tbody></table><h4 id="简单动画"><a href="#简单动画" class="headerlink" title="简单动画"></a>简单动画</h4><p>沿用上面的例子：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def text demo &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    content &#x3D; &quot;BAS&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">set demo &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    alpha &#x3D; 0</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125; 5s</span></pre></td></tr></table></figure><p>这样一条 BAS 脚本渲染出的 DOM 结构大概是这样：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="css">@<span class="keyword">keyframes</span> a1 &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="css">    100% &#123; <span class="attribute">opacity</span>:<span class="number">0</span>; &#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"animation-name:a1;animation-duration:5s;opacity:1;"</span>&gt;</span>BAS<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr></table></figure><p>keyframes 定义动画关键帧，动画结束时透明度为零；animation-duration 对应动画的时间 5s。</p><h4 id="并联动画"><a href="#并联动画" class="headerlink" title="并联动画"></a>并联动画</h4><p>定义多个keyframes实现多个动画同时运行。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def text a &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    content &#x3D; &quot;BAS&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">set a &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    color &#x3D; 0x000000</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125; 1s</span></pre></td></tr><tr><td class="code"><pre><span class="line">set a &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    alpha &#x3D; 0</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125; 1s</span></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="css">@<span class="keyword">keyframes</span> a1 &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="css">    100% &#123; <span class="attribute">color</span>:<span class="number">#000000</span>; &#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="css">@<span class="keyword">keyframes</span> a2 &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="css">    100% &#123; <span class="attribute">opacity</span>:<span class="number">0</span>; &#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"animation-name:a1,a2;animation-duration:1s,1s;opacity:1;color:#ffffff;"</span>&gt;</span>BAS<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr></table></figure><h4 id="串联动画"><a href="#串联动画" class="headerlink" title="串联动画"></a>串联动画</h4><p>使用 animation-delay 错开不同动画开始的时间，实现串联的效果。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def text a &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  content &#x3D; &quot;BAS&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">set a &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    color &#x3D; 0x000000</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125; 1s</span></pre></td></tr><tr><td class="code"><pre><span class="line">then set a &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    alpha &#x3D; 0</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125; 1s</span></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="css">@<span class="keyword">keyframes</span> a1 &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="css">    100% &#123; <span class="attribute">color</span>:<span class="number">#000000</span>; &#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="css">@<span class="keyword">keyframes</span> a2 &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="css">    0% &#123; <span class="attribute">color</span>:<span class="number">#000000</span>; &#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="css">    100% &#123; <span class="attribute">color</span>:<span class="number">#000000</span>;<span class="attribute">opacity</span>:<span class="number">0</span>; &#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"animation-name:a1,a2;animation-duration:1s,1s;animation-delay:0s,1s;opacity:1;color:#ffffff;"</span>&gt;</span>BAS<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr></table></figure><h3 id="状态控制"><a href="#状态控制" class="headerlink" title="状态控制"></a>状态控制</h3><h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>animation-play-state: running</p><h4 id="暂停"><a href="#暂停" class="headerlink" title="暂停"></a>暂停</h4><p>animation-play-state: paused</p><h4 id="中间状态"><a href="#中间状态" class="headerlink" title="中间状态"></a>中间状态</h4><p>设置 animation-delay 为负值就可以实现从某个中间状态开始动画。</p><p>比如弹幕的生命周期对应视频的 1s 到 5s，视频跳转到 4s 时，需要设置弹幕 animation-delay 属性为 -1s。</p><h4 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h4><p>生命周期结束需要及时清除元素，原理是 animation 动画结束会触发 animationend 事件，该事件触发时清除掉元素即可。元素没有动画时需要指定一个空动画。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="css">@<span class="keyword">keyframes</span> a1 &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="css">    100% &#123; &#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></pre></td></tr></table></figure><p>End.</p>]]></content>
      <categories>
        <category>创作集</category>
      </categories>
  </entry>
  <entry>
    <title>我喜欢的音乐</title>
    <url>/my-favorite-songs/</url>
    <content><![CDATA[<div class="aplayer" id="aplayer1"></div><script>$(function(){$.ajax({url:"https://api.i-meto.com/meting/api?server=netease&type=playlist&id=35798529",success:function(e){var a=new APlayer({element:document.getElementById("aplayer1"),showlrc:3,theme:"#ad7a86",listmaxheight:"280px",mode:"random",music:JSON.parse(e)});window.aplayers||(window.aplayers=[]),window.aplayers.push(a)}})})</script><p>听了几年网易云音乐积累的音乐，女声、日语为主（也可能会有一些奇奇怪怪的歌曲<br>同步自：<a href="http://music.163.com/#/playlist?id=35798529" target="_blank" rel="noopener">DIYgod喜欢的音乐 - 网易云音乐</a><br>自豪地使用 <a href="https://github.com/metowolf/Meting" target="_blank" rel="noopener">Meting</a> 和 <a href="https://github.com/MoePlayer/APlayer" target="_blank" rel="noopener">APlayer</a> 构建</p>]]></content>
      <categories>
        <category>分享境</category>
      </categories>
  </entry>
  <entry>
    <title>可能是目前最好用的两个 Hexo 播放器插件</title>
    <url>/best-players-in-hexo/</url>
    <content><![CDATA[<p>我实在也不是谦虚，这<del>可能</del>是目前最好用的两个 Hexo 播放器插件，感谢插件作者（给大佬们递女装<br>本文只作为演示，使用方法和 issue 请移步 GitHub</p><a id="more"></a><h1 id="hexo-tag-aplayer"><a href="#hexo-tag-aplayer" class="headerlink" title="hexo-tag-aplayer"></a><a href="https://github.com/MoePlayer/hexo-tag-aplayer" target="_blank" rel="noopener">hexo-tag-aplayer</a></h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install hexo-tag-aplayer --save</span></pre></td></tr></table></figure><p>Hexo 的 <a href="https://github.com/MoePlayer/APlayer" target="_blank" rel="noopener">APlayer</a> 标签插件，由 <a href="https://github.com/grzhan" target="_blank" rel="noopener">@grzhan</a> 维护</p><div class="aplayer" id="aplayer1"></div><script>$(function(){var e=new APlayer({element:document.getElementById("aplayer1"),showlrc:3,theme:"#ad7a86",music:[{title:"あっちゅ～ま青春!",author:"七森中☆ごらく部",url:"https://cdn1.diygod.me/yuruyuri.mp3",pic:"https://cdn1.diygod.me/yuruyuri.jpg",lrc:"https://cdn1.diygod.me/yuruyuri.lrc"},{title:"secret base~君がくれたもの~",author:"茅野愛衣",url:"https://cdn1.diygod.me/secretbase.mp3",pic:"https://cdn1.diygod.me/secretbase.jpg",lrc:"https://cdn1.diygod.me/secretbase.lrc"},{title:"回レ！雪月花",author:"小倉唯",url:"https://cdn1.diygod.me/snowmoonflowers.mp3",pic:"https://cdn1.diygod.me/snowmoonflowers.jpg",lrc:"https://cdn1.diygod.me/snowmoonflowers.lrc"}]});window.aplayers||(window.aplayers=[]),window.aplayers.push(e)})</script><h1 id="hexo-tag-dplayer"><a href="#hexo-tag-dplayer" class="headerlink" title="hexo-tag-dplayer"></a><a href="https://github.com/MoePlayer/hexo-tag-dplayer" target="_blank" rel="noopener">hexo-tag-dplayer</a></h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install hexo-tag-dplayer --save</span></pre></td></tr></table></figure><p>Hexo 的 <a href="https://github.com/MoePlayer/DPlayer" target="_blank" rel="noopener">DPlayer</a> 标签插件，由 <a href="https://github.com/Myer921" target="_blank" rel="noopener">@Myer921</a> <a href="https://github.com/dixyes" target="_blank" rel="noopener">@dixyes</a> 维护</p><div class="dplayer" id="dplayer1"></div><script>$(function(){var d=new DPlayer({container:document.getElementById("dplayer1"),video:{url:"https://cdn1.diygod.me/hikarunara.mp4",pic:"https://cdn1.diygod.me/hikarunara.png",thumbnails:"https://cdn1.diygod.me/hikarunara_thumbnails.jpg"},danmaku:{id:"diygodme1",api:"https://api.diygod.me/dplayer/"}});window.dplayers||(window.dplayers=[]),window.dplayers.push(d)})</script>]]></content>
      <categories>
        <category>分享境</category>
      </categories>
  </entry>
  <entry>
    <title>做了一点微小的改动</title>
    <url>/new-blog/</url>
    <content><![CDATA[<p>新的开始，只做了一点微小的改动</p><h3 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h3><p>从 <a href="http://www.anotherhome.net" target="_blank" rel="noopener">www.anotherhome.net</a> 换成了 diygod.me<br>anotherhome.net 起源于高中比较喜欢的一部番《Another》，年代有些久远，现在剧情都已经记不清了</p><a id="more"></a><h3 id="博客程序"><a href="#博客程序" class="headerlink" title="博客程序"></a>博客程序</h3><p>从 WordPress 换到了 Hexo<br>Hexo 是基于 Node.js 的静态博客框架，作为一名不会 php 的弱鸡前端，还是 Hexo 用起来更方便<br>现在博客托管在 GitHub，用又拍云作 CDN，不用再自己维护服务器了</p><h3 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h3><p>样式基本保持了一致<br>基于 <a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">Next</a> 重构了之前使用的 WordPress 主题，取名 <a href="https://github.com/DIYgod/hexo-theme-sagiri" target="_blank" rel="noopener">Sagiri</a>，我的主题跟纱雾一样可爱<br>除了更可爱，又在原主题基础上加了使用 Webpack 打包 js 的改进和 pjax 的处理</p><p>主题虽然开源了，但是属于自用性质的项目，很多应该做成可定制化的地方都没有做，从开源项目的视角来看做得并不好，而我目前又对制作主题并没有太高的兴致，所以使用之前还请慎重考虑</p><h3 id="博客名"><a href="#博客名" class="headerlink" title="博客名"></a>博客名</h3><p>既然域名都换了，博客名就也从 Anotherhome 换成了 Hi, DIYgod</p><h3 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h3><p>没了 WordPress 的原生评论，这个还是挺头疼的，纠结了很久最后选了 disqus，然后把之前的评论都迁移过来了<br>想要正常使用需要针对 disq.us | disquscdn.com | disqus.com 启用代理</p><h3 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h3><p>很多老文章已经失去了意义，就删了一大半</p><h3 id="友链"><a href="#友链" class="headerlink" title="友链"></a>友链</h3><p>需要重新申请<br>希望先友后链，原则上不再接受不太熟悉的人</p><h3 id="旧存档"><a href="#旧存档" class="headerlink" title="旧存档"></a>旧存档</h3><p><a href="https://archive.anotherhome.net" target="_blank" rel="noopener">https://archive.anotherhome.net</a><br>存档关闭了所有评论，可能会随时挂掉</p>]]></content>
      <categories>
        <category>事件簿</category>
      </categories>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><a id="more"></a><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      <categories>
        <category>事件簿</category>
      </categories>
  </entry>
  <entry>
    <title>bilibili2RSS — 使用 RSS 订阅 bilibili up主和番剧</title>
    <url>/3264/</url>
    <content><![CDATA[<p>作为一种过气技术，提供 RSS 订阅源的网站越来越少，每个网站都想把用户尽可能长时间地绑在自己那里，而 RSS 可能会造成负面效果</p><p>但在这个内容爆炸时代，只要意识到了「我被信息所绑架」这个问题后，用户自然会想要一种更高级的聚合信息和动态更新解决方案，比如 RSS</p><p>这里提供了使用 RSS 订阅 bilibili up主和番剧的解决方案</p><p>订阅up主：<a href="https://api.prprpr.me/bilibili2rss/user/6997378" target="_blank" rel="noopener">https://api.prprpr.me/bilibili2rss/user/6997378</a></p><p>订阅番剧：<a href="https://api.prprpr.me/bilibili2rss/bangumi/6446" target="_blank" rel="noopener">https://api.prprpr.me/bilibili2rss/bangumi/6446</a></p><p>订阅分区：<a href="https://api.prprpr.me/bilibili2rss/partion/33" target="_blank" rel="noopener">https://api.prprpr.me/bilibili2rss/partion/33</a></p><p>项目名叫 bilibili2RSS，开源在 <a href="https://github.com/DIYgod/bilibili2RSS" target="_blank" rel="noopener">GitHub</a></p><p>另外可以使用相关项目 <a href="https://github.com/DIYgod/Weibo2RSS" target="_blank" rel="noopener">Weibo2RSS</a> 订阅喜欢的微博博主</p><p>Enjoy!</p>]]></content>
      <categories>
        <category>创作集</category>
      </categories>
  </entry>
  <entry>
    <title>我们走过的</title>
    <url>/3207/</url>
    <content><![CDATA[<style>#love-map{width:100%}#love-time{text-align:center;margin-bottom:20px;font-size:14px;color:#ef9a9a;display:none}</style><div id="love-time">这是我们共同度过的第<span></span></div><div id="love-map"></div><p>上面是一些我们一起去过的地方，其中有一个地点标的是 1996 年，这并不是我写错了，那年我 1 岁，我们是邻居，遗憾的是我们对那几年都没有任何记忆了<a id="more"></a></p><p>&nbsp;</p><p>之后一晃 13 年，刚上高中，我家搬到了高中旁边的一个小区，一天晚上我妈兴奋地跟我说：你猜我晚上散步遇到了谁？</p><p>我肯定是猜不出来的，因为我什么都不记得</p><p>再后来发现她跟我一个班，就这样故事继续了</p><p>那时候每天放学一起回家，关系很亲密，家长老师都很紧张，以为我们在早恋，但我一直在沉迷学习，实际上什么都没发生，放学路上聊的最多的也是功课，现在想起来甚至有些遗憾</p><p>&nbsp;</p><p>但有趣的灵魂终会相遇，5 年以后，这个人又被我诱骗成了女票，我们的故事还会继续下去</p><p>&nbsp;</p><p>回想一下，这些情节居然跟你的名字有一些神似</p><p>（是不会放照片的，长相和性格可以脑补扎着单马尾的岁纳京子</p><script>function love_time(){window.setTimeout(function(){love_time()},1e3);var e=new Date("5/11/2017 00:00:00"),t=((new Date).getTime()-e.getTime())/864e5,o=Math.floor(t),a=24*(t-o),n=Math.floor(a),r=60*(a-n),i=Math.floor(60*(a-n)),m=Math.floor(60*(r-i));$("#love-time span").html(o+"天"+n+"小时"+i+"分"+m+"秒")}function myEcharts(){$("#love-map").height(.8*$("#love-map").width());var e=echarts.init(document.getElementById("love-map"));option=null;var n={"临沂":[118.35,35.05],"武汉":[114.31,30.52],"杭州":[120.19,30.26],"上海":[121.48,31.22],"昆明":[102.73,25.04],"大理":[100.225668,25.589449],"济南":[117,36.65]};option={backgroundColor:"#A7B1CA",geo:{map:"china",label:{emphasis:{show:!1}},roam:!1,itemStyle:{normal:{areaColor:"#fff",borderColor:"#C9CED9"},emphasis:{areaColor:"#DFE0E3"}}},tooltip:{trigger:"item",formatter:function(e){return e.name+" - "+e.value[2]}},series:[{type:"effectScatter",coordinateSystem:"geo",data:function(e){for(var t=[],o=0;o<e.length;o++){var a=n[e[o].name];a&&t.push({name:e[o].name,value:a.concat(e[o].value)})}return t}([{name:"临沂",value:"1996"},{name:"武汉",value:"2015.12"},{name:"杭州",value:"2017.01"},{name:"上海",value:"2017.02"},{name:"昆明",value:"2017.05"},{name:"大理",value:"2017.05"},{name:"济南",value:"2017.05"}]),symbolSize:8,showEffectOn:"render",rippleEffect:{brushType:"stroke"},hoverAnimation:!0,label:{normal:{formatter:"{b}",position:"right",fontSize:14,show:!0}},itemStyle:{normal:{color:"#FD8888"}}}]},e.setOption(option,!0)}$("#love-time").show(),love_time(),window.echarts?myEcharts():$.getScript("https://cdn.bootcss.com/echarts/3.8.5/echarts.min.js",function(){$.getScript("https://cdn.jsdelivr.net/npm/echarts@3.8.5/map/js/china.js",function(){myEcharts()})})</script>]]></content>
      <categories>
        <category>闲言语</category>
      </categories>
  </entry>
  <entry>
    <title>野生 DIYgod 捕获指南</title>
    <url>/3163/</url>
    <content><![CDATA[<p><span style="font-size:10pt"><em>嘘~ 你们看，我发现了什么？这里有一只落单的 DIYgod，我们可以尝试捕捉它，一只 DIYgod 可以为我们提供好几天的能量，它们富含大量的蛋白质，不过 DIYgod 可不好对付。我们慢慢从后面接近它，小心别发出任何声音。</em></span></p><p>&nbsp;</p><p>DIYgod 可能会在任何地方出现，但只要掌握了 DIYgod 的习性，捕获一只 DIYgod 并不是一件很难的事情<a id="more"></a></p><p>&nbsp;</p><h2 id="订阅"><a href="#订阅" class="headerlink" title="订阅"></a>订阅</h2><p><a href="https://t.me/awesomeDIYgod" target="_blank" rel="noopener">Telegram Channel</a>：使用 <a href="https://ifttt.com/" target="_blank" rel="noopener">IFTTT</a> 整合了 DIYgod 的 Twitter、GitHub、微博、博客、直播等几乎全部的更新，和一些不想或懒得发到社交网络的内容</p><p><a href="https://diygod.me/atom.xml">博客 RSS</a>：就是这里</p><p><del><a href="https://api.prprpr.me/weibo/rss/3306934123" target="_blank" rel="noopener">微博 RSS</a>：使用 <a href="https://github.com/DIYgod/Weibo2RSS" target="_blank" rel="noopener">WeiboRSS</a> 构建</del></p><p>&nbsp;</p><h2 id="社交网络"><a href="#社交网络" class="headerlink" title="社交网络"></a>社交网络</h2><p><a href="https://twitter.com/" target="_blank" rel="noopener">Twitter</a>：日常、乱七八糟</p><p><a href="https://github.com/DIYgod" target="_blank" rel="noopener">GitHub</a>：emmmm…同性交友</p><p><a href="https://live.bilibili.com/63489" target="_blank" rel="noopener">bilibili 直播</a>：不定期有直播看，可能有奇奇怪怪的内容</p><p><a href="https://www.zhihu.com/people/diygod" target="_blank" rel="noopener">知乎</a>：经常点赞但很少回答问题</p><p>&nbsp;</p><h2 id="群"><a href="#群" class="headerlink" title="群"></a>群</h2><p>芳文社的埃罗芒阿老师：<del>496685635</del> 822269956，主群，无主题随便撩，经常换奇奇怪怪的名字</p><p><del>网红女装屁股战队：624503765，守望先锋开黑</del></p><p><del>吃🐔：669026238，大吉大利，今晚吃鸡</del></p><p><del>MC的同居生活：397976165，MC 开黑，想一起玩需要申请白名单</del></p><p><del>MoePlayer 交流群：415835947，<a href="https://github.com/MoePlayer" target="_blank" rel="noopener">MoePlayer</a> 相关讨论</del></p><p><del>线下女装活动小分队：605133465，漫展、面基等线下活动，平时很冷清</del></p><p><a href="https://t.me/prpr233" target="_blank" rel="noopener">芳文社的埃罗芒阿老师（Telegram）</a>：没有言论审查</p><p><del><a href="https://t.me/adplayer" target="_blank" rel="noopener">MoePlayer 交流群（Telegram）</a>：<a href="https://github.com/MoePlayer" target="_blank" rel="noopener">MoePlayer</a> 相关讨论</del></p><p>&nbsp;</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><a href="https://github.com/MoePlayer" target="_blank" rel="noopener">MoePlayer</a>：萌豚技术组织，播放器、音视频、弹幕、解析相关开源开发，<a href="http://player.moe/" target="_blank" rel="noopener">官网</a>建设中，附属有一个私有 Telegram 群，想加可以联系 DIYgod 带上 GitHub 和 Telegram 账号</p><p>&nbsp;</p><h2 id="最喜欢的"><a href="#最喜欢的" class="headerlink" title="最喜欢的"></a>最喜欢的</h2><p><a href="http://weibo.com/573959922" target="_blank" rel="noopener">发小</a>、<a href="https://suannai.cat/" target="_blank" rel="noopener">酸奶</a>、<a href="https://zh.moegirl.org/zh-hans/%E6%91%87%E6%9B%B3%E7%99%BE%E5%90%88" target="_blank" rel="noopener">摇曳百合</a>、<a href="https://space.bilibili.com/883968#!/" target="_blank" rel="noopener">暴走大事件</a>、<a href="https://space.bilibili.com/6997378" target="_blank" rel="noopener">微小微</a>、<a href="http://www.zimuzu.tv/resource/10733" target="_blank" rel="noopener">权力的游戏</a>、<a href="https://www.bilibili.com/" target="_blank" rel="noopener">bilibili</a>、<a href="https://github.com/DIYgod" target="_blank" rel="noopener">写代码</a>、<a href="https://diygod.me/links">你们</a></p><p>&nbsp;</p><h2 id="最讨厌的"><a href="#最讨厌的" class="headerlink" title="最讨厌的"></a>最讨厌的</h2><p><a href="http://www.alibabagroup.com/" target="_blank" rel="noopener">阿里</a>、墙</p>]]></content>
      <categories>
        <category>闲言语</category>
      </categories>
  </entry>
  <entry>
    <title>让咕咕机再次伟大</title>
    <url>/3116/</url>
    <content><![CDATA[<style>.gugu-print{display:none;margin-top:20px}.gugu-btn{cursor:pointer;border:1px solid #eee;display:inline-block;padding:5px 10px;background:#fff;border-radius:4px}.gugu-login-btn-wrap{text-align:center}.gugu-login-btn{cursor:pointer}.gugu-user{display:none;text-align:center}.gugu-avatar{display:inline-block;height:50px;width:50px;background-size:contain;border-radius:50%}.gugu-info{padding-top:25px;font-weight:700;line-height:25px}.gugu-name{font-size:18px}.gugu-textarea{width:100%;height:100px;font-size:14px;padding:10px;box-sizing:border-box}.gugu-input{width:100%;font-size:14px;padding:10px;box-sizing:border-box}</style><p>咕咕机的官方发送平台非常反人类，发送接口没有任何长度和频率限制，又可以匿名发送…所以经常被人刷垃圾信息…群里经常有人反馈但官方就是不改…好在咕咕机是开发接口的</p><p>就这样我封装了一个增强版 API，开源在 GitHub： <a href="https://github.com/DIYgod/gugu-node-api" target="_blank" rel="noopener">https://github.com/DIYgod/gugu-node-api</a></p><p>特性：强制微博登录、不允许匿名、长度限制、发送频率限制、跨域限制、黑名单机制</p><p>好了，点击下面按钮，登录后继续跟我表白吧！</p><div class="gugu-login-btn-wrap"><img class="no-fancybox gugu-login-btn" src="/images/weibo2login.png"></div><div class="gugu-user"><div class="gugu-info"><div class="gugu-avatar"></div><div class="gugu-name"></div></div><div class="gugu-btn gugu-logout-btn">退出登录</div></div><div class="gugu-print"><textarea class="gugu-textarea" placeholder="输入文本内容"></textarea><div class="gugu-btn gugu-send-btn-text">咕咕文字</div><input type="text" class="gugu-input" placeholder="输入图片地址"><div class="gugu-btn gugu-send-btn-pic">咕咕图片</div></div><script>function gugushow(t){$.ajax({url:"https://api.anotherhome.net/gugu/account",xhrFields:{withCredentials:!0},success:function(t){t&&($(".gugu-avatar").css("background-image","url("+t._json.avatar_large.replace("http","https")+")"),$(".gugu-name").html("Hi, "+t.displayName),$(".gugu-user").show(),$(".gugu-print").show(),$(".gugu-login-btn-wrap").hide())}})}gugushow(),$(".gugu-login-btn").click(function(){window.location.href="https://api.anotherhome.net/gugu/login"}),$(".gugu-logout-btn").click(function(){window.location.href="https://api.anotherhome.net/gugu/logout"}),$(".gugu-send-btn-text").click(function(){$(".gugu-textarea").val()&&$.ajax({url:"https://api.anotherhome.net/gugu/print",type:"post",data:JSON.stringify({type:"1",content:$(".gugu-textarea").val()}),xhrFields:{withCredentials:!0},success:function(t){t?t.code&&t.msg?notie("error",t.msg):t.msg?notie("success",t.msg):notie("error","打印失败"):notie("error","打印失败")},error:function(){notie("error","打印失败")}})}),$(".gugu-send-btn-pic").click(function(){$.ajax({url:"https://api.anotherhome.net/gugu/print",type:"post",data:JSON.stringify({type:"2",content:$(".gugu-input").val()}),xhrFields:{withCredentials:!0},success:function(t){t?t.code&&t.msg?notie("error",t.msg):t.msg?notie("success",t.msg):notie("error","打印失败"):notie("error","打印失败")},error:function(){notie("error","打印失败")}})})</script>]]></content>
      <categories>
        <category>创作集</category>
      </categories>
  </entry>
  <entry>
    <title>现在可以给网红写小纸条表白了！</title>
    <url>/2978/</url>
    <content><![CDATA[<p>最近跟我表白的人太多了，所以我买了一个<a href="http://www.memobird.cn" target="_blank" rel="noopener">咕咕机</a>，现在访问 <a href="/make-gugu-great-again">让咕咕机再次伟大</a> 就可以很方便地写小纸条跟我表白了。<a id="more"></a></p><p>比如</p><p><img src="/images/gugu1.jpg" alt=""></p><p>就像小时候偷偷在课桌间传递的小纸条一样温暖。</p><p>&nbsp;</p><p>除此之外，咕咕机还可以做很多有趣的事情：<a href="https://www.zhihu.com/question/39529878" target="_blank" rel="noopener">MEMOBIRD 咕咕机有哪些有趣的玩法？</a></p><p>再加上咕咕机是<a href="http://open.memobird.cn/" target="_blank" rel="noopener">开放API</a>的，又可以连接 <a href="https://ifttt.com/" target="_blank" rel="noopener">IFTTT</a>，对一个开发者来说可以做的事情就更多了，比如配合 <a href="https://github.com/DIYgod/Weibo2RSS" target="_blank" rel="noopener">Weibo2RSS</a> 和 IFTTT 还可以用来实时打印喜欢的小姐姐新发的微博。</p><p>&nbsp;</p><p>今年的送明信片活动也打算用这个来报名，诶嘿嘿。</p><p>[hermit autoplay=”false” mode=”circulation”]netease_songlist#:28445467[/hermit]</p><p>以下（给我打印宪法）是错误的用法：</p><p><img src="/images/gugu2.jpg" alt=""></p>]]></content>
      <categories>
        <category>闲言语</category>
      </categories>
  </entry>
  <entry>
    <title>Service Workers 实现网站加速和离线缓存</title>
    <url>/2954/</url>
    <content><![CDATA[<p>最近看到了 Service Workers 这个东西，它可以根据配置为用户缓存网站静态与动态资源：截获用户的所有网络请求，根据缓存配置来决定是从缓存还是网络获取相应资源，从而可以极大提高网页的加载速度。优点有可定制性高、不需要服务端支持、效果显著。</p><p>最后的效果就是当你第二次访问我的网站时只会加载大约80k 的资源（除去 AdSense 的情况下），这其中包括了所有图片和音频视频，这 80k 主要是 HTML 和我使用的 <a href="https://github.com/DIYgod/DPlayer" target="_blank" rel="noopener">DPlayer</a> 的 API。</p><p><img src="/images/sw4.jpg" alt=""></p><p>甚至可以在断开网络时访问（剪断网线试试吧）：</p><p><img src="/images/sw2.jpg" alt=""></p><a id="more"></a>当然局限性也是有的：<p>只支持 HTTPS，因为可以截获用户的网络请求，需要在一个安全的环境。</p><p>兼容性不太好，<a href="http://caniuse.com/#search=service%20worker" target="_blank" rel="noopener">点击查看兼容性报告</a>，目前只有 Chrome Firefox Opera 和部分 Android 浏览器 支持。</p><p><img src="/images/sw3.jpg" alt=""></p><p>使用方法网上有很多教程，这里不赘述了，推荐这几篇吧：</p><p><a href="https://metaquant.org/service%20worker-web%20performance-cache.html" target="_blank" rel="noopener">使用service worker+sw-precache实现网站加速</a></p><p><a href="https://yangbo.tech/2017/01/15/2017-01-15-speedy-and-offline-site-by-service-worker/" target="_blank" rel="noopener">使用Service worker实现加速/离线访问静态blog网站</a></p><p><a href="https://segmentfault.com/a/1190000008491458" target="_blank" rel="noopener">Service Workers 与离线缓存</a></p>]]></content>
      <categories>
        <category>分享境</category>
      </categories>
  </entry>
  <entry>
    <title>一只叫酸奶的喵</title>
    <url>/2939/</url>
    <content><![CDATA[<p>酸奶是我家新招的猫女仆，她有一个博客：<a href="https://suannai.cat/" target="_blank" rel="noopener">https://suannai.cat</a></p><p><img src="/images/suannai.png" alt=""><a id="more"></a></p><p>Q: 你是谁？<br>A: 我是酸奶，来自喵星，是个可爱的女孩子，我的铲屎官是 DIYgod，对他好点，他是我罩的。</p><p>Q: 你的身世是怎样的？<br>A: 我还有6个兄弟姐妹，有一个姐姐（<a href="http://blog.zanyuyu.com/tags/%E7%8C%AB/" target="_blank" rel="noopener">蛋糕</a>）在<a href="http://weibo.com/zanyuyu" target="_blank" rel="noopener">赞鱼鱼</a>家；2017 年 2 月 23 日起正式雇佣 DIYgod 为我的铲屎官。</p><p>Q: 你多大了？<br>A: 50多天了，所以不要把我当一个月的小屁喵看待了。</p><p>Q: 你是什么品种的？<br>A: 美短，加白，非纯种。</p><p>Q: 你最喜欢什么？<br>A: 吃肉。</p>]]></content>
      <categories>
        <category>分享境</category>
      </categories>
  </entry>
  <entry>
    <title>女朋友的微博情绪监控</title>
    <url>/2920/</url>
    <content><![CDATA[<p><img src="/images/weibo-negative.png" alt=""></p><p>就是这样，代码写好了，就差个女朋友了。</p><p>最后的效果就是检测某一微博博主新发的微博，如果判断为消极情绪就发出警告（手机通知、邮件通知、自动发一条上图那样的微博之类的）。</p><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p><a href="https://github.com/DIYgod/Weibo2RSS" target="_blank" rel="noopener">https://github.com/DIYgod/Weibo2RSS</a> 以 RSS 形式输出消极情绪的微博</p><p><a href="https://github.com/DIYgod/Text2Emotion" target="_blank" rel="noopener">https://github.com/DIYgod/Text2Emotion</a> 分析一句话的情绪值<a id="more"></a></p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>消极情绪微博 RSS 配合 IFTTT 使用，具体设置如下图，条件是 RSS 出现新内容，行为是发一条微博通知（也可以改成手机通知或者邮件通知等）。</p><p><img src="/images/negtivewbifttt.png" alt=""></p><p>&nbsp;</p><h2 id="开发过程"><a href="#开发过程" class="headerlink" title="开发过程"></a>开发过程</h2><p>下面是我的开发过程。</p><h3 id="一、分词"><a href="#一、分词" class="headerlink" title="一、分词"></a>一、分词</h3><p>这东西自己做不来，所以只好找现成的解决方案，找到了下面几个：</p><p><a href="https://github.com/fxsjy/jieba" target="_blank" rel="noopener">结巴中文分词</a></p><p><a href="http://www.ltp-cloud.com/" target="_blank" rel="noopener">哈工大语言技术平台云</a></p><p><a href="http://www.sinacloud.com/doc/sae/python/segment.html" target="_blank" rel="noopener">新浪云中文分词</a></p><p><a href="https://www.xfyun.cn/services/ltp" target="_blank" rel="noopener">讯飞语言云</a></p><p><a href="https://www.qcloud.com/document/product/271" target="_blank" rel="noopener">腾讯文智</a></p><p>除了腾讯文智其他都是免费或者开源的，简单比较之后选择了锤子 Big Bang 也在用的讯飞。</p><h3 id="二、情绪分析"><a href="#二、情绪分析" class="headerlink" title="二、情绪分析"></a>二、情绪分析</h3><p>这个关键在于词典，也是找现成的：</p><p><a href="http://www.datatang.com/data/44317" target="_blank" rel="noopener">中文情感极性词典 NTUSD</a></p><p><a href="http://大连理工情感词汇本体库" target="_blank" rel="noopener">大连理工情感词汇本体库</a></p><p>大连理工的本体库标注了超过两万词语，包括这些词语词性种类、情感类别、情感强度及极性等信息，像下面这样：</p><p><img src="/images/dllgemotion.png" alt=""></p><p>看起来很不错，就选择了这个。</p><p>词典下载下来是一个 excel 表格，把它先另存为成 csv 格式，然后就可以导入到 mongodb 数据库里了。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mongoimport -d emotion -c emo --<span class="built_in">type</span> csv --headerline --file emotion.csv</span></pre></td></tr></table></figure><h3 id="三、情绪值计算"><a href="#三、情绪值计算" class="headerlink" title="三、情绪值计算"></a>三、情绪值计算</h3><p>把要分析的话进行分词处理，再把每个词语的情绪值进行累加，就可以得出一条微博的情绪值。</p><p>这里其实还有很多算法工作可以做，但简单起见，我只是进行了累加。</p><p>然后写完发现效果很差，原因是词典内容太少，很多词语都没有，所以很多句子根本判断不出来。</p><p>&nbsp;</p><p>最后废弃了上面的所有东西，直接使用腾讯文智的收费服务。。。</p><h3 id="四、应用到微博"><a href="#四、应用到微博" class="headerlink" title="四、应用到微博"></a>四、应用到微博</h3><p>抓取微博内容的原理很简单，新浪微博的<a href="http://service.weibo.com/widget/widget_blog.php?uid=3306934123" target="_blank" rel="noopener">微博秀</a>是不需要登录就可以访问的，直接使用 Node.js 解析页面就可以拿到微博内容。</p><p>然后对微博内容进行情绪值计算，把消极情绪的微博输出成 RSS。</p><h3 id="五、监控"><a href="#五、监控" class="headerlink" title="五、监控"></a>五、监控</h3><p>输出成 RSS，监控也容易了，其中 <a href="https://ifttt.com" target="_blank" rel="noopener">IFTTT</a> 效果最佳，检测到 RSS 有新内容时，可以触发手机通知、邮件通知、发一条微博等行为。</p><p>&nbsp;</p><p>以上，其实最大的问题还是：我差个女朋友。</p>]]></content>
      <categories>
        <category>创作集</category>
      </categories>
  </entry>
  <entry>
    <title>微小微直播回放第三弹</title>
    <url>/2889/</url>
    <content><![CDATA[<p><img src="https://cdn1.diygod.me/wxwlive/1216/1/poster.png" alt=""></p><p>老婆真是越来越可爱了，啊啊啊我要死了。</p><a id="more"></a><p>直播中间断了一次，所以分成两个视频。</p><style>.dplayer-time{display:inline-block!important}</style><div id="dplayer7" class="dplayer"></div><p>&nbsp;</p><div id="dplayer8" class="dplayer"></div><p>&nbsp;</p><p>第一弹：<a href="https://www.anotherhome.net/2805" target="_blank" rel="noopener">https://www.anotherhome.net/2805</a><br>第二弹：<a href="https://www.anotherhome.net/2847" target="_blank" rel="noopener">https://www.anotherhome.net/2847</a></p><script src="https://cdn.bootcss.com/hls.js/0.8.7/hls.min.js"></script><script>$(function(){function e(){var e=new DPlayer({element:document.getElementById("dplayer7"),autoplay:!0,theme:"#FADFA3",loop:!0,screenshot:!0,video:{url:"https://cdn1.diygod.me/wxwlive/1216/1/index.m3u8",pic:"https://cdn1.diygod.me/wxwlive/1216/1/poster.png"},danmaku:{id:"8810755617f77d00",api:"https://api.diygod.me/dplayer/",token:"tokendemo",addition:["https://cdn1.diygod.me/wxwlive/1216/1/danmaku.json"]}}),d=new DPlayer({element:document.getElementById("dplayer8"),autoplay:!1,theme:"#FADFA3",loop:!0,screenshot:!0,video:{url:"https://cdn1.diygod.me/wxwlive/1216/2/index.m3u8",pic:"https://cdn1.diygod.me/wxwlive/1216/1/poster.png"},danmaku:{id:"f9e80f1d90cd12f5",api:"https://api.diygod.me/dplayer/",token:"tokendemo",addition:["https://cdn1.diygod.me/wxwlive/1216/2/danmaku.json"]}});window.dplayers||(window.dplayers=[]),window.dplayers.push(e),window.dplayers.push(d)}window.Hls&&window.DPlayer?e():$.getScript("https://cdn.bootcss.com/hls.js/0.8.7/hls.min.js",function(){e()})})</script>]]></content>
      <categories>
        <category>分享境</category>
      </categories>
  </entry>
  <entry>
    <title>1000 天成就达成！</title>
    <url>/2855/</url>
    <content><![CDATA[<p><span style="font-size:16pt"><strong>Anotherhome</strong></span></p><p><strong>2014.02.09 - 2016.11.05</strong></p><p>Made with by DIYgod</p><p>&nbsp;</p><p><img src="/images/1000.jpg" alt=""></p>]]></content>
      <categories>
        <category>事件簿</category>
      </categories>
  </entry>
  <entry>
    <title>微小微直播回放第二弹</title>
    <url>/2847/</url>
    <content><![CDATA[<p><img src="https://cdn1.diygod.me/wxwlive/1102/poster.png" alt=""></p><p>本次弹幕总计 11156 条、弹幕文件 1.2 MB。</p><a id="more"></a><style>.dplayer-time{display:inline-block!important}</style><div class="dplayer" id="dplayer5"></div><p>&nbsp;</p><p>第一弹：<a href="https://www.anotherhome.net/2805" target="_blank" rel="noopener">https://www.anotherhome.net/2805</a></p><script src="https://cdn.bootcss.com/hls.js/0.8.7/hls.min.js"></script><script>$(function(){function e(){var e=new DPlayer({element:document.getElementById("dplayer5"),autoplay:!0,theme:"#FADFA3",loop:!0,screenshot:!0,video:{url:"https://cdn1.diygod.me/wxwlive/1102/index.m3u8",pic:"https://cdn1.diygod.me/wxwlive/1102/poster.png"},danmaku:{id:"f171a0b104c1fd55",api:"https://api.diygod.me/dplayer/",token:"tokendemo",maximum:3e3,addition:["https://cdn1.diygod.me/wxwlive/1102/danmaku.json"]}});window.dplayers||(window.dplayers=[]),window.dplayers.push(e)}window.Hls?e():$.getScript("https://cdn.bootcss.com/hls.js/0.8.7/hls.min.js",function(){e()})})</script>]]></content>
      <categories>
        <category>分享境</category>
      </categories>
  </entry>
  <entry>
    <title>Weibo2RSS — 使用 RSS 订阅喜欢的微博博主</title>
    <url>/2837/</url>
    <content><![CDATA[<p>使用 RSS 订阅喜欢的微博博主（比如我）吧~</p><p>Demo：<a href="https://api.prprpr.me/weibo/rss/3306934123" target="_blank" rel="noopener">https://api.prprpr.me/weibo/rss/3306934123</a></p><p>RSS 格式输出一个微博博主最新的 15 条微博，可以使用 RSS 阅读器来获取及时推送，配合 <a href="https://ifttt.com/" target="_blank" rel="noopener">IFTTT</a> 还可以实现更多好玩的功能。</p><p>原理：新浪微博的<a href="http://service.weibo.com/widget/widget_blog.php?uid=3306934123" target="_blank" rel="noopener">微博秀</a>是不需要登录就可以访问的，使用 Node.js 解析页面，然后输出 RSS 格式。</p><p>使用及搭建方法：见 <a href="https://github.com/DIYgod/Weibo2RSS" target="_blank" rel="noopener">GitHub</a>。</p>]]></content>
      <categories>
        <category>创作集</category>
      </categories>
  </entry>
  <entry>
    <title>微小微直播回放的 DPlayer 实现</title>
    <url>/2805/</url>
    <content><![CDATA[<p>以下为10月19日<a href="http://weibo.com/u/2025479687" target="_blank" rel="noopener">微小微</a>在<a href="http://m.yizhibo.com/l/n6VHhuJoCbMf41Nx.html" target="_blank" rel="noopener">一直播</a>的直播回放（迷妹脸，弹幕也成功扒下来转成 <a href="https://github.com/DIYgod/DPlayer" target="_blank" rel="noopener">DPlayer</a> 可以识别的格式啦。</p><p>视频有时出现卡顿是直播的原因；弹幕总计 15768 条、弹幕文件 1.7 MB，第一条弹幕在 13 秒出现。</p><p>一直播弹幕池与 DPlayer 弹幕池互不影响，也可以在下面发弹幕哟。</p><a id="more"></a><style>.dplayer-time{display:inline-block!important}</style><div class="dplayer" id="dplayer4"></div><p>&nbsp;</p><h2 id="视频及弹幕搬运"><a href="#视频及弹幕搬运" class="headerlink" title="视频及弹幕搬运"></a>视频及弹幕搬运</h2><p>直播第二天发现一直播有昨天的回放，开心到晕掉，醒过来之后开始想办法下载视频和弹幕。</p><h3 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h3><p>网上找不到下载一直播视频的工具，只好自己动手，浏览器开发者工具看到页面加载了一个 m3u8 文件，然后就是下载 m3u8 文件里的 354 个视频片段就好了。</p><p>写了个 shell 脚本批量下载：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> $( seq 1 354 )</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">do</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">   wget http://xxx/<span class="variable">$&#123;k&#125;</span>.ts</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">done</span></span></pre></td></tr></table></figure><p>DPlayer 早就做了对 m3u8 格式的支持，不用对视频片段做任何后续处理。</p><p>视频下载完成。</p><h3 id="弹幕"><a href="#弹幕" class="headerlink" title="弹幕"></a>弹幕</h3><p>同样用开发者工具抓包，找到弹幕文件请求的规律。</p><p>第一个弹幕片段是 <a href="http://xxx?ts=1" target="_blank" rel="noopener">http://xxx?ts=1</a> ，其他的弹幕片段也只有ts参数不同。然后ts参数的规律是这样的：下一个片段的参数是上一个片段返回值里的最后一个ts值。</p><p>知道规律后就写了个 js 脚本来下载弹幕和把弹幕转换成 DPlayer 的格式。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajaxDan</span>(<span class="params">ts</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $.ajax(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        url: <span class="string">`http://xxx?ts=<span class="subst">$&#123;ts&#125;</span>`</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">var</span> tli = <span class="built_in">parseInt</span>(data.data.list[data.data.list.length - <span class="number">1</span>].ts)+<span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="built_in">console</span>.log(tli);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            data.data.list.map(<span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                dan[index] = &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    author: <span class="string">"yizhibon"</span> + i.nickname,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    time: <span class="built_in">parseInt</span>(i.ts) / <span class="number">1000</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    text: i.content,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    color: <span class="string">'#fff'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    type: <span class="string">'right'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                index++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            ajaxDan(tli)&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> dan = [];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> index = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">ajaxDan(<span class="number">1</span>);</span></pre></td></tr></table></figure><p>运行结果：536 个视频片段，15768 条弹幕</p><p><img src="/images/wxwlive1.jpg" alt=""></p><p>然后把弹幕对象字符串化，复制到 json 文件里。</p><p>完成。</p><script src="https://cdn.bootcss.com/hls.js/0.8.7/hls.min.js"></script><script>$(function(){function e(){var e=new DPlayer({element:document.getElementById("dplayer4"),autoplay:!0,theme:"#FADFA3",loop:!0,screenshot:!0,video:{url:"https://cdn1.diygod.me/wxwlive/1019/index.m3u8",pic:"https://cdn1.diygod.me/wxwlive/1019/poster.png"},danmaku:{id:"02d53ea190dc8583",api:"https://api.diygod.me/dplayer/",token:"tokendemo",maximum:3e3,addition:["https://cdn1.diygod.me/wxwlive/1019/danmaku.json"]}});window.dplayers||(window.dplayers=[]),window.dplayers.push(e)}window.Hls?e():$.getScript("https://cdn.bootcss.com/hls.js/0.8.7/hls.min.js",function(){e()})})</script>]]></content>
      <categories>
        <category>分享境</category>
      </categories>
  </entry>
  <entry>
    <title>WordPress 反垃圾评论大作战</title>
    <url>/2770/</url>
    <content><![CDATA[<p>WordPress 垃圾评论一直是超级多超级烦人的，如果没有有效的拦截方案，网站就会瞬间被每天几百条的垃圾评论淹没。</p><p>因为是每个 WordPress 站点都无法避免的问题，大家各显神通，做出的解决方案也挺多的，这里总结一下每种方法的特点和利弊：<a id="more"></a></p><h3 id="识别垃圾评论"><a href="#识别垃圾评论" class="headerlink" title="识别垃圾评论"></a>识别垃圾评论</h3><p>以 Akismet 插件为代表，根据评论内容或评论者的信息判断评论是否为垃圾评论，再决定是否拦截。开启后能拦截掉几乎所有垃圾评论，但这种方法最大的缺陷是<strong>误判</strong>，本站之前一直在用 Akismet 插件，误判的概率还是挺大的，即使经常去垃圾箱查看，偶尔一条的正常评论和一大堆垃圾评论一起混在垃圾箱也很容易被遗漏；其次会拖慢提交评论的速度，因为每条评论都要先被发到 Akismet 的国外服务器做识别。</p><p>&nbsp;</p><h3 id="禁止非中文评论"><a href="#禁止非中文评论" class="headerlink" title="禁止非中文评论"></a>禁止非中文评论</h3><p>90%以上的垃圾评论都来自国外，所以这种方法可以拦截掉90%以上的垃圾评论，但缺点是无法发送纯表情和类似“2333”、“Thanks”这种正常评论了，而且中文的垃圾评论也无法拦截掉。</p><p>&nbsp;</p><h3 id="修改评论-post-地址"><a href="#修改评论-post-地址" class="headerlink" title="修改评论 post 地址"></a>修改评论 post 地址</h3><p>这种方法虽然看起来有点自欺欺人，但效果出奇地好，因为绝大部分的垃圾评论都是智障一样只知道通过 post 网站根目录的 wp-comments-post.php 来提交垃圾评论的。稍微麻烦一点的是 WordPress 每次升级都要重新修改。</p><p>&nbsp;</p><h3 id="人工验证插件"><a href="#人工验证插件" class="headerlink" title="人工验证插件"></a>人工验证插件</h3><p>比如拖动解锁、拼图、验证码，效果是不错，但牺牲了用户体验，对小站来说没必要。</p><p>&nbsp;</p><h3 id="设置-token"><a href="#设置-token" class="headerlink" title="设置 token"></a>设置 token</h3><p>本站现在换用了这种方法，原理是每次刷新页面，后端都会返回一个不同的 token 放到页面上任意位置，然后在合适的时机用 JavaScript 将 token 填充到一个隐藏的 input 里面，提交评论时将隐藏 input 的值（正常情况是 token）一起提交，后端通过判断该值是否合法来判断评论是不是通过正常途径提交的。虽然这种方法也是可以破解的，但破解难度明显高了很多，更重要的是 token 算法和隐藏 input 的结构容易更改，每次简单的小修改都可以让破解失效。</p><p>使用也很简单，将如下代码放到主题的 function.php 即可，代码如下：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$leonax_magic_lower = <span class="number">328</span>;  <span class="comment">// token 最小值，自己随意修改</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$leonax_magic_upper = <span class="number">3450709</span>;  <span class="comment">// token 最大值，自己随意修改</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">leonax_anti_spam_form</span><span class="params">($fields)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">global</span> $leonax_magic_lower, $leonax_magic_upper;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $leonax_magic = mt_rand($leonax_magic_lower, $leonax_magic_upper);  <span class="comment">// 放在页面的token值，是一个随机数，每次都不同</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    $fields[<span class="string">'leonax_magic'</span>] = &amp;lt;&amp;lt;&amp;lt;EOT</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &amp;lt;input type=<span class="string">"hidden"</span> id=<span class="string">"leonax-magic"</span> name=<span class="string">"leonax-magic"</span> value=<span class="string">"0"</span>&amp;gt;  <span class="comment">// 隐藏的 input</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &amp;lt;script&amp;gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                $(<span class="string">"#comment-content"</span>).on(<span class="string">"keyup"</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;  <span class="comment">// js 检测到触发 keyup、click 或 touch 事件时填充 token</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                    $(<span class="string">"#leonax-magic"</span>).val(<span class="string">"$leonax_magic"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                $(<span class="string">'body'</span>).on(<span class="string">'click touch'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    $(<span class="string">"#leonax-magic"</span>).val(<span class="string">"$leonax_magic"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &amp;lt;/script&amp;gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">EOT;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> $fields;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">add_filter(<span class="string">'comment_form_default_fields'</span>, <span class="string">'leonax_anti_spam_form'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">leonax_anit_spam_caught</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    wp_die(<span class="string">'&amp;lt;strong&amp;gt;评论失败&amp;lt;/strong&amp;gt;: 垃圾评论什么的去死吧！'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">leonax_anti_spam_check</span><span class="params">( $commentdata )</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $comment_type = <span class="string">''</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> ( <span class="keyword">isset</span>($commentdata[<span class="string">'comment_type'</span>]) ) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        $comment_type = trim($commentdata[<span class="string">'comment_type'</span>]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> ( ($comment_type == <span class="string">'pingback'</span>) || ($comment_type == <span class="string">'trackback'</span>) ) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> $commentdata;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $content = <span class="string">''</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> ( <span class="keyword">isset</span>($commentdata[<span class="string">'comment_content'</span>]) ) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        $content = trim($commentdata[<span class="string">'comment_content'</span>]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (!strlen($content)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        leonax_anit_spam_caught();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">global</span> $leonax_magic_lower, $leonax_magic_upper;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> ( <span class="keyword">isset</span>($commentdata[<span class="string">'user_ID'</span>]) &amp;amp;&amp;amp; $commentdata[<span class="string">'user_ID'</span>] ) &#123; <span class="comment">// 登陆用户不做判断</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> $commentdata;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> ( !<span class="keyword">isset</span>($_POST[<span class="string">'leonax-magic'</span>]) ) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        leonax_anit_spam_caught();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $magic = intval($_POST[<span class="string">'leonax-magic'</span>]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> ($magic &amp;lt; $leonax_magic_lower || $magic &amp;gt; $leonax_magic_upper) &#123;  <span class="comment">// token 值在上面设置的最大值和最小值之间才合法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        leonax_anit_spam_caught();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> $commentdata;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">add_filter( <span class="string">'preprocess_comment'</span> , <span class="string">'leonax_anti_spam_check'</span> );</span></pre></td></tr></table></figure><p>以上代码来自 <a href="https://leonax.net/p/6732/block-spam-comments-from-web-page/" target="_blank" rel="noopener">LEONA+</a> 和 <a href="https://justyy.com/archives/1558" target="_blank" rel="noopener">JustYY.com</a>。</p><p>&nbsp;</p><p>目前只找到这几种方法，欢迎补充。</p>]]></content>
      <categories>
        <category>分享境</category>
      </categories>
  </entry>
  <entry>
    <title>DPlayer – 最好看的弹幕播放器送给最好看的宫园薰</title>
    <url>/2648/</url>
    <content><![CDATA[<link href="https://cdn.bootcss.com/dplayer/1.16.0/DPlayer.min.css" rel="stylesheet"><div id="dplayer1" class="dplayer"></div><p>最好看的HTML5弹幕播放器送给最好看的宫园薰。</p><p>DPlayer来源于我的毕业设计，DPlayer发布后，我的学生生涯也随之结束。<a id="more"></a></p><p>&nbsp;</p><p><strong>Q：</strong>当初为什么要做一个这么好看的弹幕播放器？</p><p><strong>A：</strong>毕业设计选到的题目。</p><p>&nbsp;</p><p><strong>Q：</strong>5月底就在GitHub发布了，为什么直到现在（8月底）才发博客？</p><p><strong>A：</strong>刚开始觉得DPlayer还不太完善，不适合用在生产环境，就没写博客。</p><p>&nbsp;</p><p><strong>Q：</strong>所以是又经过了3个月的完善才在博客正式发布的么？</p><p><strong>A：</strong>不是，主要是因为我买了守望先锋…</p><p>&nbsp;</p><p><strong>Q：</strong>我也很好看，为什么不送给我？</p><p><strong>A：</strong>可以，那同时送给爱我的70亿人类吧。</p><p>&nbsp;</p><p>GitHub：</p><p><a href="https://github.com/DIYgod/DPlayer" target="_blank" rel="noopener">https://github.com/DIYgod/DPlayer</a></p><p>Demo：</p><p><a href="http://dplayer.js.org/" target="_blank" rel="noopener">http://dplayer.js.org</a></p><p>&nbsp;</p><p><strong>Q：</strong>还有什么想说的么？</p><p><strong>A：</strong>差点忘了最重要的事情：我的战网ID <strong>DIYgod#5922</strong>，加我一起屁股开黑呀！</p><script>var dp1=new DPlayer({element:document.getElementById("dplayer1"),autoplay:!1,theme:"#FADFA3",loop:!0,screenshot:!1,preload:"none",video:{url:"https://cdn1.diygod.me/若能绽放光芒.mp4",pic:"https://cdn1.diygod.me/若能绽放光芒.png"},danmaku:{id:"9E2E3368B56CDBB4",api:"https://api.diygod.me/dplayer/",token:"tokendemo",maximum:3e3}});window.dplayers||(window.dplayers=[]),window.dplayers.push(dp)</script>]]></content>
      <categories>
        <category>创作集</category>
      </categories>
  </entry>
  <entry>
    <title>一些让我开心的小事情</title>
    <url>/2505/</url>
    <content><![CDATA[<p><img src="/images/happything.png" alt=""></p><p>手机满格的电量</p><p>过马路时路口亮起的绿灯</p><p>下雨时穿着雨靴踩出的水花</p><p>读到一首特别喜欢的诗</p><p>一抬头就看到的满天繁星</p><p>收到朋友寄来的信件</p><p>在马路上想起好笑的事情偷偷笑出来</p><p>下雨被困好朋友来送伞</p><p>做了一个好梦</p><p>趴在桌子上温暖的灯光打在脸上</p><p>屏幕亮起她的姓名<a id="more"></a></p><p>收拾整整齐齐的屋子</p><p>西瓜最中间的那一口</p><p>糖拌西红柿的汤</p><p>吃完薯片的手</p><p>穿着自己特别喜欢的衣服走在街上</p><p>微小微的微笑</p><p>每周更新的动漫和美剧</p><p>厨房里飘来饭菜的香</p><p>有我的快递</p><p>微凉的晚上一个人走在街上</p><p>雨天穿着长衣长袖看窗外</p><p>坐在屋顶看日落</p><p>偶遇一朵可爱的小花</p><p>听到一首喜欢的歌</p><p>上映一部喜欢的电影</p><p>写下这些小事</p><p>&nbsp;</p><p>小伙伴的补充：</p><p>穿女装</p><p>被网红评论</p><p>期末考试没挂科 o_o~</p><p>认识你们。</p><p>女朋友</p><p>写出的代码没bug</p><p>自己的意见被老师采纳</p><p>在酒吧或者茶馆听到自己喜欢的音乐</p><p>逛超市不用排队</p><p>干净的屏幕和键盘</p><p>被某站采纳意见并公开感谢</p><p>父母尚在，儿孙满堂</p><p>她在看我</p><p>楼梯转角你的微笑</p><p>下雨天发现包里正好有伞</p><p>发现一首相见恨晚的歌(๑•̀ㅁ•́ฅ)</p><p>和DIYgod聊天(问小白问题)&amp;交换友链（PY）</p><p>&nbsp;</p><p>（持续更新中，在下面留言分享让你开心的小事情吧~）</p>]]></content>
      <categories>
        <category>闲言语</category>
      </categories>
  </entry>
  <entry>
    <title>给喜欢明信片的你 — 一年一度的送明信片活动（已完结）</title>
    <url>/2449/</url>
    <content><![CDATA[<p><img src="/images/postcard2.jpg" alt=""></p><h3 id="Q-我为什么要你的明信片？妈妈说不能随便拿陌生人的东西。"><a href="#Q-我为什么要你的明信片？妈妈说不能随便拿陌生人的东西。" class="headerlink" title="Q: 我为什么要你的明信片？妈妈说不能随便拿陌生人的东西。"></a>Q: 我为什么要你的明信片？妈妈说不能随便拿陌生人的东西。</h3><p><strong>A:</strong> 你有体验过小确幸的感觉吗？</p><p>比如在毫无准备的情况下突然收到一张明信片，上面只有一句话：给喜欢明信片的你。</p><p>比如在不抱希望的情况下突然收到迟到好久的明信片。</p><p>比如在关系尚浅的情况下看到人家写给你满到要溢出来的文字。</p><p>这些你感受过吗？</p><p>我感受过，就是通过明信片感受的。</p><a id="more"></a><p>我是一枚明信片爱好者，每去一个地方，第一件事就是买有关当地自然人文的明信片。</p><p><img src="/images/postcard3.jpg" alt=""></p><p><strong>但这些卡片的价值，远不止是收藏和炫耀那么简单。</strong></p><p>有那么一瞬，我特别希望不在同一地标的你可以亲眼见证我们的情谊，或是感受到一丝来自陌生人的温暖。</p><p>有那么一瞬，我特别希望体验一下慢悠悠的生活方式，一封信，一张明信片，也许是寄给某个挂念的人，也许是寄给正在迷茫不安中的异地好友，也许是寄给神奇情境下认识的某个有好感的朋友。</p><h3 id="Q-我想要，我怎样才能收到你的明信片？"><a href="#Q-我想要，我怎样才能收到你的明信片？" class="headerlink" title="Q: 我想要，我怎样才能收到你的明信片？"></a>Q: 我想要，我怎样才能收到你的明信片？</h3><p><strong>A:</strong> 这次我一共定制了100多张明信片（见文章头图），<del>目测足够送了，即使真的不够我会再去打印</del>（我反悔了，改成送完为止），所以<strong>理论上</strong>所有（手快的）人都能收到。</p><p><del>除了极少数基友我有预留，其他任何人都可以通过<a href="http://weibo.com/anotherhome" target="_blank" rel="noopener">微博私信</a>、QQ、微信、<a href="mailto:diy.d.god@gmail.com">邮件</a>、<a href="https://telegram.me/DIYgod" target="_blank" rel="noopener">Telegram</a> 等方式告诉我你的<strong>真实姓名、昵称、地址（住址必须具体到门牌号，学校必须具体到班级）和邮编</strong>，待我确认（方式如下）之后，你就等着明信片一路翻山越岭去找你吧。</del></p><p>&nbsp;</p><h3 id="Q-我怎么知道你看到了我的明信片申请？"><a href="#Q-我怎么知道你看到了我的明信片申请？" class="headerlink" title="Q: 我怎么知道你看到了我的明信片申请？"></a>Q: 我怎么知道你看到了我的明信片申请？</h3><p><strong>A:</strong> 我会在文章的最后更新确认列表（只写昵称），预计人会很多，所以申请3天后还未看到你的昵称请再次跟我联系。</p><p>&nbsp;</p><h3 id="Q-我什么时候才能收到你的明信片？"><a href="#Q-我什么时候才能收到你的明信片？" class="headerlink" title="Q: 我什么时候才能收到你的明信片？"></a>Q: 我什么时候才能收到你的明信片？</h3><p><strong>A:</strong> 少则半个月，多则一辈子。</p><p>&nbsp;</p><h3 id="Q-你用什么快递？"><a href="#Q-你用什么快递？" class="headerlink" title="Q: 你用什么快递？"></a>Q: 你用什么快递？</h3><p><strong>A:</strong> <a href="https://zh.wikipedia.org/wiki/%E6%98%8E%E4%BF%A1%E7%89%87" target="_blank" rel="noopener">明信片 - 维基百科</a>。</p><p>&nbsp;</p><h3 id="Q-可以多给我几张么？"><a href="#Q-可以多给我几张么？" class="headerlink" title="Q: 可以多给我几张么？"></a>Q: 可以多给我几张么？</h3><p><strong>A:</strong> 可以，多于一张的部分请按照一张100元的价格<a href="https://www.anotherhome.net/donate" target="_blank" rel="noopener">微信或支付宝转账</a>。</p><p>&nbsp;</p><h3 id="Q-我不喜欢明信片，你可以送我别的东西么？"><a href="#Q-我不喜欢明信片，你可以送我别的东西么？" class="headerlink" title="Q: 我不喜欢明信片，你可以送我别的东西么？"></a>Q: 我不喜欢明信片，你可以送我别的东西么？</h3><p><strong>A:</strong> 不可以。</p><p>&nbsp;</p><h3 id="Q-你只送明信片，是不是因为你穷？"><a href="#Q-你只送明信片，是不是因为你穷？" class="headerlink" title="Q: 你只送明信片，是不是因为你穷？"></a>Q: 你只送明信片，是不是因为你穷？</h3><p><strong>A:</strong> 是，欢迎<a href="https://www.anotherhome.net/donate" target="_blank" rel="noopener">微信或支付宝转账</a>。</p><p>&nbsp;</p><h3 id="Q-你刚才说你给了某些人预留，是不是有肮脏的-py-交易？"><a href="#Q-你刚才说你给了某些人预留，是不是有肮脏的-py-交易？" class="headerlink" title="Q: 你刚才说你给了某些人预留，是不是有肮脏的 py 交易？"></a>Q: 你刚才说你给了某些人预留，是不是有肮脏的 py 交易？</h3><p><strong>A:</strong> …</p>]]></content>
      <categories>
        <category>事件簿</category>
      </categories>
  </entry>
  <entry>
    <title>版权狗退散 — 仿知乎复制文本自带版权声明</title>
    <url>/2298/</url>
    <content><![CDATA[<h3 id="什么鬼？"><a href="#什么鬼？" class="headerlink" title="什么鬼？"></a>什么鬼？</h3><p>版权狗退散，妈妈再也不用担心我被侵权了（其实只防君子不防小人）。</p><p>类似知乎，在网站复制长度大于42的文本时自动加上这样的版权声明：</p><p>著作权归作者所有。<br>商业转载请联系作者获得授权，非商业转载请注明出处。<br>作者：DIYgod<br>链接：<a href="https://www.anotherhome.net/" target="_blank" rel="noopener">https://www.anotherhome.net/</a><br>来源：Anotherhome</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ul><li><p>监听copy事件</p></li><li><p>使用 window.getSelection() 获取选中的文本</p></li><li><p>使用 clipboardData.setData 操作剪贴板的内容<a id="more"></a></p></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.addEventListener(<span class="string">'copy'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.getSelection().toString() &amp;amp;&amp;amp; <span class="built_in">window</span>.getSelection().toString().length &amp;gt; <span class="number">42</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        setClipboardText(e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        alert(<span class="string">'商业转载请联系作者获得授权，非商业转载请注明出处，谢谢合作。'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setClipboardText</span>(<span class="params">event</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> clipboardData = event.clipboardData || <span class="built_in">window</span>.clipboardData;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (clipboardData) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        event.preventDefault();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">var</span> htmlData = <span class="string">''</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            + <span class="string">'著作权归作者所有。&amp;lt;br&amp;gt;'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            + <span class="string">'商业转载请联系作者获得授权，非商业转载请注明出处。&amp;lt;br&amp;gt;'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            + <span class="string">'作者：DIYgod&amp;lt;br&amp;gt;'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            + <span class="string">'链接：'</span> + <span class="built_in">window</span>.location.href + <span class="string">'&amp;lt;br&amp;gt;'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            + <span class="string">'来源：Anotherhome&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            + <span class="built_in">window</span>.getSelection().toString();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">var</span> textData = <span class="string">''</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            + <span class="string">'著作权归作者所有。\n'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            + <span class="string">'商业转载请联系作者获得授权，非商业转载请注明出处。\n'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            + <span class="string">'作者：DIYgod\n'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            + <span class="string">'链接：'</span> + <span class="built_in">window</span>.location.href + <span class="string">'\n'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            + <span class="string">'来源：Anotherhome\n\n'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            + <span class="built_in">window</span>.getSelection().toString();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        clipboardData.setData(<span class="string">'text/html'</span>, htmlData);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        clipboardData.setData(<span class="string">'text/plain'</span>,textData);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h3 id="已知问题"><a href="#已知问题" class="headerlink" title="已知问题"></a>已知问题</h3><p>iOS Safari 不兼容 clipboardData.setData() 方法，所以在 iOS Safari 上无效</p><h3 id="知乎原版"><a href="#知乎原版" class="headerlink" title="知乎原版"></a>知乎原版</h3><p>另附知乎原版关键代码，原理类似，感兴趣也可以看看：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> lz = <span class="function"><span class="keyword">function</span> (<span class="params">a, b, c</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">d</span>(<span class="params">a, b</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> [<span class="string">"著作权归作者所有。"</span>, <span class="string">"商业转载请联系作者获得授权，非商业转载请注明出处。"</span>, <span class="string">"作者："</span> + b, <span class="string">"链接："</span> + a, <span class="string">"来源：知乎"</span>, <span class="string">""</span>, <span class="string">""</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">a, b, c</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="string">"\x3cdiv\x3e"</span> + d(b, c).join(<span class="string">"\x3cbr /\x3e"</span>) + a + <span class="string">"\x3c/div\x3e"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">g</span>(<span class="params">a</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">var</span> g = z.Wq(), m = g &amp;amp;&amp;amp; (<span class="number">0</span>, z.ib)(g.Ed());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (m &amp;amp;&amp;amp; !(<span class="number">42</span> &amp;gt; m.length)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> (<span class="string">"object"</span> === <span class="keyword">typeof</span> a.originalEvent.clipboardData &amp;amp;&amp;amp; (a.originalEvent.clipboardData.setData(<span class="string">"text/html"</span>, f(g.Of(), b, c)), a.originalEvent.clipboardData.setData(<span class="string">"text/plain"</span>, d(b, c).join(<span class="string">"\n"</span>) + m), <span class="number">0</span> &amp;lt; a.originalEvent.clipboardData.getData(<span class="string">"text/plain"</span>).length)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                a.preventDefault();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">return</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> (<span class="built_in">window</span>.getSelection) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                a = g.Of();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">var</span> n = (<span class="number">0</span>, <span class="built_in">window</span>.$)(f(a, b, c)).css(&#123;<span class="attr">position</span>: <span class="string">"fixed"</span>, <span class="attr">left</span>: <span class="string">"-9999px"</span>&#125;).appendTo(<span class="string">"body"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="built_in">window</span>.getSelection().selectAllChildren(n.get(<span class="number">0</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">                (<span class="number">0</span>, <span class="built_in">window</span>.setTimeout)(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    g.select();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    n.remove()</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;, <span class="number">200</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    a &amp;amp;&amp;amp; b &amp;amp;&amp;amp; c &amp;amp;&amp;amp; (z.Fa(b, <span class="string">"http"</span>) || (b = <span class="built_in">window</span>.location.protocol + <span class="string">"//"</span> + <span class="built_in">window</span>.location.host + b), a.on(<span class="string">"copy"</span>, g))</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>分享境</category>
      </categories>
  </entry>
  <entry>
    <title>APlayer - 送给小狐狸和小兔子的 HTML5 播放器</title>
    <url>/2167/</url>
    <content><![CDATA[<p>小狐狸和小兔子是很好很好的朋友。</p><p>一起散步的时候,不巧遇到了猎人。</p><p>他们转身就跑,都希望猎人更容易发现自己。</p><p>小狐狸跑进了蒲公英群，白色的蒲公英漫天飞起。</p><p>小兔子逃进玫瑰花园，红色的玫瑰花瓣散落一地。</p><p>从此失散在彼此的世界里。</p><p>幸运的是，后来，小狐狸遇到了小王子，小兔子遇见了爱丽丝。</p><p>&nbsp;</p><p><strong>GitHub项目主页（喜欢就给个star吧~）：</strong></p><p><a href="https://github.com/DIYgod/APlayer" target="_blank" rel="noopener">https://github.com/DIYgod/APlayer</a></p><p><strong>Demo：</strong></p><p><a href="https://www.anotherhome.net/file/APlayer/" target="_blank" rel="noopener">https://www.anotherhome.net/file/APlayer/</a></p><p><strong>GitHub Trending（热门榜）第8位截图留念2333：</strong><a id="more"></a></p><p><img src="/images/APlayerTrending.png" alt=""></p>]]></content>
      <categories>
        <category>创作集</category>
      </categories>
  </entry>
  <entry>
    <title>我藏好了哦</title>
    <url>/2153/</url>
    <content><![CDATA[<p><img src="/images/titlehide.png" alt=""></p><p>在 <a href="http://853.bronya.net/" target="_blank" rel="noopener">Sonic 853</a> 看到的神奇的一幕，一颗赛艇，果断扒来水一贴</p><p><strong>原作者：</strong><a href="http://chitanda.me/" target="_blank" rel="noopener">成天不高兴的栗山未来</a></p><p><strong>什么鬼：</strong>离开和进入页面时改变title</p><p><strong>原理：</strong></p><p>使用了HTML5的Page Visibility API</p><p>目前页面可见性API有两个属性，一个事件，如下：</p><p>document.hidden: Boolean值，表示当前页面可见还是不可见</p><p>document.visibilityState: 返回当前页面的可见状态，取值有 hidden visible prerender preview</p><p>visibilitychange: 当可见状态改变时候触发的事件</p><p>以前只知道可以通过 iframe + onblur/onfocus事件 来检测页面可见性，有了这个 API 真是方便优雅了很多啊</p><p><strong>代码：</strong><a id="more"></a></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> OriginTitile = <span class="built_in">document</span>.title;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> titleTime;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'visibilitychange'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.hidden) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">document</span>.title = <span class="string">'(つェ⊂)我藏好了哦~ '</span> + OriginTitile;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        clearTimeout(titleTime);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">document</span>.title = <span class="string">'(*´∇｀*) 被你发现啦~ '</span> + OriginTitile;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        titleTime = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="built_in">document</span>.title = OriginTitile;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;, <span class="number">2000</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>分享境</category>
      </categories>
  </entry>
  <entry>
    <title>论 IFTTT 的正确食用姿势</title>
    <url>/2125/</url>
    <content><![CDATA[<h3 id="什么是IFTTT"><a href="#什么是IFTTT" class="headerlink" title="什么是IFTTT"></a>什么是IFTTT</h3><p>官网：<a href="https://ifttt.com" target="_blank" rel="noopener">https://ifttt.com</a></p><p>这是一个2011年在美国上线的网站，IFTTT 是 <em>If This Then That</em> 的缩写。通俗的来讲，IFTTT 的作用就是如果触发了一件事，则执行设定好的另一件事。</p><p><img src="/images/ifttt.png" alt=""></p><p>结合上图，Recipes 的目的是打通 「this」 和 「that」 两个网络服务，网络服务在这里称为 Channels (频道)，前者称为 Trigger Channel (触发器频道)，后者称为 Action Channel (动作频道)，当触发器频道满足触发条件，那么就会执行动作频道指定的动作。</p><p>所以，IFTTT 创建一个「Recipes 流程」的流程如下：选择一个触发器频道，设置它的触发条件，再选择一个动作频道，然后设置它要执行的动作，OK，这样就搞定了。</p><p>比如我设置了这样一个Recipes：</p><p><img src="/images/ifttt1.png" alt=""></p><p>整个Recipe的意思是 _”<strong>If</strong> new feed item from <a href="https://www.anotherhome.net/feed" target="_blank" rel="noopener">https://www.anotherhome.net/feed</a>, <strong>then</strong> publish a post to @DIYgod酱”_。</p><p>这样等我这篇文章发布之后，一条微博就会自动发送了。</p><p>然而还没完，我还有两个涉及微博的 Recipes：<a id="more"></a><img src="/images/ifttt2.png" alt=""></p><p>不出意外的话我的 Facebook 和 Twitter 马上都会出现这篇文章的推送。</p><h4 id="IFTTT可以做什么"><a href="#IFTTT可以做什么" class="headerlink" title="IFTTT可以做什么"></a>IFTTT可以做什么</h4><p>目前 IFTTT 所支持的 Channels 也算比较丰富了，如 Feed (RSS)、GitHub、微博、印象笔记、Dropbox、邮件、SMS、Gmail、Instagram、Pocket、WordPress、OneDrive、OneNote、Twitter、Facebook、天气预报等等，总数多达230多个。它们之中大多数既可以当触发器，也能作为动作来使用的。</p><p><img src="/images/ifttt3.png" alt=""></p><p>这里要吐槽一下，230 多个频道里只有一个中国应用，新浪微博，可想国内应用有多么小气，“诶，我干嘛要提供接口哇，你把你的服务接到我的平台里就好了”，诺，大家都是这么想的。</p><p>另外得益于发布的 Android 版以及 iOS 版的客户端，现在 IFTTT 的频道里不仅仅是一些互联网服务了，它还新增了诸如等手机的联系人、照片、短信、地理位置、通知推送等「频道」，这让 IFTTT 变得更加的实用。</p><h3 id="IFTTT的有趣玩法"><a href="#IFTTT的有趣玩法" class="headerlink" title="IFTTT的有趣玩法"></a>IFTTT的有趣玩法</h3><p>这是一个很酷且具有高自由度的服务，你可以利用它做很多很多有趣的事情。而且虽然国内很多服务没有开放API，但我们可以用 RSS 让很多事情变成可能。</p><ul><li><p><a href="https://ifttt.com/connect/weather/if_notifications" target="_blank" rel="noopener">明天下雨/下雪/低于0摄氏度/高于35摄氏度，给我发一条iOS系统通知</a></p></li><li><p>如果<a href="https://ifttt.com/connect/facebook/dropbox" target="_blank" rel="noopener">在Facebook上标记</a>、<a href="https://ifttt.com/connect/instagram/dropbox" target="_blank" rel="noopener">在Instagram上点了“喜欢”一张照片</a>，则保存到Dropbox相应文件夹</p></li><li><p><a href="https://ifttt.com/recipes/98759-save-all-your-gmail-attachments-to-dropbox" target="_blank" rel="noopener">如果有人给我发了一封带附件的Gmail，则把附件保存在Dropbox</a></p></li><li><p>YouTube上喜欢了一个视频，则<a href="https://ifttt.com/connect/youtube/facebook" target="_blank" rel="noopener">分享到Facebook</a>、 <a href="https://ifttt.com/connect/youtube/twitter" target="_blank" rel="noopener">Twitter</a>上并且<a href="https://ifttt.com/connect/youtube/evernote" target="_blank" rel="noopener">保存链接到印象笔记</a></p></li><li><p><a href="https://ifttt.com/recipes/140665-organize-screenshots-in-an-ios-photo-album" target="_blank" rel="noopener">把手机截图图片自动归类到“截图”相册中</a></p></li><li><p><a href="https://ifttt.com/connect/ios_photos/dropbox" target="_blank" rel="noopener">每当添加一张照片时，把照片上传到Dropbox</a></p></li><li><p><a href="https://ifttt.com/connect/google_calendar/ios_reminders" target="_blank" rel="noopener">当添加一个Google Calendar 事件时，添加一个同样的iPhone 日历事件</a></p></li><li><p>每天晚上提醒我睡觉</p></li></ul><p>&nbsp;</p><p>另外IFTTT 网站上也有很多网友分享出来的 Recipes 可以供你参考或直接使用。</p><h3 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h3><ul><li><p><a href="http://www.zhihu.com/topic/19607376" target="_blank" rel="noopener">IFTTT - 热门问答 - 知乎</a></p></li><li><p><a href="http://sspai.com/25270" target="_blank" rel="noopener">触发你的智能生活：IFTTT 入门 - 少数派</a></p></li><li><p><a href="http://www.iplaysoft.com/ifttt.html" target="_blank" rel="noopener">iFTTT 入门介绍与简单使用设置教程 - 让互联网服务更加智能自动化地为你工作！ | 异次元软件下载</a></p></li><li><p><a href="http://mp.weixin.qq.com/s?__biz=MzA3NDYwMjk5NQ==&amp;mid=204868306&amp;idx=1&amp;sn=f6f78d5858b6f50cc3c32886b2b74cb3&amp;scene=2&amp;from=timeline&amp;isappinstalled=0#rd" target="_blank" rel="noopener">你不知道这个叫IFTTT的东西到底有多好玩</a></p></li></ul>]]></content>
      <categories>
        <category>分享境</category>
      </categories>
  </entry>
  <entry>
    <title>《JavaScript高级程序设计》读书笔记</title>
    <url>/2073/</url>
    <content><![CDATA[<p>莎士比亚曾经说过：“好记性不如烂笔头。”</p><h2 id="第一章-JavaScript简介"><a href="#第一章-JavaScript简介" class="headerlink" title="第一章 JavaScript简介"></a>第一章 JavaScript简介</h2><h3 id="1-1-JavaScript简史"><a href="#1-1-JavaScript简史" class="headerlink" title="1.1 JavaScript简史"></a>1.1 JavaScript简史</h3><h3 id="1-2-JavaScript实现"><a href="#1-2-JavaScript实现" class="headerlink" title="1.2 JavaScript实现"></a>1.2 JavaScript实现</h3><ol><li><p>一个完整的JavaScript实现应该由三个不同的部分组成：核心（ECMAScript）、文档对象模型（DOM）、浏览器对象模型（BOM）。</p></li><li><p>ECMAScript：提供核心语言功能；DOM：提供访问和操作网页内容的方法和接口；BOM：提供与浏览器交互的方法和接口。</p></li></ol><h3 id="1-3-JavaScript版本"><a href="#1-3-JavaScript版本" class="headerlink" title="1.3 JavaScript版本"></a>1.3 JavaScript版本</h3><p>&nbsp;</p><h2 id="第二章-在HTML中使用JavaScript"><a href="#第二章-在HTML中使用JavaScript" class="headerlink" title="第二章 在HTML中使用JavaScript"></a>第二章 在HTML中使用JavaScript</h2><h3 id="2-1-script元素"><a href="#2-1-script元素" class="headerlink" title="2.1 script元素"></a>2.1 script元素</h3><ol><li><p>标签的位置：为了避免浏览器在呈现页面时出现明显的延迟，现代Web应用程序一般都把全部JavaScript引用放在&lt;body&gt;元素中页面内容的后面。</p></li><li><p>延迟脚本：defer属性表明脚本在执行时不会影响页面的构造，脚本会被延迟到整个页面都解析完毕后再运行；只适用于外部脚本文件。</p></li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span>=<span class="string">"defer"</span> <span class="attr">src</span>=<span class="string">"example.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></pre></td></tr></table></figure><ol start="3"><li>异步脚本：async属性表示当前脚本不必等待其他脚本，也不必阻塞文档呈现，告诉浏览器立即下载文件，且并不保证标记为async的脚本按照他们的先后顺序执行；只适用于外部脚本文件。</li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">"example1.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">"example2.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></pre></td></tr></table></figure><h3 id="2-2-嵌入代码与外部文件"><a href="#2-2-嵌入代码与外部文件" class="headerlink" title="2.2 嵌入代码与外部文件"></a>2.2 嵌入代码与外部文件</h3><h3 id="2-3-文档模式"><a href="#2-3-文档模式" class="headerlink" title="2.3 文档模式"></a>2.3 文档模式</h3><ol start="4"><li>混杂模式与标准模式；开启标准模式：</li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML 5 --&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span></pre></td></tr></table></figure><h3 id="2-4-noscript元素"><a href="#2-4-noscript元素" class="headerlink" title="2.4 noscript元素"></a>2.4 noscript元素</h3><p>&nbsp;</p><h2 id="第三章-基本概念"><a href="#第三章-基本概念" class="headerlink" title="第三章 基本概念"></a>第三章 基本概念</h2><h3 id="3-1-语法"><a href="#3-1-语法" class="headerlink" title="3.1 语法"></a>3.1 语法</h3><ol><li><p>区分大小写：ECMAScript中的一切都区分大小写。</p></li><li><p>严格模式：在严格模式下，ECMAScript 3 中的一些不确定的行为将得到处理，而且对某些不安全的操作也会抛出错误。在顶部添加如下代码：</p></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">"use strict"</span></span></pre></td></tr></table></figure><h3 id="3-2-关键字和保留字"><a href="#3-2-关键字和保留字" class="headerlink" title="3.2 关键字和保留字"></a>3.2 关键字和保留字</h3><h3 id="3-3-变量"><a href="#3-3-变量" class="headerlink" title="3.3 变量"></a>3.3 变量</h3><ol start="3"><li>给未经声明的变量赋值在严格模式下会导致抛出 ReferenceError 错误。</li></ol><h3 id="3-4-数据类型"><a href="#3-4-数据类型" class="headerlink" title="3.4 数据类型"></a>3.4 数据类型</h3><ol start="4"><li><p>typeof操作符，用来检测变量的数据类型。</p></li><li><p>5种简单数据类型：Undefined、Null、Boolean、Number、String；1种复杂数据类型（引用类型）：Object。</p></li></ol><ul><li><p>Undefined类型：使用var声明变量但未对其加以初始化时，这个变量的值就是undefined。</p></li><li><p>Null类型：null值表示一个空对象指针；只要意在保存对象的变量还没有真正保存对象，就应该明确地让该变量保存null值。</p></li><li><p>Boolean类型：其他类型转换为Boolean类型，使用函数Boolean()。</p></li><li><p>Number类型：其他类型转换为Number类型，常用函数parseInt()，转换字符串时，如果第一个字符不是数字字符或者负号，会返回NaN，第二个参数可选，表示进制</p></li><li><p>String类型：字符串是不可变的；其他类型转换为String类型，使用函数toString()或String()或加一个空字符串（1+’’）。</p></li><li><p>Object类型</p></li></ul><p>创建对象的方法：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span></pre></td></tr></table></figure><p>创建Object对象的实例并为其添加属性或方法，就可以创建自定义对象；</p><p>Object类型是所有它的实例的基础，具有下列属性和方法：</p><ul><li><p>constructor：保留着用于创建当前对象的函数即构造函数；</p></li><li><p>hasOwnProperty(propertyName)：用于检查给定的属性在当前对象实例中是否存在；</p></li><li><p>isPrototypeOf(object)：用于检查传入的对象是否是传入对象的原型；</p></li><li><p>propertyIsEnumerable()；toLocaleString()；</p></li><li><p>toString()：返回对象的字符串表示；</p></li><li><p>valueOf()：返回对象的字符串、数值或布尔值表示；</p></li></ul><h3 id="3-5-操作符"><a href="#3-5-操作符" class="headerlink" title="3.5 操作符"></a>3.5 操作符</h3><ol start="6"><li>在比较字符串时，实际比较的是两个字符串中对应位置的每个字符的字符编码值。</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">"23"</span> &lt; <span class="string">"3"</span>   <span class="comment">// true</span></span></pre></td></tr></table></figure><ol start="7"><li><p>在比较数值和字符串时，字符串都会被被转换成数值，然后再以数值方式与另一个数值比较；如果不能转换成数值，就转换成NaN。</p></li><li><p>任何操作数与NaN进行比较，结果都是false。</p></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="literal">NaN</span> == <span class="literal">NaN</span>  <span class="comment">// false</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="literal">NaN</span> === <span class="literal">NaN</span>  <span class="comment">// false</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="literal">NaN</span> &amp;gt; <span class="literal">NaN</span>  <span class="comment">// false</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="literal">NaN</span> &amp;lt; <span class="literal">NaN</span>  <span class="comment">// false</span></span></pre></td></tr></table></figure><ol start="9"><li>相等（==） 全等（===）：全等只在两个操作数未经转换就相等的情况下返回true。</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">"55"</span> == <span class="number">55</span>  <span class="comment">// true</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">"55"</span> === <span class="number">55</span>  <span class="comment">// false</span></span></pre></td></tr></table></figure><ol start="10"><li>条件操作符</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">variable = boolean_expression ? true_value : false_value;</span></pre></td></tr></table></figure><h3 id="3-6-语句"><a href="#3-6-语句" class="headerlink" title="3.6 语句"></a>3.6 语句</h3><ol start="11"><li>由于ECMAScript中不存在块级作用域，因此在循环内部定义的变量也可以在外部访问到：</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &amp;lt; <span class="number">10</span>; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">var</span> j = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(i, j);  <span class="comment">// 10 1</span></span></pre></td></tr></table></figure><ol start="12"><li>for-in 语句可以用来枚举对象的属性。</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (property <span class="keyword">in</span> expression) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  ...</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><ol start="13"><li>break 和 continue 语句与 label 语句联合使用：多发生在循环嵌套的情况下。</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">outermost:</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &amp;lt; <span class="number">10</span>; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &amp;lt; <span class="number">10</span>; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (i == <span class="number">5</span> &amp;amp;&amp;amp; j ==<span class="number">5</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">break</span> outermost;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		num++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(num);  <span class="comment">// 55</span></span></pre></td></tr></table></figure><h3 id="3-7-函数"><a href="#3-7-函数" class="headerlink" title="3.7 函数"></a>3.7 函数</h3><ol start="14"><li>函数参数：参数在内部是用一个数组来表示的，函数接收到的始终都是这个数组，而不关心数组中包含哪些函数；通过arguments对象来访问这个参数数组；命名的参数只提供便利，但不是必需的；arguments对象中的值与对应的命名参数的内存空间是独立的，但它们的值会同步。</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params">name, age</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">console</span>.log(<span class="string">'arguments:'</span>, <span class="built_in">arguments</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">console</span>.log(<span class="string">'name:'</span>, name, <span class="string">'age:'</span>, age);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	name = <span class="string">'DIYgod'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">0</span>]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">example(<span class="string">'Anotherhome'</span>, <span class="string">'556'</span>, <span class="string">'www.anotherhome.net'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// arguments: ["Anotherhome", "556", "www.anotherhome.net"]</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// name: Anotherhome age: 556</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// DIYgod</span></span></pre></td></tr></table></figure><p>&nbsp;</p><h2 id="第四章-变量、作用域和内存问题"><a href="#第四章-变量、作用域和内存问题" class="headerlink" title="第四章 变量、作用域和内存问题"></a>第四章 变量、作用域和内存问题</h2><h3 id="4-1-基本类型和引用类型的值"><a href="#4-1-基本类型和引用类型的值" class="headerlink" title="4.1 基本类型和引用类型的值"></a>4.1 基本类型和引用类型的值</h3><ol><li>在操作对象时，实际上是在操作对象的引用而不是实际的对象。</li></ol><p>2.从一个变量向另一个变量复制基本类型的值时，会创建这个值的一个副本；从一个变量向另一个变量复制引用类型的值时，复制的是指向存储在堆中的一个对象的指针，复制之后两个变量指向同一个对象。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o1 = &#123;&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o2 = o1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">o1.name = <span class="string">'DIYgod'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(o2.name);  <span class="comment">// DIYgod</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> n1 = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> n2 = n1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">n1 = <span class="number">2</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(n2);  <span class="comment">// 1</span></span></pre></td></tr></table></figure><ol start="3"><li>传递参数：参数只能按值传递，参数为对象时，在函数内部访问的是同一个对象。</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setName</span>(<span class="params">o</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	o.name = <span class="string">'DIYgod'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	o = &#123;&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	o.name = <span class="string">'Anotherhome'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p = &#123;&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">setName(p);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(p.name);  <span class="comment">// DIYgod</span></span></pre></td></tr></table></figure><ol start="4"><li>确定一个值是哪种基本类型可以使用typeof操作符，而确定一个值是哪种引用类型可以使用instanceof操作符。</li></ol><h3 id="4-2-执行环境及作用域"><a href="#4-2-执行环境及作用域" class="headerlink" title="4.2 执行环境及作用域"></a>4.2 执行环境及作用域</h3><ol start="5"><li><p>执行环境有全局执行环境和函数执行环境之分；每个执行环境都有一个与之关联的变量对象；每次进入一个新执行环境，都会创建一个用于搜索变量和函数的作用域链，作用链的前端是当前执行的代码所在的变量环境，最后一个对象是全局执行环境的变量对象。</p></li><li><p>查询标识符：从作用域链的前端开始，向上逐级查询，找到后搜索结果停止，没有找到则一直追溯到全局环境的变量对象。</p></li></ol><h3 id="4-3-垃圾回收"><a href="#4-3-垃圾回收" class="headerlink" title="4.3 垃圾回收"></a>4.3 垃圾回收</h3><ol start="7"><li><p>最常用的垃圾搜集方式是标记清除：垃圾回收器在运行时会给存储在内存中的所有变量都加上标记，然后去掉环境中的变量以及被环境中的变量引用的变量的标记，而在此之后还有标记的变量被视为准备删除的变量，因为这些变量无法被访问到了。</p></li><li><p>优化内存占用：为执行中的代码只保存必要的数据；一旦数据不再有用，最好通过将其值设置为null来释放其引用——解除引用；解除引用的作用是让其值脱离执行环境，以便垃圾搜集器下次运行时将其回收。</p></li></ol><p>&nbsp;</p><h2 id="第五章-引用类型"><a href="#第五章-引用类型" class="headerlink" title="第五章 引用类型"></a>第五章 引用类型</h2><h3 id="5-1-Object类型"><a href="#5-1-Object类型" class="headerlink" title="5.1 Object类型"></a>5.1 Object类型</h3><ol><li>创建Object实例：使用Object构造函数；对象字面量。</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// new 操作符法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o1 = <span class="keyword">new</span> <span class="built_in">Object</span>();</span></pre></td></tr><tr><td class="code"><pre><span class="line">o1.name = <span class="string">'DIYgod'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">o1.age = <span class="number">20</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 对象字面量表示法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o1 = &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  name: <span class="string">'DIYgod'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  age: <span class="number">20</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><ol start="2"><li>访问对象属性：点表示法；方括号表示法。建议使用点表示法。</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 点表示法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(o.name);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 方括号表示法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(o[<span class="string">'name'</span>]);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="string">'name'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(o[n]);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(o[<span class="string">'first name'</span>];</span></pre></td></tr></table></figure><h3 id="5-2-Array类型"><a href="#5-2-Array类型" class="headerlink" title="5.2 Array类型"></a>5.2 Array类型</h3><ol start="3"><li>创建数组：使用Array构造函数；使用数组字面量表示法。</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a1 = <span class="keyword">new</span> <span class="built_in">Array</span>();</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a2 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">20</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a3 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">'red'</span>, <span class="string">'blue'</span>, <span class="string">'green'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a4 = [];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a5 = [<span class="string">'red'</span>, <span class="string">'blue'</span>, <span class="string">'green'</span>];</span></pre></td></tr></table></figure><ol start="4"><li>利用length在末尾添加新项。</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">'a'</span>, <span class="string">'b'</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">a[a.length] = <span class="string">'c'</span>;</span></pre></td></tr></table></figure><ol start="5"><li><p>检测数组：Array.isArray()（解决了存在两个以上全局执行环境时instanceof检测结果出错的情况）。</p></li><li><p>栈方法和队列方法：push()添加一项到数组末尾；pop()移除数组末尾一项；shift()移除数组第一项；unshift()；添加一项到数组前端。</p></li><li><p>重排序</p></li></ol><ul><li><p>reverse()：反转数组项的顺序。</p></li><li><p>sort()：默认将数组项转换成字符串然后升序排列。可以接收一个比较函数作为参数。</p></li></ul><p>比较函数接收两个参数，如果第一个参数位于第二个参数之前则返回一个负数，相等则返回0，第二个参数位于第一个参数之前则返回一个负数。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">15</span>, <span class="number">10</span>, <span class="number">5</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">a.sort();</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a)  <span class="comment">// [0, 1, 10, 15, 5]</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params">value1, value2</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> value1 - value2;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">a.sort(compare);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a)  <span class="comment">// [0, 1, 5, 10, 15]</span></span></pre></td></tr></table></figure><ol start="8"><li>操作方法</li></ol><ul><li>concat()：添加项</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a1 = [<span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'blue'</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a2 = a1.concat(<span class="string">'yellow'</span>, [<span class="string">'black'</span>, <span class="string">'brown'</span>]);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a2)  <span class="comment">// ["red", "green", "blue", "yellow", "black", "brown"]</span></span></pre></td></tr></table></figure><ul><li>slice()：截取</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">"red"</span>, <span class="string">"green"</span>, <span class="string">"blue"</span>, <span class="string">"yellow"</span>, <span class="string">"black"</span>, <span class="string">"brown"</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a.slice(<span class="number">1</span>), a.slice(<span class="number">1</span>, <span class="number">4</span>))  <span class="comment">// ["green", "blue", "yellow", "black", "brown"] ["green", "blue", "yellow"]</span></span></pre></td></tr></table></figure><ul><li>splice()：删除插入替换</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">"red"</span>, <span class="string">"green"</span>, <span class="string">"blue"</span>, <span class="string">"yellow"</span>, <span class="string">"black"</span>, <span class="string">"brown"</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a.splice(<span class="number">2</span>, <span class="number">1</span>), a);  <span class="comment">// 删除项; ["blue"] ["red", "green", "yellow", "black", "brown"]</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a.splice(<span class="number">1</span>, <span class="number">0</span>, <span class="string">'yellow'</span>, <span class="string">'orange'</span>), a);  <span class="comment">// 插入项; [] ["red", "yellow", "orange", "green", "yellow", "black", "brown"]</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a.splice(<span class="number">1</span>, <span class="number">1</span>, <span class="string">'red'</span>, <span class="string">'purple'</span>), a);  <span class="comment">// 替换项; ["yellow"] ["red", "red", "purple", "orange", "green", "yellow", "black", "brown"]</span></span></pre></td></tr></table></figure><ol start="9"><li>位置方法：indexOf() lastIndexOf() 接收两个参数：要查找的项和（可选）查找起点位置的索引；indexOf()从前往后查找，lastIndexOf()从后往前查找；返回要查找的项的位置，没找到则返回-1。</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">"red"</span>, <span class="string">"purple"</span>, <span class="string">"orange"</span>, <span class="string">"green"</span>, <span class="string">"red"</span>, <span class="string">"yellow"</span>, <span class="string">"black"</span>, <span class="string">"brown"</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a.indexOf(<span class="string">'red'</span>));  <span class="comment">// 0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a.lastIndexOf(<span class="string">'red'</span>));  <span class="comment">// 4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a.indexOf(<span class="string">'red'</span>, <span class="number">1</span>));  <span class="comment">// 4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a.lastIndexOf(<span class="string">'red'</span>, <span class="number">1</span>));  <span class="comment">// 0</span></span></pre></td></tr></table></figure><ol start="10"><li>迭代方法：every() some() filter() map() forEach()。</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> everyResult = a.every(<span class="function"><span class="keyword">function</span> (<span class="params">item, index, array</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> (item &amp;gt; <span class="number">2</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(everyResult);  <span class="comment">// false</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> someResult = a.some(<span class="function"><span class="keyword">function</span> (<span class="params">item, index, array</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> (item &amp;gt; <span class="number">2</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(someResult);  <span class="comment">// true</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> filterResult = a.filter(<span class="function"><span class="keyword">function</span> (<span class="params">item, index, array</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> (item &amp;gt; <span class="number">2</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(filterResult);  <span class="comment">// [3, 4, 5, 4, 3]</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mapResult = a.map(<span class="function"><span class="keyword">function</span> (<span class="params">item, index, array</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> (item * <span class="number">2</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(mapResult);  <span class="comment">// [2, 4, 6, 8, 10, 8, 6, 4, 2]</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> forEachResult = a.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item, index, array</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">console</span>.log(item);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(forEachResult);  <span class="comment">// undefined</span></span></pre></td></tr></table></figure><ol start="11"><li>归并方法</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sum1 = a.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">prev, cur, index, array</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">console</span>.log(index);  <span class="comment">// 1 2 3 4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> prev + cur;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(sum1);  <span class="comment">// 9</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sum2 = a.reduceRight(<span class="function"><span class="keyword">function</span> (<span class="params">prev, cur, index, array</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">console</span>.log(index);  <span class="comment">// 3 2 1 0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> prev + cur;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(sum2);  <span class="comment">// 9</span></span></pre></td></tr></table></figure><h3 id="5-3-Date类型"><a href="#5-3-Date类型" class="headerlink" title="5.3 Date类型"></a>5.3 Date类型</h3><ol><li>创建日期对象：月份基于0（一月是0，二月是1…）。</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> d1 = <span class="keyword">new</span> <span class="built_in">Date</span>();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> d2 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2015</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">17</span>, <span class="number">55</span>, <span class="number">55</span>);  <span class="comment">// 2015年3月5日下午5点55分55秒</span></span></pre></td></tr></table></figure><ol start="2"><li>获取调用时的日期和时间和毫秒数，可以用来分析代码。</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> start = <span class="built_in">Date</span>.now();</span></pre></td></tr><tr><td class="code"><pre><span class="line">doSomething();</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> stop = <span class="built_in">Date</span>.now();</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> result = stop - start;</span></pre></td></tr></table></figure><ol start="3"><li>日期格式化方法：local表示以特定于地区的格式显示。</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> d2 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2015</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">17</span>, <span class="number">55</span>, <span class="number">55</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">d2.toString();  <span class="comment">// "Thu Mar 05 2015 17:55:55 GMT+0800 (CST)"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">d2.toDateString();  <span class="comment">// "Thu Mar 05 2015"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">d2.toTimeString();  <span class="comment">// "17:55:55 GMT+0800 (CST)"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">d2.toLocaleString();  <span class="comment">// "2015/3/5 下午5:55:55"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">d2.toLocaleDateString();  <span class="comment">// "2015/3/5"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">d2.toLocaleTimeString();  <span class="comment">// "下午5:55:55"</span></span></pre></td></tr></table></figure><h3 id="5-4-RegExp类型"><a href="#5-4-RegExp类型" class="headerlink" title="5.4 RegExp类型"></a>5.4 RegExp类型</h3><ol><li>创建一个正则表达式：</li></ol><p>pattern部分是正则表达式</p><p>flags，标志，标明正则表达式的行为：g 全局模式；i 不区分大小写；m 多行模式</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> exp1 = <span class="regexp">/ pattern /</span> flags</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> exp2 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'pattern'</span>, <span class="string">'flags'</span>);</span></pre></td></tr></table></figure><ol start="2"><li>实例方法：</li></ol><ul><li>exec()：返回第一个匹配项信息的数组，数组第一项是与整个模式匹配的字符串，其他项是与模式中的捕获组匹配的字符串；还包含两个额外的属性，index 和 input。</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> text = <span class="string">"I'm DIYgod, and this is Anotherhome"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> pattern = <span class="regexp">/and( this( is)?)?/gi</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> matches = pattern.exec(text);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(matches.index);  <span class="comment">// 12</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(matches.input);  <span class="comment">// I'm DIYgod, and this is Anotherhome</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(matches[<span class="number">0</span>]);  <span class="comment">// and this is</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(matches[<span class="number">1</span>]);  <span class="comment">//  this is</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(matches[<span class="number">2</span>]);  <span class="comment">//  is</span></span></pre></td></tr></table></figure><ul><li>test()：在模式与该参数匹配的情况下返回true，否则返回false。</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> text = <span class="string">"I'm DIYgod, and this is Anotherhome"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> pattern = <span class="regexp">/DIYgod/</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> matches = pattern.test(text);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(matches);  <span class="comment">// true</span></span></pre></td></tr></table></figure><ol start="3"><li>RegExp构造函数包含一些属性，适用于作用域中的所有正则表达式，记录一些最近一次正则表达式操作的信息。</li></ol><h3 id="5-5-Function类型"><a href="#5-5-Function类型" class="headerlink" title="5.5 Function类型"></a>5.5 Function类型</h3><ol><li>定义函数，函数实际上是 Function 类型的实例，因此函数也是对象。</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用函数声明语法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span> (<span class="params">n1, n2</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> n1 + n2;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 使用函数表达式</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> f2 = <span class="function"><span class="keyword">function</span> (<span class="params">n1, n2</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> n1 + n2;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 使用构造函数，不推荐</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> f3 = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'n1'</span>, <span class="string">'n2'</span>, <span class="string">'return n1 + n2'</span>);</span></pre></td></tr></table></figure><ol start="2"><li>函数名是一个指向函数对象的指针。</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span> (<span class="params">n1, n2</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> n1 + n2;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> f2 = f1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">f1 = <span class="literal">null</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(f2(<span class="number">1</span>, <span class="number">1</span>));  <span class="comment">// 2</span></span></pre></td></tr></table></figure><ol start="3"><li><p>ECMAScript中没有函数重载。</p></li><li><p>函数声明与函数表达式的区别：解释器会率先读取函数声明，并使其在执行任何代码之前可用（函数声明提升）；函数表达式必须等到解释器执行到它所在行才会真正被解释执行。</p></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(f1(<span class="number">1</span>, <span class="number">1</span>));  <span class="comment">// 2</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span> (<span class="params">n1, n2</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> n1 + n2;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(f2(<span class="number">1</span>, <span class="number">1</span>));  <span class="comment">// Uncaught TypeError: f2 is not a function</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> f2 = <span class="function"><span class="keyword">function</span>(<span class="params">n1, n2</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> n1 + n2;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><ol start="5"><li>函数内部属性</li></ol><ul><li>函数的arguments对象的callee属性：是一个指针，指向拥有这个arguments对象的函数。可以在递归时减小函数和函数名的耦合。</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 明显第二种写法更好一些</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial1</span> (<span class="params">num</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (num &amp;lt;= <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> num * factorial1(num - <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial2</span> (<span class="params">num</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (num &amp;lt;= <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> num * <span class="built_in">arguments</span>.callee(num - <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><ul><li>caller属性：保存着当前函数的函数的引用。</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	inner();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">console</span>.log(<span class="built_in">arguments</span>.callee.caller);  <span class="comment">// function outer()...</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">outer();</span></pre></td></tr></table></figure><ol start="6"><li>函数属性和方法</li></ol><ul><li>length属性：表示函数希望接收的命名参数的个数。</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span> (<span class="params">n1, n2</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> n1 + n2;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(f.length);  <span class="comment">// 2</span></span></pre></td></tr></table></figure><ul><li>apply() call()：用来改变函数的this对象的值。</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.color = <span class="string">'red'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	color: <span class="string">'blue'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayColor</span> (<span class="params">n1, n2</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>.color);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> n1 + n2;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">sayColor(<span class="number">1</span>, <span class="number">1</span>);  <span class="comment">// red</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">o.sayColor = sayColor;</span></pre></td></tr><tr><td class="code"><pre><span class="line">o.sayColor();  <span class="comment">// blue</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 使用call和apply可以消除对象与方法的耦合关系</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">sayColor.call(<span class="built_in">window</span>, <span class="number">1</span>, <span class="number">1</span>);  <span class="comment">// red</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">sayColor.call(o, <span class="number">1</span>, <span class="number">1</span>);  <span class="comment">// blue</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">sayColor.apply(<span class="built_in">window</span>, [<span class="number">1</span>, <span class="number">1</span>]);  <span class="comment">// red</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">sayColor.apply(o, [<span class="number">1</span>, <span class="number">1</span>]);  <span class="comment">// blue</span></span></pre></td></tr></table></figure><h3 id="5-6-基本包装类型"><a href="#5-6-基本包装类型" class="headerlink" title="5.6 基本包装类型"></a>5.6 基本包装类型</h3><p>Boolean类型、Number类型、String类型</p><p>暂时跳过</p><h3 id="5-7-单体内置对象"><a href="#5-7-单体内置对象" class="headerlink" title="5.7 单体内置对象"></a>5.7 单体内置对象</h3><p>Global对象、Math对象</p><p>暂时跳过</p><p>&nbsp;</p><h2 id="第六章-面向对象的程序设计"><a href="#第六章-面向对象的程序设计" class="headerlink" title="第六章 面向对象的程序设计"></a>第六章 面向对象的程序设计</h2><h3 id="6-1-理解对象"><a href="#6-1-理解对象" class="headerlink" title="6.1 理解对象"></a>6.1 理解对象</h3><ol><li>两种属性：数据属性和访问器属性。特性：描述属性的各种特征，是为了实现JavaScript引擎用的，不能直接访问。</li></ol><ul><li>数据属性，有4个特性：</li></ul><ul><li><p>[[Configurable]]：表示能否通过 delete 删除属性从而重新定义属性，能否修改属性的特性，能否把属性修改为访问器属性。</p></li><li><p>[[Enumerable]]：表示能否通过 for-in 循环返回属性。</p></li><li><p>[[Writeable]]：表示能否修改属性的值。</p></li><li><p>[[Value]]：包含这个属性的数据值。</p></li></ul><ul><li>访问器属性，有4个特性：</li></ul><ul><li><p>[[Configurable]]：表示能否通过 delete 删除属性从而重新定义属性，能否修改属性的特性，能否把属性修改为数据属性。</p></li><li><p>[[Enumerable]]：表示能否通过 for-in 循环返回属性。</p></li><li><p>[[Get]]：在读取属性时调用的函数。</p></li><li><p>[[Set]]：在写入属性时调用的函数。</p></li></ul><ol start="2"><li>定义及读取特性：Object.defineProperty() Object.defineProperties() Object.getOwnPropertyDescriptor()</li></ol><h3 id="6-2-创建对象"><a href="#6-2-创建对象" class="headerlink" title="6.2 创建对象"></a>6.2 创建对象</h3><ol><li>工厂模式：虽然解决了创建多个相似对象的问题，但却没有解决对象识别的问题。</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name, age, job</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span></pre></td></tr><tr><td class="code"><pre><span class="line">	o.name = name;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	o.age = age;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	o.job = job;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	o.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> o;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = createPerson(<span class="string">'DIYgod'</span>, <span class="number">20</span>, <span class="string">'Software Engineer'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p2 = createPerson(<span class="string">'Anotherhome'</span>, <span class="number">2</span>, <span class="string">'Website'</span>);</span></pre></td></tr></table></figure><ol start="2"><li>构造函数模式。（构造函数应该以大写字母开头）</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">this</span>.name = name;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">this</span>.age = age;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">this</span>.job = job;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">'DIYgod'</span>, <span class="number">20</span>, <span class="string">'Software Engineer'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person(<span class="string">'Anotherhome'</span>, <span class="number">2</span>, <span class="string">'Website'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// p1 p2 分别保存着 Person 的一个不同的实例，这两个对象都有一个 constructor 属性，该属性指向Person</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(p1.constructor);  <span class="comment">// function Person(name, age, job) &#123;...</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(p1 <span class="keyword">instanceof</span> <span class="built_in">Object</span>);  <span class="comment">// true</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(p1 <span class="keyword">instanceof</span> Person);  <span class="comment">// true</span></span></pre></td></tr></table></figure><p>这种方法会经历4个步骤：</p><ul><li><p>创建一个新对象</p></li><li><p>将构造函数的作用域赋给新对象（this指向这个新对象）</p></li><li><p>执行构造函数中的代码（为新对象添加属性）</p></li><li><p>返回新对象</p></li></ul><p>构造函数的问题：每个方法都要在每个实例上重新创建一遍。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(p1.sayName === p2.sayName);  <span class="comment">// false</span></span></pre></td></tr></table></figure><ol start="3"><li>原型模式：每个函数都有一个 prototype 属性，这个属性是一个指针，指向一个对象（函数的原型对象），这个对象包含可以由该类型的所有实例共享的属性和方法。</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 组合使用构造函数模式与原型模式</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">this</span>.name = name;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">this</span>.age = age;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">this</span>.job = job;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">'DIYgod'</span>, <span class="number">20</span>, <span class="string">'Software Engineer'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person(<span class="string">'Anotherhome'</span>, <span class="number">2</span>, <span class="string">'Website'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(p1.sayName === p2.sayName);  <span class="comment">// true</span></span></pre></td></tr></table></figure><ul><li>理解原型对象：</li></ul><ul><li><p>只要创建一个新函数，就会根据一组特定的规则为该函数创建一个 prototype 属性，指向原型对象</p></li><li><p>默认所有原型对象都会获得一个 constructor 属性，指向 prototype 属性所在函数</p></li><li><p>调用构造函数创建新实例后，实例将有一个 <strong>proto</strong> 属性，指向构造函数的原型对象，指针叫[[Prototype]]，默认原型指向Object</p></li><li><p>实例与构造函数没有直接关系</p></li><li><p>读取属性：搜索先从对象实例本身开始，如果没找到，搜索原型对象</p></li><li><p>使用 isPrototype() 来检测构造函数和实例之间是否有关系</p></li><li><p>使用 hasOwnProperty() 来检测属性存在于实例中还是原型中</p></li></ul><ul><li>原型与 in 操作符</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// in操作符会在通过对象能够访问到属性时返回true</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'name'</span> <span class="keyword">in</span> p1);  <span class="comment">// true</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 枚举属性</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> p1) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">console</span>.log(prop);  <span class="comment">// name age job sayName</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><ul><li>用对象字面量重写原型对象</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">Person.prototype = &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">constructor</span>: Person,  // 这里重写了prototype，不再默认有<span class="keyword">constructor</span>属性</span></pre></td></tr><tr><td class="code"><pre><span class="line">	name: 'DIYgod',</span></pre></td></tr><tr><td class="code"><pre><span class="line">	age: 20</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure><ol start="4"><li>动态原型模式、寄生构造函数模式、稳妥构造函数模式</li></ol><h3 id="6-3-继承"><a href="#6-3-继承" class="headerlink" title="6.3 继承"></a>6.3 继承</h3><ol start="5"><li>JavaScript中最常用的继承：组合继承。融合了原型链和构造函数的优点。</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params">name</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">this</span>.name = name;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">this</span>.color = [<span class="string">'red'</span>, <span class="string">'blue'</span>, <span class="string">'green'</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">SuperType.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params">name, age</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	SuperType.call(<span class="keyword">this</span>, name);  <span class="comment">// 借用构造函数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">this</span>.age = age;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">SubType.prototype = <span class="keyword">new</span> SuperType();  <span class="comment">// 原型链</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">SubType.prototype.constructor = SubType;  <span class="comment">// construcotr在上一句中被重写</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">SubType.prototype.sayAge = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>.age);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> SubType(<span class="string">'DIYgod'</span>, <span class="number">20</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">instance.sayName();  <span class="comment">// DIYgod</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">instance.sayAge();  <span class="comment">// 20</span></span></pre></td></tr></table></figure><ol start="6"><li>确定原型和实例的关系。接上例：</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(instance <span class="keyword">instanceof</span> SuperType);  <span class="comment">// true</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(SuperType.prototype.isPrototypeOf(instance));  <span class="comment">// true</span></span></pre></td></tr></table></figure><ol start="7"><li>原型式继承、寄生式继承、寄生组合式继承</li></ol><h2 id="第七章-函数表达式"><a href="#第七章-函数表达式" class="headerlink" title="第七章 函数表达式"></a>第七章 函数表达式</h2><h3 id="7-1-递归"><a href="#7-1-递归" class="headerlink" title="7.1 递归"></a>7.1 递归</h3><h3 id="7-2-闭包"><a href="#7-2-闭包" class="headerlink" title="7.2 闭包"></a>7.2 闭包</h3><ol><li><p>闭包是有权访问另一个函数作用域中的变量的函数。</p></li><li><p>（作用域链见4.2）在外部函数内部定义的内部函数将包含外部函数的活动对象添加到它的作用域中；外部函数执行完毕后，其活动对象不会被销毁，因为内部函数的作用域链仍然在引用这个活动对象；外部函数执行完毕后，内部函数仍然可以访问到其定义的所有变量。</p></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">var</span> name = <span class="string">'DIYgod'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">console</span>.log(name);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> inner = outer();</span></pre></td></tr><tr><td class="code"><pre><span class="line">inner();  <span class="comment">// DIYgod</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">inner = <span class="literal">null</span>;  <span class="comment">// 解除对outer内部的匿名函数的引用，以便释放内存</span></span></pre></td></tr></table></figure><ol start="3"><li>闭包只能取得包含函数中任何变量的最后一个值。</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFunction</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">var</span> result = [];</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &amp;lt; <span class="number">10</span>; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		result[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">return</span> i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> result;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(createFunction()[<span class="number">0</span>]());  <span class="comment">// 10</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(createFunction()[<span class="number">1</span>]());  <span class="comment">// 10</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 返回的都是同一个变量i</span></span></pre></td></tr></table></figure><ol start="4"><li>匿名函数的this通常会指向window。</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'The Window'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> object = &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	name: <span class="string">'My Object'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">	getNameFunc: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">return</span> <span class="keyword">this</span>.name;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(object.getNameFunc()());  <span class="comment">// The Window</span></span></pre></td></tr></table></figure><h3 id="7-3-模仿块级作用域"><a href="#7-3-模仿块级作用域" class="headerlink" title="7.3 模仿块级作用域"></a>7.3 模仿块级作用域</h3><ol start="5"><li>用匿名函数来模仿块级作用域：第一个括号的作用是将函数声明转换成函数表达式（函数声明不能通过后面加括号来调用），第二个括号来调用这个函数。</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">var</span> i = <span class="number">9</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">console</span>.log(i);  <span class="comment">// 9</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)();</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(i);  <span class="comment">// Uncaught ReferenceError: i is not defined</span></span></pre></td></tr></table></figure><h3 id="7-4-静态对象"><a href="#7-4-静态对象" class="headerlink" title="7.4 静态对象"></a>7.4 静态对象</h3><ol start="6"><li><p>任何在函数中定义的变量，都可以认为是私有变量。</p></li><li><p>有权访问私有变量和私有函数的公有方法称为特权方法。</p></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyObject</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="comment">// 私有变量和私有函数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">var</span> privateVariable = <span class="string">'DIYgod'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">privateFunction</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">console</span>.log(<span class="string">'lalala'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="comment">// 特权方法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">this</span>.publicMethod = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">console</span>.log(privateVariable);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		privateFunction();</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> MyObject();</span></pre></td></tr><tr><td class="code"><pre><span class="line">o.publicMethod();  <span class="comment">// DIYgod lalala</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">o.privateFunction();  <span class="comment">// Uncaught TypeError: o.privateFunction is not a function</span></span></pre></td></tr></table></figure><p>…</p><h2 id="第十三章-事件"><a href="#第十三章-事件" class="headerlink" title="第十三章 事件"></a>第十三章 事件</h2><h3 id="13-1事件流"><a href="#13-1事件流" class="headerlink" title="13.1事件流"></a>13.1事件流</h3><ol><li><p>事件冒泡：事件开始时由最具体的元素接收，然后逐级向上传播到较为不具体的节点；IE9、FireFox、Chrome 和 Safari 将事件一直冒泡到 window 对象。</p></li><li><p>事件捕获：由于老版本的浏览器不支持，因此很少有人使用事件捕获。</p></li><li><p>“DOM2级事件”规定的事件流包括三个阶段：事件捕获阶段、处于目标阶段和事件冒泡阶段。</p></li></ol><h3 id="13-2-事件处理程序"><a href="#13-2-事件处理程序" class="headerlink" title="13.2 事件处理程序"></a>13.2 事件处理程序</h3><ol start="4"><li>HTML事件处理程序：扩展作用域，在函数内部可以像访问局部变量一样访问document及该元素本身的成员，栗子：</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&amp;lt;input type=<span class="string">"button"</span> value=<span class="string">"Click Me"</span> onclick=<span class="string">"alert(value)"</span>&amp;gt;</span></pre></td></tr></table></figure><p>如果是一个表单输入元素，则作用域中还会包含访问表单元素的入口，栗子：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&amp;lt;form method=<span class="string">"post"</span>&amp;gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &amp;lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span> value=<span class="string">""</span>&amp;gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &amp;lt;input type=<span class="string">"button"</span> value=<span class="string">"Echo username"</span> onclick=<span class="string">"alert(username.value)"</span>&amp;gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&amp;lt;<span class="regexp">/form&amp;gt;</span></span></pre></td></tr></table></figure><p>缺点：①存在时差问题，解析函数之前就触发事件会引发错误 ②扩展处理程序的作用域链在不同浏览器中会导致不同结果 ③导致HTML和JavaScript代码紧密耦合。</p><ol start="5"><li>DOM0级事件处理程序</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 绑定事件处理程序</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'myButton'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>.id);    <span class="comment">// myButton</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 删除事件处理程序</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">btn.onclick = <span class="literal">null</span>;</span></pre></td></tr></table></figure><p>以这种方式添加的事件处理程序会在事件流的冒泡阶段被处理。</p><ol start="6"><li>DOM2级事件处理程序</li></ol><p>addEventListener() 和 removeEventListener()</p><p>三个参数：要处理的事件名、作为事件处理程序的函数、在捕获阶段调用函数(true)还是在冒泡阶段调用函数(false，默认)</p><p>好处是可以添加多个事件处理程序，使用 addEventListener 添加的事件处理程序只能使用 removeEventListener移除，匿名函数无法移除。</p><ol start="7"><li>IE事件处理程序</li></ol><p>attachEvent() 和 detachEvent()</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'myButton'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">btn.attachEvent(<span class="string">'onclick'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span> === <span class="built_in">window</span>);    <span class="comment">// myButton</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure><p>以这种方式添加的事件处理程序会在事件流的冒泡阶段被处理。</p><h3 id="13-3-事件对象"><a href="#13-3-事件对象" class="headerlink" title="13.3 事件对象"></a>13.3 事件对象</h3><ol start="8"><li><p>在触发DOM上的某个事件时，会产生一个事件对象event，这个对象包含着所有与事件有关的信息。只有在事件处理程序执行期间，event对象才会存在，一旦事件处理程序执行完成，event对象就会被销毁。</p></li><li><p>属性/方法：</p></li></ol><p>currentTarget：正在处理事件的那个元素</p><p>target：事件的目标</p><p>type：事件类型</p><p>cancelable：可以阻止特定事件的默认行为</p><p>preventDefault()：阻止特定事件的默认行为</p><p>stopPropagation()：停止事件在DOM层次中的传播，即取消进一步的事件捕获或冒泡</p><p>eventPhase：事件出于事件流的阶段 捕获阶段为1 处于目标对象为2 冒泡阶段为3</p><h3 id="13-4-事件类型"><a href="#13-4-事件类型" class="headerlink" title="13.4 事件类型"></a>13.4 事件类型</h3><ol start="10"><li>UI事件、焦点事件、鼠标事件、滚轮事件、文本事件、键盘事件、合成事件、变动事件。</li></ol><p>&nbsp;</p><p>…</p><h2 id="第二十一章-Ajax与Comet"><a href="#第二十一章-Ajax与Comet" class="headerlink" title="第二十一章 Ajax与Comet"></a>第二十一章 Ajax与Comet</h2><h3 id="21-1-XMLHttpRequest对象"><a href="#21-1-XMLHttpRequest对象" class="headerlink" title="21.1 XMLHttpRequest对象"></a>21.1 XMLHttpRequest对象</h3><ol><li>用法</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></pre></td></tr><tr><td class="code"><pre><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (xhr.readState === <span class="number">4</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (xhr.status &amp;gt;= <span class="number">200</span> &amp;amp;&amp;amp; xhr.status &amp;lt; <span class="number">300</span> || xhr.status === <span class="number">304</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">console</span>.log(xhr.responseText);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">console</span>.log(<span class="string">'Request was unsuccessful: '</span> + xhr.status);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">xhr.open(<span class="string">'get'</span>, <span class="string">'example.php'</span>, <span class="literal">true</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">xhr.send(<span class="literal">null</span>);</span></pre></td></tr></table></figure><ul><li><p>创建XHR对象：new XMLHttpRequest();</p></li><li><p>open()：启动一个请求以备发送；3个参数：请求类型、请求的URL、是否异步发送请求（同步必须等到服务器响应后再继续执行）；不会真正发送请求。</p></li><li><p>send()：发送请求；1个参数：发送的数据；不需要发送数据则必须传入null。</p></li><li><p>XHR对象的属性：</p></li></ul><ul><li><p>responseText 返回的文本</p></li><li><p>status 响应的HTTP状态。</p></li></ul><ul><li>HTTP状态码：</li></ul><ul><li><p>2xx 成功</p></li><li><p>3xx 重定向，304 Not Modified 表示请求的资源没有被修改，可以直接用浏览器中缓存的版本，302 Found 表示请求的资源现在临时从不同的URI响应请求</p></li><li><p>4xx 客户端错误，403 Forbidden，404 Not Found</p></li><li><p>5xx 服务器错误，500 Internal Server Error，503 Service Unavailable。</p></li></ul><ul><li>XHR的readyState属性：</li></ul><ul><li><p>0：未初始化</p></li><li><p>1：启动，已调用open()</p></li><li><p>2：发送，已调用send()</p></li><li><p>3：接收到部分响应数据</p></li><li><p>4：接收到全部响应数据</p></li></ul><ul><li>readystatechange事件：readystate属性的值由一个值变成另一个值，都会触发readystatechange事件。</li></ul><h3 id="21-4-跨域资源共享"><a href="#21-4-跨域资源共享" class="headerlink" title="21.4 跨域资源共享"></a>21.4 跨域资源共享</h3><ol><li><p>CORS：使用自定义的HTTP头部让浏览器与服务器进行沟通，从而决定请求或响应是应该成功还是应该失败。IE中要使用XDR对象实现，其他浏览器XHR对象原生支持。</p></li><li><p>图像Ping：只能发送GET请求；无法访问服务器的响应文本。</p></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span></pre></td></tr><tr><td class="code"><pre><span class="line">img.onload = img.onerror = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">console</span>.log(<span class="string">'Done!'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">img.src = <span class="string">'http://api.hitokoto.us/rand?encode=jsc'</span>;</span></pre></td></tr></table></figure><ol start="3"><li>JSONP：两部分组成 回调函数和数据。</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myCallBack</span> (<span class="params">data</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">console</span>.log(data.hitokoto);  <span class="comment">// 像平常的你一样引发奇迹吧-</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">script.src = <span class="string">'http://api.hitokoto.us/rand?encode=jsc&amp;amp;fun=myCallBack'</span>;  <span class="comment">// 返回一个包含在函数调用中的JSON，调用了myCallBack函数：myCallBack(&#123;"hitokoto":"...","author":"...",....&#125;);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.insertBefore(script, <span class="built_in">document</span>.body.firstChild);</span></pre></td></tr></table></figure><p>缺点：安全性不可靠；不容易判断请求失败。</p><p>&nbsp;</p><p>&nbsp;</p><p>To Be Continued…</p>]]></content>
      <categories>
        <category>创作集</category>
      </categories>
  </entry>
  <entry>
    <title>百度前端技术学院编码挑战（TASK 0004）</title>
    <url>/2024/</url>
    <content><![CDATA[<p>任务4（最终挑战）已经发布，任务deadline是6月10日至6月30日。</p><p>TASK 0004 内容：<a href="https://github.com/baidu-ife/ife/tree/master/task/task0004" target="_blank" rel="noopener">https://github.com/baidu-ife/ife/tree/master/task/task0004</a></p><p>我做的：<a href="https://github.com/DIYgod/ife-work/tree/master/task0004" target="_blank" rel="noopener">https://github.com/DIYgod/ife-work/tree/master/task0004</a></p><p>在线Demo： <a href="https://www.anotherhome.net/file/ife/task0004" target="_blank" rel="noopener">https://www.anotherhome.net/file/ife/task0004</a></p><p>本次任务断断续续花费了20天（5.20-6.9）的时间。</p><p>下面是我做 TASK 0004 过程中的一些记录。<a id="more"></a></p><hr><h3 id="移动端适配"><a href="#移动端适配" class="headerlink" title="移动端适配"></a>移动端适配</h3><p>“往前推2到3年，前端工程师还在忧心忡忡地想，移动互联网时代下，前端是不是没有生存空间了。但今天一看，在我们团队，前端工程师超过一半的工作都是在做移动端的Web或者APP的开发。移动Web或者APP在技术本质上是和做桌面端Web没有本质区别，但是移动端的坑那是非常的多，通过学习这部分内容，让你成为一名桌面移动通吃的前端开发工程师。”</p><p>要求整个产品为SPA，刚开始完全没思路，看了两天AngularJS，最后还是决定自己实现。</p><p>参考Gmail：</p><p><img src="/images/task0004_1.jpg" alt=""> <img src="/images/task0004_2.jpg" alt=""></p><p>切换到另一个锚点的时候，只显示这个锚点对应的部分，其他部分用 display:none 隐藏起来。但是没看懂具体是怎么实现的。在console里执行 <code>location.href = &#39;#mn&#39;;</code> 也可以自动修改display，说明是绑定了锚点而不是通过点击事件来切换的。</p><p>李胜菊苣告诉我是它通过监听url实现，类似MVC中的路由。感觉自己实现起来挺困难的。。。但是想到了另外一种方法，简单地说就是利用CSS3里的target伪类，demo如下：</p><p>See the Pen <a href="http://codepen.io/DIYgod/pen/jPMgre/" target="_blank" rel="noopener">jPMgre</a> by DIYgod (<a href="http://codepen.io/DIYgod" target="_blank" rel="noopener">@DIYgod</a>) on <a href="http://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><script src="//assets.codepen.io/assets/embed/ei.js" async></script><p>于是再改改CSS，就轻松实现了移动端的适配。</p><p><img src="/images/task0004_3.png" alt=""> <img src="/images/task0004_4.png" alt=""> <img src="/images/task0004_5.png" alt=""></p><p><img src="/images/task0004_6.png" alt=""></p><p>又是李胜菊苣带我飞，通过分析张鑫旭菊苣的Mobilebone框架（<a href="http://www.mobilebone.org/" target="_blank" rel="noopener">官网</a>），我找到了更好的实现，以上实现作废23333。</p><p>原理是这样的：切换锚点时会触发onhashchange事件，所以我就在onhashchange事件上绑定了一个函数，这个函数会记录切换前的锚点和切换后的锚点，通过判断前后锚点来做相应的动作，在切换过程中会给子页面加上 slide out in reverse 中的某几个class，通过这几个class实现滑动效果，具体实现见下面的CSS部分，切换完成后隐藏不需要显示的子页面和清除之前加上的class。就这样。</p><p>JS部分：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 滑动效果 */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onhashchange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> newHash = location.hash;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> oldEle = $(<span class="string">'.'</span> + oldHash.substr(<span class="number">1</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> newEle = $(<span class="string">'.'</span> + newHash.substr(<span class="number">1</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> ((oldHash == <span class="string">'#type'</span> &amp;amp;&amp;amp; newHash == <span class="string">'#task'</span>) || (oldHash == <span class="string">'#task'</span> &amp;amp;&amp;amp; newHash == <span class="string">'#details'</span>) ) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        oldEle.className += <span class="string">' slide out'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        newEle.className += <span class="string">' slide in'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        newEle.style.display = <span class="string">'block'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        oldEle.style.display = <span class="string">'block'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            newEle.style.display = <span class="string">'block'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            oldEle.style.display = <span class="string">'none'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            oldEle.className = oldEle.className.replace(<span class="regexp">/ slide out/</span>, <span class="string">''</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            newEle.className = newEle.className.replace(<span class="regexp">/ slide in/</span>, <span class="string">''</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;, <span class="number">225</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ((oldHash == <span class="string">'#task'</span> &amp;amp;&amp;amp; newHash == <span class="string">'#type'</span>) || (oldHash == <span class="string">'#details'</span> &amp;amp;&amp;amp; newHash == <span class="string">'#task'</span>)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        newEle.className += <span class="string">' slide reverse in'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        oldEle.className += <span class="string">' slide reverse out'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        oldEle.style.display = <span class="string">'block'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        newEle.style.display = <span class="string">'block'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            oldEle.style.display = <span class="string">'none'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            newEle.style.display = <span class="string">'block'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            newEle.className = newEle.className.replace(<span class="regexp">/ slide reverse in/</span>, <span class="string">''</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            oldEle.className = oldEle.className.replace(<span class="regexp">/ slide reverse out/</span>, <span class="string">''</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;, <span class="number">225</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    oldHash = newHash;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>CSS部分：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 滑动效果 from mobilebone */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="selector-class">.slide</span><span class="selector-class">.out</span>, <span class="selector-class">.slide</span><span class="selector-class">.in</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attribute">animation-timing-function</span>: ease-out;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attribute">animation-duration</span>: <span class="number">225ms</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="selector-class">.slide</span><span class="selector-class">.in</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attribute">animation-name</span>: slideinfromright;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="selector-class">.slide</span><span class="selector-class">.out</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attribute">animation-name</span>: slideouttoleft;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="selector-class">.slide</span><span class="selector-class">.reverse</span><span class="selector-class">.out</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attribute">animation-name</span>: slideouttoright;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="selector-class">.slide</span><span class="selector-class">.reverse</span><span class="selector-class">.in</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attribute">animation-name</span>: slideinfromleft;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/* keyframes for slidein from sides */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">@-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> slideinfromright &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="selector-tag">from</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="attribute">-webkit-transform</span>: <span class="built_in">translate3d</span>(100%, 0, 0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="selector-tag">to</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="attribute">-webkit-transform</span>: <span class="built_in">translate3d</span>(0, 0, 0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">@<span class="keyword">keyframes</span> slideinfromright &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="selector-tag">from</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translateX</span>(100%);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="selector-tag">to</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translateX</span>(0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">@-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> slideinfromleft &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="selector-tag">from</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="attribute">-webkit-transform</span>: <span class="built_in">translate3d</span>(-100%, 0, 0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="selector-tag">to</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="attribute">-webkit-transform</span>: <span class="built_in">translate3d</span>(0, 0, 0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">@<span class="keyword">keyframes</span> slideinfromleft &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="selector-tag">from</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-100%);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="selector-tag">to</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translateX</span>(0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/* keyframes for slideout to sides */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">@-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> slideouttoleft &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="selector-tag">from</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="attribute">-webkit-transform</span>: <span class="built_in">translate3d</span>(0, 0, 0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="selector-tag">to</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="attribute">-webkit-transform</span>: <span class="built_in">translate3d</span>(-100%, 0, 0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">@<span class="keyword">keyframes</span> slideouttoleft &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="selector-tag">from</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translateX</span>(0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="selector-tag">to</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-100%);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">@-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> slideouttoright &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="selector-tag">from</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="attribute">-webkit-transform</span>: <span class="built_in">translate3d</span>(0, 0, 0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="selector-tag">to</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="attribute">-webkit-transform</span>: <span class="built_in">translate3d</span>(100%, 0, 0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">@<span class="keyword">keyframes</span> slideouttoright &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="selector-tag">from</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translateX</span>(0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="selector-tag">to</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translateX</span>(100%);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>更新：实测这种方法在Safari下表现并不好。</p><p>再更新：补充上面：这种方法在貌似在移动端的Safari表现并不好，但在Mac端的Safari表现正常。</p><p>&nbsp;</p><h3 id="CSS-Processing"><a href="#CSS-Processing" class="headerlink" title="CSS Processing"></a>CSS Processing</h3><p>“CSS语言由于其自身语言设计的问题，加上一些浏览器兼容性问题，往往会使得我们在写它的时候，要写很多冗余代码，或者为了兼容性对同一个样式设定写好几遍。针对这些问题，诞生了CSS预处理和后处理的概念及相关方法、工具。</p><p>这些工具和方法帮助我们能够更加高效地书写可维护性更强的CSS代码。”</p><p>经过调研，我最后决定使用更广泛的Less。</p><p>根据慕课网教程（<a href="http://www.imooc.com/learn/102" target="_blank" rel="noopener">less即学即用</a>）整理的Less思维导图：<img src="/images/less.png" alt=""></p><p>CSS部分重构完毕，终于可以复用了，DRY (Don’t repeat yourself)。</p><p>另外结合Grunt使用autoprefixer处理浏览器前缀，简直不能再爽。</p><p>&nbsp;</p><h3 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h3><p>“安全是大家经常容易忽视，但其实一旦出现影响会非常大的问题，尤其对于没有经历过企业开发，或者没有踩过坑的同学，如果等到公司工作，做实际项目后非常容易发生安全问题。”</p><p>现有程序存在漏洞，比如在任务内容里输入以下内容然后保存，就会执行我们自定义的script脚本。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">javascript:alert(</span>'<span class="attr">xss</span>');<span class="attr">height</span>=<span class="string">0</span> <span class="attr">width</span>=<span class="string">0</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span></pre></td></tr></table></figure><p>或</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"1"</span> <span class="attr">onerror</span>=<span class="string">eval(</span>"\<span class="attr">x61</span>\<span class="attr">x6c</span>\<span class="attr">x65</span>\<span class="attr">x72</span>\<span class="attr">x74</span>\<span class="attr">x28</span>\<span class="attr">x27</span>\<span class="attr">x78</span>\<span class="attr">x73</span>\<span class="attr">x73</span>\<span class="attr">x27</span>\<span class="attr">x29</span>")&gt;</span></span></pre></td></tr></table></figure><p>所以要简单做下 XSS 防护：</p><p>大多数情况对用户的输入进行处理，只允许输入合法的值，其它值一概过滤掉。然而更进一步的话，可以对标签进行转换。</p><p>对输入的内容做Html encode处理：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">htmlEncode</span>(<span class="params">str</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> str.replace(<span class="regexp">/&amp;amp;/g</span>, <span class="string">"&amp;amp;amp;"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">              .replace(<span class="regexp">/&lt;/g</span>, <span class="string">"&amp;lt;"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">              .replace(<span class="regexp">/&gt;/g</span>, <span class="string">"&amp;gt;"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">              .replace(<span class="regexp">/"/g</span>, <span class="string">"&amp;amp;quot;"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">              .replace(<span class="regexp">/'/g</span>, <span class="string">"&amp;amp;#x27;"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">              .replace(<span class="regexp">/\//g</span>, <span class="string">"&amp;amp;#x2f;"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">              .replace(<span class="regexp">/\n/g</span>, <span class="string">"&lt;br&gt;"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>比如用户输入：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">javascript:alert(</span>'<span class="attr">xss</span>');<span class="attr">height</span>=<span class="string">0</span> <span class="attr">width</span>=<span class="string">0</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span></pre></td></tr></table></figure><p>保存后最终存储的会是：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">javascript:alert(&amp;amp;#x27;xss&amp;amp;#x27;);height</span>=<span class="string">0</span> <span class="attr">width</span>=<span class="string">0</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span></pre></td></tr></table></figure><p>之后在展现时浏览器会对这些字符转换成文本内容显示，而不是一段可执行的代码。</p><p>另外自带SSL加成2333</p><p>&nbsp;</p><h3 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h3><p>“在自己做一些小项目时，可能是学校的一些网站项目，流量可能日均都不超过500，而且大多是校园局域网内访问；或者是开发一些实验室的MIS系统，这辈子你都不会去使用你开发的这个系统。在这样一些项目中，性能优化往往会被你忽略。</p><p>但是如果你是做一个日均PV数万、数十万、甚至更大的量级，开发的页面会被全国各地，不同网络条件的用户来进行访问。这个时候，性能问题就无法忽视了。在当今的网络条件下，如果你的页面3秒都无法完成首屏渲染，一定会让你的网站流失很多用户。</p><p>整个网站的性能优化有很多的环节和工作，大多数时候，不是前端工程师单独就能完成的，尤其在职能划分明确的公司中，往往需要前后端、运维、DBA等多个职位协同完成。所以，在我们的课程中，主要让你了解整个性能优化都涉及哪些方面的工作，同时，我们会专注介绍一些在前端领域可以重点关注的技术点。”</p><p>&nbsp;</p><h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3><p>“对于一个复杂项目，特别是多人协作的复杂项目，如何合理划分模块，如何更加方便地进行模块加载，如何管理模块之间的依赖，是一个项目团队都会面临的问题，目前业界已经有了一些较为普遍的解决方案，如AMD。这个部分希望你能够通过学习JavaScript的模块化，学习如何合理地规划项目模块，合理使用模块化工具来优化你的项目代码结构。”</p><p>经过调研，我决定使用RequireJS来实现。</p><p>将JS的引用方式改成这样</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"scripts/require.js"</span> <span class="attr">data-main</span>=<span class="string">"scripts/main"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></pre></td></tr></table></figure><p>再改写下JS，把JS分为四个模块：主模块 gtd util selector。但总感觉分得不太好。。。只能准备答辩时候问下导师了。</p><p>其中遇到了一个问题：</p><p>有这样一个HTML结构</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        div &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            height: 100px;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            width: 100px;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-id">#eee</span>;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            margin: 10px;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">"myClick();"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">"myClick();"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">"myClick();"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/main.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></pre></td></tr></table></figure><p>对其进行模块化改造之后，显而易见的myClick不会再是全局函数，所以无法这样调用。</p><p>于是我尝试在模块里进行click事件绑定：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">var</span> myDiv = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; myDiv.length; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            myDiv[i].addEventListener(<span class="string">'click'</span>, myClick(myDiv[i]));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        myDiv[<span class="number">0</span>].click();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">myClick</span>(<span class="params">ele</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ele.innerHTML = ele.innerHTML + <span class="string">'click'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        init: init</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure><p>然而喜闻乐见地绑定错了，你们肯定看出来了，但是我当时没看出来，而且由于第5行那句间接调用了myClick(myDiv[i])，让我误以为是第10行调用的结果（这只是个Demo，当时的情况比这个复杂一些，这两句调用的结果的确差不多）。</p><p>这样的结果就是click绑定的函数在模块内可以调用（误以为），但在页面中点击却没反应。</p><p>然后我自作聪明地进行了一番推理：click事件绑定的myClick函数不是全局函数，只在模块内有效，而在页面中点击时会在全局调用myClick函数，所以没反应。</p><p>看似有道理却不是这样的，<a href="https://www.v2ex.com/t/196957" target="_blank" rel="noopener">在V2EX发帖询问</a>之后，热心网友 <a href="http://7anshuai.js.org/" target="_blank" rel="noopener">7anshuai</a> 看出了绑定有误的问题。。</p><p>然后改成这样就好了：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">var</span> myDiv = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; myDiv.length; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            myDiv[i].addEventListener(<span class="string">'click'</span>, myClick);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        myDiv[<span class="number">0</span>].click();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">myClick</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.innerHTML = <span class="keyword">this</span>.innerHTML + <span class="string">'click'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        init: init</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure><p>期间我还尝试过在模块里主动将函数暴露在全局空间里，像这样：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.myClick = myClick;</span></pre></td></tr></table></figure><p>虽然有效，但真是烂爆了，幸亏没就这样算了。。。</p><p>&nbsp;</p><p><strong>6. 前端工程化</strong></p><p>“业界目前有非常多的前端开发工具，完成一些开发过程中可以自动化完成的工作，提高研发效率，并且可以提高多人协作时的开发过程一致性，提高整个项目的运维效率。”</p><p>经过调研，最终决定采用 Yeoman, Bower, Grunt 三个工具结合来进行工程化改造。</p><p>根据慕课网教程（<a href="http://www.imooc.com/learn/30" target="_blank" rel="noopener">Grunt-beginner前端自动化工具</a>）整理的思维导图：<img src="/images/grunt.png" alt=""></p><p>用 Yeoman 新建一个 webapp 项目（需翻墙），安装其他需要的包，改改配置文件，然后就可以享受各种自动化工具带来的无比高效、震撼的体验啦~</p><p>我这里主要对代码做了 less编译 处理CSS前缀 HTML、CSS、JS压缩 文件名添加md5值 这几个处理，其中处理前的文件在app文件夹，处理后的文件在disk文件夹。</p><p>&nbsp;</p><p>Done，等待毕业答辩喽~</p>]]></content>
      <categories>
        <category>创作集</category>
      </categories>
  </entry>
  <entry>
    <title>百度前端技术学院编码挑战（TASK 0003）</title>
    <url>/1989/</url>
    <content><![CDATA[<p>任务3已经发布，初级班的任务时间是从5月7日至5月18日，中级班为4月30日至5月10日。</p><p>TASK 0003 内容：<a href="https://github.com/baidu-ife/ife/tree/master/task/task0003" target="_blank" rel="noopener">https://github.com/baidu-ife/ife/tree/master/task/task0003</a></p><p>我做的：<a href="https://github.com/DIYgod/ife-work/tree/master/task0003" target="_blank" rel="noopener">https://github.com/DIYgod/ife-work/tree/master/task0003</a></p><p>在线Demo： <a href="https://www.anotherhome.net/file/ife/task0003/" target="_blank" rel="noopener">https://www.anotherhome.net/file/ife/task0003/</a></p><p>本次任务累计花费时间10天（5.6-5.16 ）</p><p>下面是我做 TASK 0003 过程中的一些记录。<a id="more"></a></p><hr><p><strong>1. JavaScript作用域</strong> （参考 <a href="http://www.laruence.com/2009/05/28/863.html" target="_blank" rel="noopener">鸟哥：Javascript作用域原理</a> <a href="http://www.cnblogs.com/lhb25/archive/2011/09/06/javascript-scope-chain.html" target="_blank" rel="noopener">理解 JavaScript 作用域和作用域链</a>）</p><p>JavaScript中的函数运行在它们被定义的作用域里,而不是它们被执行的作用域里。</p><p>JS 是有预编译的过程的, JS在执行每一段JS代码之前, 都会首先处理var关键字和function定义式(函数定义式和函数表达式)。<br>在调用函数执行之前, 会首先创建一个活动对象, 然后搜寻这个函数中的局部变量定义,和函数定义, 将变量名和函数名都做为这个活动对象的同名属性, 对于局部变量定义,变量的值会在真正执行的时候才计算, 此时只是简单的赋为undefined。</p><p>对代码优化的启示：</p><p>从作用域链的结构可以看出，在运行期上下文的作用域链中，标识符所在的位置越深，读写速度就会越慢。因为全局变量总是存在于运行期上下文作用域链的最末端，因此在标识符解析的时候，查找全局变量是最慢的。所以，在编写代码的时候应尽量少使用全局变量，尽可能使用局部变量。一个好的经验法则是：如果一个跨作用域的对象被引用了一次以上，则先把它存储到局部变量里再使用。</p><p>例如下面的代码：</p><pre class="lang:default decode:true">function changeColor(){
    document.getElementById("btnChange").onclick=function(){
        document.getElementById("targetCanvas").style.backgroundColor="red";
    };
}</pre><p>这个函数引用了两次全局变量document，查找该变量必须遍历整个作用域链，直到最后在全局对象中才能找到。这段代码可以重写如下：</p><pre class="lang:default decode:true">function changeColor(){
    var doc=document;
    doc.getElementById("btnChange").onclick=function(){
        doc.getElementById("targetCanvas").style.backgroundColor="red";
    };
}</pre><p>这段代码比较简单，重写后不会显示出巨大的性能提升，但是如果程序中有大量的全局变量被从反复访问，那么重写后的代码性能会有显著改善。</p><p>&nbsp;</p><p><strong>2. 高度自适应</strong> （参考 <a href="http://www.cnblogs.com/2050/archive/2012/07/30/2615260.html" target="_blank" rel="noopener">CSS布局奇淫技巧之-高度自适应</a>）</p><p>高度自适应不像宽度自适应那样简单，在兼容浏览器方面也稍微复杂一些。</p><p>然而直接写 height: 100%; 并没有什么卵用，要这样做：</p><pre class="lang:default decode:true">position: absolute;
top: 60px;
bottom: 0;</pre><p>&nbsp;</p><p><strong>3. 莫名其妙出现又莫名其妙自己消失的空隙</strong></p><p>事情是这样的，昨天（5月12日）页面一切正常，今天早上起床后并没改动代码，刷新了一下页面，页面居然变了，设置 overflow: scroll CSS属性的元素右侧和下侧都出现了空隙，如图所示：<img src="/images/task0003_1.png" alt=""></p><p><img src="/images/task0003_2.png" alt=""></p><p>而如果把overflow: scroll属性去掉空隙就消失。测试 Chrome Safari 均出现了这种情况，而且尝试了清空缓存，无解。于是将此时的代码commit并push到了github。</p><p>到了下午，同一标签页，同一页面，刷新，bug自己消失了，而此时代码与上午相比只有很少且无关紧要的改动，再次commit并push到github（所有改动<a href="https://github.com/DIYgod/ife-work/commit/df0e0bf051852bb1e4593c6dae3ff11cfa9c34ce" target="_blank" rel="noopener">在github有记录</a>），再次截图：<img src="/images/task0003_3.png" alt=""></p><p>注意：两次出现变化后都尝试测试了Chrome和Safari浏览器并清空了缓存。</p><p>到此为止毫无头绪并无法重现，实在没办法再深究下去。</p><p>猜测是Mac的Bug。</p><p>&nbsp;</p><p><strong>4. JavaScript对象与JSON文本的相互转换</strong> （参考 <a href="http://blog.csdn.net/yaerfeng/article/details/7292000" target="_blank" rel="noopener">JavaScript对象与JSON字符串的相互转换</a> <a href="http://www.w3cschool.cc/json/json-tutorial.html" target="_blank" rel="noopener">JSON 教程 - W3CSCHOOL</a>）</p><p>eval函数：JSON文本转换为JavaScript对象；调用JavaScript编辑器；非常快速，但可能会出现安全性问题</p><pre class="lang:js decode:true">var obj = eval('(' + JSONTest + ')');</pre><p>使用JSON解析器：</p><p>JSON.parse 函数：将JSON文本转换为JavaScript对象</p><pre class="lang:js decode:true">JSON.parse(text[, reviver])</pre><p>JSON.stringify 函数：将JavaScript对象转换为JSON文本</p><pre class="lang:js decode:true">JSON.stringify(value[, replacer[, space]])</pre><p>&nbsp;</p><p><strong>5. textarea 和 input 大小比预期大了一些</strong></p><p>多谢<a href="http://www.lishengcn.cn/" target="_blank" rel="noopener">李胜</a>的帮助</p><p>这个问题其实很简单但我没想到，刚开始挺莫名其妙的，如下：</p><p>See the Pen <a href="http://codepen.io/DIYgod/pen/RPaJpb/" target="_blank" rel="noopener">RPaJpb</a> by DIYgod (<a href="http://codepen.io/DIYgod" target="_blank" rel="noopener">@DIYgod</a>) on <a href="http://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><script src="//assets.codepen.io/assets/embed/ei.js" async></script><p>问题是textarea和input比设置的宽度多了6px，强迫症看了浑身难受。实际上是因为这两个元素有默认的 2px padding和 1px border，在这两个元素的CSS部分加上</p><pre class="lang:default decode:true">padding: 0;
border: 0;</pre><p>或者更优雅一些</p><pre class="lang:default decode:true">-webkit-box-sizing: border-box;
-moz-box-sizing: border-box;
box-sizing: border-box;</pre><p>就好了。</p><p>&nbsp;</p><p>☆ﾐ(o*･ω･)ﾉ完结散花 等待review</p>]]></content>
      <categories>
        <category>创作集</category>
      </categories>
  </entry>
  <entry>
    <title>百度前端技术学院编码挑战（TASK 0002）</title>
    <url>/1982/</url>
    <content><![CDATA[<p>TASK 0002 已经发布，初级班的任务时间是从4月24日至5月7日，中级班为4月18日至4月25日。</p><p>TASK 0002 内容：<a href="https://github.com/baidu-ife/ife/tree/master/task/task0002" target="_blank" rel="noopener">https://github.com/baidu-ife/ife/tree/master/task/task0002</a></p><p>我做的：<a href="https://github.com/DIYgod/ife-work/tree/master/task0002" target="_blank" rel="noopener">https://github.com/DIYgod/ife-work/tree/master/task0002</a></p><p>在线Demo： <a href="https://www.anotherhome.net/file/ife/task0002/task0002_1.html" target="_blank" rel="noopener">https://www.anotherhome.net/file/ife/task0002/task0002_1.html</a></p><p>本次任务累计花费时间17天（4.19-5.6 ）</p><p>下面是我做 TASK 0002 过程中的一些记录。<a id="more"></a></p><hr><p>*<em>1. JavaScript 的性能优化 *</em>（参考 <a href="http://www.ibm.com/developerworks/cn/web/1308_caiys_jsload/index.html" target="_blank" rel="noopener">JavaScript 的性能优化：加载和执行</a>）</p><p>· Web 开发人员一般习惯在 &lt;head&gt; 中加载外链的 JavaScript，接着用 &lt;link&gt; 标签用来加载外链的 CSS 文件或者其他页面信息。然而这种常规的做法却隐藏着严重的性能问题——脚本会阻塞页面其他资源的下载。因此推荐将所有&lt;script&gt;标签尽可能放到&lt;body&gt;标签的底部，以尽量减少对整个页面下载的影响。</p><p>· 由于每个&lt;script&gt;标签初始下载时都会阻塞页面渲染，所以减少页面包含的&lt;script&gt;标签数量有助于改善这一情况。</p><p>· 减少 JavaScript 对性能的影响其他方法见参考。</p><p>&nbsp;</p><p><strong>2. <code>==</code> 与 <code>===</code></strong> （参考 <a href="http://www.weste.net/2013/3-1/89405.html" target="_blank" rel="noopener">Javascript中双等号“==”和三等号“===”的区别</a> <a href="http://www.cnblogs.com/litsword/archive/2010/07/22/1782933.html" target="_blank" rel="noopener">JavaScript里面三个等号和两个等号的区别</a> <a href="https://github.com/ecomfe/spec/blob/master/javascript-style-guide.md#%E5%BC%BA%E5%88%B6-%E5%9C%A8-equality-expression-%E4%B8%AD%E4%BD%BF%E7%94%A8%E7%B1%BB%E5%9E%8B%E4%B8%A5%E6%A0%BC%E7%9A%84-%E4%BB%85%E5%BD%93%E5%88%A4%E6%96%AD-null-%E6%88%96-undefined-%E6%97%B6%E5%85%81%E8%AE%B8%E4%BD%BF%E7%94%A8--null" target="_blank" rel="noopener">JavaScript编码规范</a>）</p><p><code>==</code>：等于运算，但是不比较值的类型；<br><code>===</code>：完全等于运算，不仅比较值，而且还比较值的类型，只有两者一致才为真。</p><p>百度JavaScript编码规范也规定：在 Equality Expression 中强制使用类型严格的 <code>===</code>。仅当判断 null 或 undefined 时，允许使用 <code>== null</code>。因为使用 <code>===</code> 可以避免等于判断中隐式的类型转换。</p><p>&nbsp;</p><p><strong>3. 类型检测</strong> （参考 <a href="https://github.com/ecomfe/spec/blob/master/javascript-style-guide.md#%E5%BC%BA%E5%88%B6-%E5%9C%A8-equality-expression-%E4%B8%AD%E4%BD%BF%E7%94%A8%E7%B1%BB%E5%9E%8B%E4%B8%A5%E6%A0%BC%E7%9A%84-%E4%BB%85%E5%BD%93%E5%88%A4%E6%96%AD-null-%E6%88%96-undefined-%E6%97%B6%E5%85%81%E8%AE%B8%E4%BD%BF%E7%94%A8--null" target="_blank" rel="noopener">JavaScript编码规范</a> <a href="http://scriptfans.iteye.com/blog/318821" target="_blank" rel="noopener">Javascript数组类型检测：编写更强壮的isArray函数</a> <a href="http://www.jb51.net/article/19841.htm" target="_blank" rel="noopener">Javascript 判断函数类型完美解决方案</a>）</p><p>通用的简易做法：类型检测优先使用 <code>typeof</code>。对象类型检测使用 <code>instanceof</code>。null 或 undefined 的检测使用 <code>== null</code></p><pre class="lang:default decode:true">// string
typeof variable === 'string'

// number
typeof variable === 'number'

// boolean
typeof variable === 'boolean'

// Function
typeof variable === 'function'

// Object
typeof variable === 'object'

// RegExp
variable instanceof RegExp

// Array
variable instanceof Array

// null
variable === null

// null or undefined
variable == null

// undefined
typeof variable === 'undefined'</pre><p>判断数组类型：得到对象的字符串表示，然后对比此字符串是否是’[object Array]’</p><pre class="lang:default decode:true">function isArray(arr) {
    return Object.prototype.toString.call(arr) === '[object Array]';
}</pre><p>9.20更新：下面这样也可以</p><pre class="lang:default decode:true">function isArray(arr) {
    return Array.isArray(arr);
}</pre><p>判断函数类型：首先保证测试的对象存在，并将其序列化成含有“function”的字符串，这个是我们检测的基础(fn.constructor != String,fn.constructor != Array, and fn.constructor != RegExp)。另外，我们需要保证声明的函数不是一个DOM节点（fn.nodeName）。然后，我们就可以作toString测试。如果我们将一个函数转换成字符串，在一个浏览器中（fn+””）给我们的结果就像这样“function name(){…}”。现在，判断它是否为函数就很简单，仅仅只需要判断字符串中是否包含单词“function”。这很神奇，对于任何有问题的函数，在所有浏览器中都能得到我们所需要的结果。这个函数较之于传统的方法，运行速度有些不尽人意，作者（John Resig）建议我们保守使用。</p><pre class="lang:default decode:true">function isFunction(fn) {
        return !!fn
        &amp;&amp; !fn.nodeName
        &amp;&amp; fn.constructor != String
        &amp;&amp; fn.constructor != RegExp
        &amp;&amp; fn.constructor != Array
        &amp;&amp; /function/i.test(fn + '');
}</pre><p>9.20更新：上面那种太麻烦，可以类似Array那样判断</p><pre class="lang:default decode:true">function isFunction(fn) {
    return Object.prototype.toString.call(fn) === '[object Function]';
}</pre><p>复制Array的简单做法：</p><pre class="lang:default decode:true">var a1 = [1, 2, 3]
var a2 = a1.slice(0);</pre><p>&nbsp;</p><p><strong>4. 类型转换</strong> （参考 <a href="https://github.com/ecomfe/spec/blob/master/javascript-style-guide.md#%E5%BC%BA%E5%88%B6-%E5%9C%A8-equality-expression-%E4%B8%AD%E4%BD%BF%E7%94%A8%E7%B1%BB%E5%9E%8B%E4%B8%A5%E6%A0%BC%E7%9A%84-%E4%BB%85%E5%BD%93%E5%88%A4%E6%96%AD-null-%E6%88%96-undefined-%E6%97%B6%E5%85%81%E8%AE%B8%E4%BD%BF%E7%94%A8--null" target="_blank" rel="noopener">JavaScript编码规范</a>）</p><p>number -&gt; string:</p><pre class="lang:default decode:true">num + '';</pre><p>string -&gt; number:</p><pre class="lang:default decode:true">+str;

var width = '200px';  // 要转换的字符串结尾包含非数字并期望忽略时，使用 parseInt
parseInt(width, 10);</pre><p>-&gt; boolean:</p><pre class="lang:default decode:true">var num = 3.14;
!!num;</pre><p>number 去除小数点:</p><pre class="lang:default decode:true">var num = 3.14;
Math.ceil(num);</pre><p>&nbsp;</p><p><strong>5. 对有序集合进行遍历时，缓存 length</strong> （参考 <a href="https://github.com/ecomfe/spec/blob/master/javascript-style-guide.md#%E5%BC%BA%E5%88%B6-%E5%9C%A8-equality-expression-%E4%B8%AD%E4%BD%BF%E7%94%A8%E7%B1%BB%E5%9E%8B%E4%B8%A5%E6%A0%BC%E7%9A%84-%E4%BB%85%E5%BD%93%E5%88%A4%E6%96%AD-null-%E6%88%96-undefined-%E6%97%B6%E5%85%81%E8%AE%B8%E4%BD%BF%E7%94%A8--null" target="_blank" rel="noopener">JavaScript编码规范</a>）</p><p>虽然现代浏览器都对数组长度进行了缓存，但对于一些宿主对象和老旧浏览器的数组对象，在每次 length 访问时会动态计算元素个数，此时缓存 length 能有效提高程序性能。</p><pre class="lang:default decode:true">for (var i = 0, len = elements.length; i &lt; len; i++) {
    var element = elements[i];
    // ......
}</pre><p>&nbsp;</p><p><strong>6. document.body.scrollTop与document.documentElement.scrollTop获取滚动条滚动的距离的坑</strong> （参考 <a href="http://jo2.org/document-body-scrolltop%E4%B8%8Edocument-documentelement-scrolltop%E5%85%BC%E5%AE%B9/" target="_blank" rel="noopener">document.body.scrollTop与document.documentElement.scrollTop兼容</a> <a href="http://www.ruanyifeng.com/blog/2009/09/find_element_s_position_using_javascript.html" target="_blank" rel="noopener">用Javascript获取页面元素的位置</a> <a href="http://www.csdn123.com/html/blogs/20130516/13275.htm" target="_blank" rel="noopener">火狐、谷歌、IE关于document.body.scrollTop和document.documentElement.scrollTop 以及值为0的问题</a>）</p><p>参考阮一峰的教程写了下面一段：</p><pre class="lang:default decode:true">if (document.compatMode == "BackCompat"){
    var elementScrollLeft=document.body.scrollLeft;
} else {
    var elementScrollLeft=document.documentElement.scrollLeft; 
}</pre><p>没想到遇到了坑，结果elementScrollLeft总是0，调试结果如下：</p><p><img src="/images/task0002_1.png" alt=""></p><p>好坑啊，说好的如果有文档声明（即网页第一句的docType）的情况下，document.compatMode 的值等于 “CSS1compat”，标准浏览器是只认识documentElement.scrollTop的啊。</p><p>另外试了一下IE和Firefox，均可认documentElement.scrollTop，chrome的错！</p><p>还好document.body.scrollTop与document.documentElement.scrollTop两者有个特点，就是同时只会有一个值生效。比如document.body.scrollTop能取到值的时候，document.documentElement.scrollTop就会始终为0；反之亦然。所以可以这样写：</p><pre class="lang:default decode:true">var scrollLeft = document.body.scrollLeft + document.documentElement.scrollLeft;
var scrollTop = document.body.scrollTop + document.documentElement.scrollTop;</pre><p>&nbsp;</p><p><strong>7. 获取所有DOM元素</strong></p><p>突然脑洞大开想到的</p><pre class="lang:default decode:true">var ele = document.getElementsByTagName('*');</pre><p>&nbsp;</p><p><strong>8. 真假判断</strong></p><p>对象总为true，基础类型看是否为空</p><pre class="lang:js decode:true">!![]    // true
!!{}    // true
!!''    // false
!!0     // false</pre><p>容易把空数组误以为是false！</p><p>容易把空数组误以为是false！</p><p>容易把空数组误以为是false！</p><p>重要的事情要说三遍！</p><p>&nbsp;</p><p><strong>9. 递归获取所有子元素</strong></p><p>这个是有问题的，只能获取到下一级的子元素：</p><pre class="lang:default mark:2 decode:true">var childs = function (element) {
    var allchilds = [];
    var childn = element.childNodes;
    if (childn.length !== 0) {
        for (var i = 0, len = childn.length; i &lt; len; i++) {
            allchilds.push(childn[i]);
            allchilds.concat(childs(childn[i]));
        }
    }
    return allchilds;
}</pre><p>但如果改成这样就能获取所有子元素了：</p><pre class="lang:default mark:1 decode:true">var allchilds = [];
var childs = function (element) {
    var childn = element.childNodes;
    if (childn.length !== 0) {
        for (var i = 0, len = childn.length; i &lt; len; i++) {
            allchilds.push(childn[i]);
            allchilds.concat(childs(childn[i]));  //或者 childs(childn[i]);
        }
    }
    return allchilds;
}</pre><p><del>第一段代码出现问题的原因未知，已经想一晚上了，并无进展。</del></p><p>另外调试过程中发现的诡异现象：</p><p><img src="/images/task0002_2.png" alt=""></p><p>解释下：递归调用时返回值allchilds是正确的，但返回到上一层时并没有加到上一层的allchilds中。</p><p><a href="http://blog.yueyue.moe/archives/17/" target="_blank" rel="noopener">月月</a> 告诉我这句话有问题！</p><pre class="lang:default mark:2 decode:true">allchilds.concat(childs(childn[i]));</pre><p>w3school如是说：concat() 方法用于连接两个或多个数组。<br>该方法不会改变现有的数组，而仅仅会返回被连接数组的一个副本。仅仅会返回被连接数组的一个副本。仅仅会返回被连接数组的一个副本。</p><p>一切都说通了。。</p><p>所以根本不关allchilds声明位置的事，debug的方向一直都不对，要这样改：</p><pre class="lang:default decode:true">var childs = function (element) {
    var allchilds = [];
    var childn = element.childNodes;
    if (childn.length !== 0) {
        for (var i = 0, len = childn.length; i &lt; len; i++) {
            allchilds.push(childn[i]);
            allchilds = allchilds.concat(childs(childn[i]));
        }
    }
    return allchilds;
}</pre><p>万万没想到，在 <a href="http://blog.yueyue.moe/archives/17/" target="_blank" rel="noopener">月月</a> <a href="http://www.lishengcn.cn/" target="_blank" rel="noopener">李胜</a> <a href="http://blog.wedc.cc/" target="_blank" rel="noopener">蛋炒饭</a> 的帮助下千辛万苦终于完成了这个小函数。。。</p><p>后续：突然想到这样就能轻易获取到</p><pre class="lang:default decode:true">element.getElementsByTagName('*');</pre><p>已吐血</p><p>&nbsp;</p><p><strong>10. 数组合并</strong> （参考 <a href="http://www.w3school.com.cn/jsref/jsref_concat_array.asp" target="_blank" rel="noopener">JavaScript concat() 方法</a>）</p><p>重要的事情要另外单独说。因为被坑惨了。</p><p>concat() 方法用于连接两个或多个数组。</p><p>该方法不会改变现有的数组，而仅仅会返回被连接数组的一个副本。</p><p>该方法不会改变现有的数组，而仅仅会返回被连接数组的一个副本。</p><p>该方法不会改变现有的数组，而仅仅会返回被连接数组的一个副本。</p><p>错误用法：</p><pre class="lang:default decode:true">arr1.concat(arr2);</pre><p>正确用法：</p><pre class="lang:default decode:true">arr1 = arr1.concat(arr2);</pre><p>&nbsp;</p><p><strong>11. 事件代理</strong> （参考 <a href="http://www.cnblogs.com/rubylouvre/archive/2009/08/09/1542174.html" target="_blank" rel="noopener">javascript事件代理</a>）</p><p>在编程中，如果我们不想或不能够直接操纵目标对象，我们可以利用delegate创建一个代理对象来调用目标对象的方法，从而达到操纵目标对象的目的。毋庸置疑，代理对象要拥有目标对象的引用。</p><p><del>可以用事件代理的方法来优雅地用一个函数代理另一个函数，比如：</del></p><pre class="lang:default decode:true"><del>var delegate = function (method) {
    return function() {
        return method.apply(null, arguments);
    }
}

var on = delegate(addEvent);
var un = delegate(removeEvent);</del></pre><p><del>这样就能优雅地用 on un 函数代理 addEvent removeEvent 函数了。这样实现了目标对象的隐藏，这对于我们保护一些核心对象是非常有用的。</del></p><p>我错了，直接这样就行了。。</p><p>&nbsp;</p><pre class="lang:default decode:true">var on = addEvent;
var un = removeEvent;</pre><p>&nbsp;</p><p><strong>12. Object相关</strong> （参考 <a href="http://www.cnblogs.com/coolicer/archive/2010/10/13/1850131.html" target="_blank" rel="noopener">js的Object到底是什么呢?</a>）</p><p>Array、Boolean、Date、Function、Number等等对象，其实都是从Object来的，它们的祖先都是Object。它们表现不同的语言特性，比如Array有被自动管理的length属性，Boolean只有true或false取值，Date表示时间结构，Function可以被运行，都是它们的原始类型(valueOf)赋予它们的能力。</p><p>所以有些有趣的东西：</p><pre class="lang:default decode:true">function f() {
    alert('f1');
}
f.c = function() {
    alert('c1');
}

f();
f.c();</pre><p>可以给函数设置一个也是函数的属性。</p><p>&nbsp;</p><p><strong>13. JavaScript正则表达式分组</strong> （参考 <a href="http://www.xiaoxiaozi.com/2009/08/04/1306/" target="_blank" rel="noopener">JavaScript 正则表达式 选择、分组和引用</a>）</p><p>例：</p><pre class="lang:default decode:true">function getCookie(cookieName) {
    var re = new RegExp(cookieName + '=(.*?)($|;)');
    return re.exec(document.cookie)[1];
}</pre><p>其中re.exec(document.cookie)是一个数组，第一个元素是正则式所有匹配出的字符，第二个元素是匹配的第一个分组，即第一个括号里的内容：(.*?)</p><p>分组就就是正则表达式中的子表达式，可以用来获取正则式匹配出的字符串中的特定部分。</p><p>9.20更新：当使用构造函数创造正则对象时，需要常规的字符转义规则（在前面加反斜杠 \）。比如，以下是等价的：</p><pre class="lang:default decode:true">var re = new RegExp("\\w+");
var re = /\w+/;</pre><p>&nbsp;</p><p><strong>14. JavaScript跨域</strong> （参考 <a href="http://www.cnblogs.com/rainman/archive/2011/02/20/1959325.html" target="_blank" rel="noopener">JavaScript跨域总结与解决办法</a>）</p><p>JavaScript出于安全方面的考虑，不允许跨域调用其他页面的对象。但在安全限制的同时也给注入iframe或是ajax应用上带来了不少麻烦。</p><p>具体限制及解决办法见参考。</p><p>&nbsp;</p><p><strong>15. JavaScript月份多出一</strong> （参考 <a href="http://www.cftea.com/c/2010/06/4KJ75KPG9NBFEIA1.asp" target="_blank" rel="noopener">JS 中 new Date 怎么就多一个月了？</a> <a href="http://www.cnblogs.com/liuning8023/archive/2012/12/15/2819728.html" target="_blank" rel="noopener">JavaScript——搞甘特图使用 Date 对象时遇到的问题</a>）</p><p><img src="/images/task0002_4.png" alt=""></p><p>明明设置的时5月，结果却是6月。</p><p>实际中，我们数月份不是从 0 开始，但是 JavaScript 却是从 0 开始。JS中的0月是我们的1月，JS中的1月是我们的2月…</p><p>所以设置月份时记得减一，获取月份时记得加一。。</p><p>&nbsp;</p><p><strong>15. 计时器不会阻塞代码执行</strong></p><p>如图<img src="/images/task0002_5.png" alt=""></p><p>我的本意是执行完 a() 再输出b，没想到b先输出了，从这里也可以推测出，计时器并不会阻塞后面语句的执行。</p><p>&nbsp;</p><p>☆ﾐ(o*･ω･)ﾉ完结散花 等待review</p>]]></content>
      <categories>
        <category>创作集</category>
      </categories>
  </entry>
  <entry>
    <title>百度前端技术学院编码挑战（TASK 0001）</title>
    <url>/1969/</url>
    <content><![CDATA[<p><a href="https://github.com/baidu-ife/ife" target="_blank" rel="noopener">百度Web前端技术学院</a>（Baidu Institute of Front-End Technology简称IFE）是一个由百度EFE团队、百度人力资源部校园招聘组联合出品的、面向在校大学生的前端培训组织，借助百度大量优秀的前端工程师以及丰富的前端知识积累，帮助大学生们更加高效、系统地学习Web前端技术。</p><p>百度Web前端技术学院已正式开学，我有幸成为了第一期的初级班学员，可以和菊苣们一起玩耍啦～</p><p>想一起学但是没录取的可以加群：438966405</p><hr><p>TASK 0001 发布，初级班Review提交截止时间为4月23日，中级班为4月16日。</p><p>TASK 0001 内容：<a href="https://github.com/baidu-ife/ife/tree/master/task/task0001" target="_blank" rel="noopener">https://github.com/baidu-ife/ife/tree/master/task/task0001</a>（还设置了1-6小节照顾我这样的弱菜，大赞～）</p><p>我做的：<a href="https://github.com/DIYgod/ife-work/tree/master/task0001" target="_blank" rel="noopener">https://github.com/DIYgod/ife-work/tree/master/task0001</a></p><p>在线Demo： <a href="https://www.anotherhome.net/file/ife/task0001/" target="_blank" rel="noopener">https://www.anotherhome.net/file/ife/task0001/</a></p><p>本次任务累计花费时间6天（4.13-4.19 ）</p><p>下面是我做 TASK 0001 过程中的一些记录。</p><a id="more"></a><p>&nbsp;</p><p><strong>1. position 属性</strong>（参考 <a href="http://www.w3school.com.cn/css/css_positioning.asp" target="_blank" rel="noopener">CSS 定位-W3School</a>、<a href="http://selfcontroller.iteye.com/blog/1826119" target="_blank" rel="noopener">CSS+DIV布局中absolute和relative</a>）</p><p>position 属性比较重要，但自己看的时候没看很明白，马马虎虎略过了，于是做任务的时候就出了莫名其妙的问题，在蛋炒饭的帮助才发现是因为 position 属性没搞懂。</p><p>用自己的话简单总结一下：position属性有四个属性值：static relative absolute fixed。 static 为默认，元素框正常生成，出现在 normal flow 中；relative 使元素框偏移某个距离，原本所占的空间仍保留，也是出现在 normal flow 中；absolute 使元素框跳出 normal flow 完全删除，并相对于其包含块定位，原本所占的空间消失；fixed 同样使元素框跳出 normal flow，相对于浏览器窗口进行定位。</p><p>&nbsp;</p><p><strong>2. 浮动元素及其后续非浮动元素填充的位置</strong>（参考 <a href="http://www.cnblogs.com/polk6/archive/2013/07/25/3142187.html" target="_blank" rel="noopener">CSS float 浮动属性</a>）</p><p>当时的情况是这样的：HTML部分：</p><pre class="lang:default decode:true">&lt;div id="div6"&gt;
    &lt;div class="div6-a"&gt;&lt;/div&gt;
    &lt;div class="div6-b"&gt;&lt;/div&gt;
    &lt;div class="div6-c"&gt;&lt;/div&gt;
&lt;/div&gt;</pre><p>CSS部分：</p><pre class="lang:css decode:true">#div6 {
    margin-bottom: 10px;
}
.div6-a {
    float: left;
    width: 50px;
    height: 50px;
    background: #f00;
}
.div6-b {
    margin: 0 50px;
    height: 50px;
    background: #00f;
}
.div6-c {
    float: right;
    width: 50px;
    height: 50px;
    background: #ff0;
}</pre><p>结果出现问题：<img src="/images/TASK0001_2.png" alt=""></p><p>黄色的C元素跑到下一行去了</p><p>尝试了下先把C元素flow到右侧再填充B元素，即：</p><p>HTML部分：</p><pre class="lang:default decode:true">&lt;div id="div6"&gt;
    &lt;div class="div6-a"&gt;&lt;/div&gt;
    &lt;div class="div6-c"&gt;&lt;/div&gt;
    &lt;div class="div6-b"&gt;&lt;/div&gt;
&lt;/div&gt;</pre><p>达到预期结果： <img src="/images/TASK0001_1.png" alt=""></p><p>原因：浮动元素在文档流空出的位置，由后续的(非浮动)元素填充上去：块级元素直接填充上去，若跟浮动元素的范围发生重叠，浮动元素覆盖块级元素；内联元素则有空隙就插入。</p><p>所以加入C元素后再加入B元素时，B元素直接填充到A C元素的同一行；加入B元素后再加入C元素时，由于B元素一行没有空隙，C元素浮动到下一行。</p><p>&nbsp;</p><p><strong>3. 负边距(negative margin)</strong>（参考 <a href="http://www.cnblogs.com/2050/archive/2012/08/13/2636467.html" target="_blank" rel="noopener">CSS布局奇淫巧计之-强大的负边距</a>）</p><p><a href="http://www.imooc.com/wenda/detail/254035" target="_blank" rel="noopener">圣杯布局、双飞翼布局</a>都用了负边距对浮动元素的影响的原理，某个元素虽然写在了后面，但可以通过负边距让它在浏览器显示的时候是在前面的，具体见参考，写得非常好。</p><p>&nbsp;</p><p><strong>4. 清除浮动</strong>（参考 <a href="http://www.iyunlu.com/view/css-xhtml/55.html" target="_blank" rel="noopener">那些年我们一起清除过的浮动</a>）</p><p>做浮动布局那题时，装蓝色方块的红色容器总是显示不出来，用F12看到红色容器的高度不知道为什么变成了0，于是参考双飞翼布局的代码，发现双飞翼布局在父级元素设置了一个 overflow: hidden 的属性，我尝试了一下给红色容器也加上 overflow: hidden 属性，高度居然神奇地可以自适应了，十分不理解。</p><p>经过蛋炒饭的指点知道了，子级元素都是 flow 属性的时候，会造成父级元素没有高度，而 overflow: hidden 有清除浮动的效果，所以加上后会使父级恢复高度（overflow: hidden 清除浮动的原理见参考）。</p><p>&nbsp;</p><p>到此为止，花了两天时间，已经完成了1-6节实战小练习的内容，成果见：<a href="https://www.anotherhome.net/file/ife/task0001-16/task0001.html" target="_blank" rel="noopener">https://www.anotherhome.net/file/ife/task0001-16/task0001.html</a></p><p>下面就是综合练习了，看起来就好难。。</p><p>&nbsp;</p><p><strong>5. absolute 元素的定位</strong>（参考 <a href="http://www.zhihu.com/question/19926700" target="_blank" rel="noopener">CSS 中，为什么绝对定位（absolute）的父级元素必须是相对定位（relative）？-知乎</a>）</p><p>写第七题中导航栏的时候需要用到绝对定位，但绝对定位是相对谁定位呢？之前一直没搞清楚。</p><p>absolute 元素的定位是上溯父级元素，找第一个不是 static 的元素，以其为 absolute 的基准。如果父级元素全都没有设置（static），则里面的绝对定位以 body 定位。</p><p>所以一般的做法是将想作为基准的父级元素加上 position: relative 属性。</p><p>&nbsp;</p><p><strong>6. 图片的 4px 空白间距</strong>（参考 <a href="http://stackoverflow.com/questions/11126685/why-does-container-div-insist-on-being-slightly-larger-than-its-content" target="_blank" rel="noopener">Why does container div insist on being slightly larger than its content? -stackoverflow</a>）</p><p>插入顶部图片时候发现了一个很诡异的问题，见图：</p><p>图片高度500px<img src="/images/TASK0001_3.png" alt=""></p><p>父级高度504px<img src="/images/TASK0001_4.png" alt=""></p><p>多出来4px。。。</p><p>网上搜了下基本上都是因为设置<a href="http://www.w3cplus.com/css/fighting-the-space-between-inline-block-elements" target="_blank" rel="noopener">inline-block元素才出现的空白间距</a>，但我没有inline-block元素呀。但是可以通过类似的方法消除4px间距，我用了设置父元素的字体大小为0的方法解决。</p><p>我已经将上述问题的代码化简后传到了服务器上，有兴趣的可以帮我看一下：<a href="https://www.anotherhome.net/file/ife/task0001-7_problem/" target="_blank" rel="noopener">https://www.anotherhome.net/file/ife/task0001-7_problem/</a></p><p>Update：多谢 <a href="http://saintwinkle.com/" target="_blank" rel="noopener">天然傲娇</a>，原因已了解，&lt;img&gt; 默认是inline元素（内联元素、行内元素），计算高度时要加上 line-height 的默认值（4px）。</p><p>来自stackoverflow：</p><blockquote><p>Since an &lt;img&gt; is an inline element by default, it’s height is calculated differently as related to the default line-height value.</p><p>On inline elements, the line-height CSS property specifies the height that is used in the calculation of the line box height.</p><p>On block level elements, line-height specifies the minimal height of line boxes within the element.<br>&nbsp;</p></blockquote><p><strong>7. CSS控制DIV两列左右高度一致</strong>（参考 <a href="http://www.l3c.cn/plus/view.php?aid=8" target="_blank" rel="noopener">CSS控制DIV两列左右高度一致</a>）</p><p>content为父级元素，多个post作为子级元素，目的是使post高度保持一致。</p><pre class="lang:default decode:true">.content {
    width: 980px;
    overflow: hidden;
}

.post {
    width: 320px;
    float: left;
    margin-bottom: -10000px;
    padding-bottom: 10000px;
    background: #fff;
}</pre><p>我是这样理解的：通过 padding-bottom: 10000px，外边距和内边距同时加10000px，再通过 margin: -10000px，内边距同时减10000px，然后，在没达到同一高度时，较长的元素的外边距跟着减小，而较短的元素外边距不变，达到同一高度后，较长元素和较短元素外边距同时减小。结果就高度一致了。</p><p>&nbsp;</p><p><strong>8. tr边框</strong>（参考 <a href="http://blog.csdn.net/chenssy/article/details/8453495" target="_blank" rel="noopener">CSS如何修改tr边框属性</a>）</p><p>像这样在CSS中直接给tr设置边框不起作用，而如果指定td的边框又会有间断的现象出现</p><pre class="lang:default decode:true">tr {
    border: 1px  solid #000;
}</pre><p>如果同时给table设置border-collapse属性，tr设置的边框就能出现了</p><pre class="lang:default decode:true">table {  
    border-collapse: collapse;
}

tr {
    border: 1px  solid #000;
}</pre><p>原因见参考</p><p>&nbsp;</p><p><strong>TASK0001 全部完成：</strong></p><p>第七题 Demo：<a href="https://www.anotherhome.net/file/ife/task0001/" target="_blank" rel="noopener">https://www.anotherhome.net/file/ife/task0001/</a></p><p>1-6题 Demo：<a href="https://www.anotherhome.net/file/ife/task0001-16/task0001.html" target="_blank" rel="noopener">https://www.anotherhome.net/file/ife/task0001-16/task0001.html</a></p><p>&nbsp;</p><p>☆ﾐ(o*･ω･)ﾉ完结散花 等待review</p><p>&nbsp;</p><p>Review结束，根据导师的建议修改及总结如下：</p><p><strong>9. 删除 lang=”zh-CN”</strong> （参考 <a href="http://www.zhihu.com/question/20797118" target="_blank" rel="noopener">网页头部的声明应该是用 lang=”zh” 还是 lang=”zh-cn”？</a>）</p><p>修改：</p><pre class="lang:default decode:true">&lt;head lang="zh-CN"&gt;

&lt;head&gt;</pre><p>单一的 zh 和 zh-CN 均属于废弃用法。</p><p>看了下百度 淘宝 微博等网站均没有写lang属性，可以放心删掉啦。</p><p>&nbsp;</p><p><strong>10. 使用h1标签</strong> （参考 <a href="http://www.divcss5.com/html/h328.shtml" target="_blank" rel="noopener">HTML之h1 h2 h3 h4标签知识经验篇 - DIVCSS5</a>）</p><p>修改：</p><pre class="lang:default decode:true">&lt;div class="logo"&gt;
    &lt;a href="index.html"&gt;&lt;img src="img/logo.png" alt="logo" width="200px"&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;h1 class="logo"&gt;
    &lt;a href="index.html"&gt;&lt;img src="img/logo.png" alt="logo" width="200px"&gt;&lt;/a&gt;
&lt;/h1&gt;</pre><p>h1 h2 h3 h4 标题标签常常使用在一个网页中唯一标题、重要栏目、重要标题等情形下。</p><p>其中 h1 在一个网页中最好只使用一次，如对一个网页唯一标题使用。</p><p>在一个网页中可以适当使用h1 h2 h3 h4标签，有利于网页的重点部分突出，同时也利于搜索引擎排名。</p><p>看到淘宝也是这样做的，在logo的代码外包了一个h1标签。</p><p>&nbsp;</p><p><strong>11. 其他修改</strong></p><p>没想到在a标签上用class，多套了一层div：</p><pre class="lang:default decode:true">&lt;div class="icon-github"&gt;
    &lt;a href="https://github.com/DIYgod" target="_blank"&gt;&lt;img src="img/icon-github.png"&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;a class="icon-github" href="https://github.com/DIYgod" target="_blank"&gt;&lt;img src="img/icon-github.png"&gt;&lt;/a&gt;</pre><p>命名：</p><pre class="lang:default decode:true">&lt;div class="description"&gt;

&lt;div class="banner"&gt;</pre><p>将&lt;hr&gt;用border代替：<br>“不推荐&lt;hr&gt;，用上下容器的border来代替吧<br>当我不需要这条线的时候，只需要改变样式即可，不需要改动html”</p><p>使用ul li或者dl之类的列表语义的dom。</p><p>&nbsp;</p>]]></content>
      <categories>
        <category>创作集</category>
      </categories>
  </entry>
  <entry>
    <title>博客又搬新家啦</title>
    <url>/1826/</url>
    <content><![CDATA[<p>眼看 Google Adsense 已经100多美元马上就能提现了，加上想买个vps跑Python爬虫，就新入了 Linode 1GB，感觉超爽。</p><p>感谢离开恒创这段时间收留我的 <a href="http://technetcal.com/" target="_blank" rel="noopener">TECHNETCAL</a> <a href="https://freedom.moe/" target="_blank" rel="noopener">音符</a> ，还有一个奇葩说是要赞助我然后过几天就把我赶走了的主机商</p><p>另外整理了一下友链，移除部分 软件分享类 网赚类 私自移除我的链接 的友链（恕不另行通知，如有疑问请联系我）；还有一些貌似死掉的：</p><pre class="lang:default decode:true">http://wanan.me/
http://www.12s.me/
http://blog.juanzii.me/
http://www.gazyip.com/
http://blog.aixinyongshi.cn/
http://shana.me/
http://waysmaker.com/</pre><p>如果还活着请马上与我联系。</p><p>鉴于友链已经多至80多个，为了限制数量，所以友链从此不再来者不拒，新增友链要求如下：</p><p>1. 无侵权内容，包括但不限于 盗版软件 盗版视频 未署名转载文章，跟我玩得好的允许少量存在（我就是要双重标准，不服咬我呀٩(๑`н´๑)۶）<br>2. 非 网赚 商业化严重 或以盈利为目的<br>3. 真正用心去维护<br>4. 跟我多交流<br>5. 待补充，还没想好ღ(๑╯◡╰๑ღ)</p>]]></content>
      <categories>
        <category>事件簿</category>
      </categories>
  </entry>
  <entry>
    <title>一个完整编译器的实现(二) 语法分析</title>
    <url>/1764/</url>
    <content><![CDATA[<p><strong><span style="font-size:14pt">1 系列说明</span></strong></p><p><a href="https://github.com/DIYgod/Compiler" target="_blank" rel="noopener">GitHub地址</a> <a href="http://www.anotherhome.net/file/compiler/" target="_blank" rel="noopener">各阶段源码</a> <a href="http://www.anotherhome.net/1751" target="_blank" rel="noopener">各阶段说明集合</a></p><p><strong><span style="font-size:14pt">2 语法分析说明</span></strong></p><p>语法：组合单词以形成词组 从句 或句子的方法。</p><p>经过词法分析，我们已经可以将输入文本识别成一个个的单词，本阶段的目标是将这些单词识别成句子，判断单词的这种组合形式是否符合我们定义的语法。</p><p>_<span style="font-size:13pt">2.1 用文法来定义语法</span>_</p><p>语法分析需要由递归而获得的额外的表示能力，显然正则表达式已经不能满足我们的需求。</p><p>事实上，文法也可以用来描述词法单词的结构，但正则表达式已经可以满足需求，这时使用正则表达式更为简练。</p><p>_<span style="font-size:13pt">2.2 LR(1) 分析法</span>_</p><p>@%……￥&amp;%#￥太复杂不想说</p><p>总之，LR(1) 是一种非常非常强大的分析算法，能够解决很多归约-归约冲突，大多数用上下文无关文法描述其语法的程序设计语言都有一个 LR(1) 文法。<a id="more"></a></p><p>_<span style="font-size:13pt">2.3 使用 Yacc 生成语法分析器</span>_</p><p>构造LR(1)分析表的算法简单得足以用计算机来自动完成，而且手工构造十分麻烦无趣，所以使用Yacc是一个明智的决定。</p><p>类似Lex，Yacc规范分为三部分</p><pre class="lang:default decode:true">%{
...
%}
...
%%
...</pre><p>第一部分同Lex，包含include和声明</p><p>第二部分定义从词法分析中接收的终结符，开始符号，优先级等</p><p>第三部分定义文法及语义动作，语法分析阶段只定义文法，语义动作到语义分析时候再完成。</p><p><span style="font-size:12pt">2.3.1 冲突</span></p><p>Yacc 选择移近来解决移进-归约冲突，选择使用在文法中先出现的规则来解决归约-归约冲突。</p><p><span style="font-size:12pt">2.3.2 优先级指导</span></p><p>定义优先级是为了解决二义性，这样写文法的时候方便的多。</p><p>Yacc在第二部分可以假如优先级指导命令</p><pre>%left COMMA
%right PLUSASSIGN MINUSASSIGN TIMESASSIGN DIVIDEASSIGN ASSIGN
%left OR
%left AND
%left EQ NEQ
%left LE GE LT GT
%left PLUS MINUS
%left TIMES DIVIDE MOD
%right INC DEC NOT
%left LPAREN RPAREN LBRACK RBRACK</pre><p>自上而下优先级降低，left right 说明单词是左结合还是右结合。</p><p><span style="font-size:14pt"><strong>3 具体实现</strong></span></p><p>语法分析器和改进过的词法分析器源码见文章开头。</p><p>进行到本阶段，编译器发展为四个模块：</p><p>1.错误处理模块（errormsg.c errormsg.h）：用来产生含文件名和行号的报错信息<br>2.常用工具模块（util.c util.h）：定义一些常用的函数<br>3.词法分析模块（simplec.lex）：通过Lex进行词法分析<br>4.语法分析模块（simplec.yacc）：通过Yacc进行语法分析</p><p>其中上一阶段的 token.h 已经不再需要，作为代替，Yacc会根据我们写的文法的单词规范自动生成一个与单词相关的头文件 y.tab.h ；parsetest.c是一个驱动程序，正常情况下会输出 Parsing successful!</p><p>附：<a href="http://www.lysator.liu.se/c/ANSI-C-grammar-l.html" target="_blank" rel="noopener">ANSI C grammar (Lex)</a> <a href="http://www.lysator.liu.se/c/ANSI-C-grammar-y.html" target="_blank" rel="noopener">ANSI C grammar (Yacc)</a></p><p>&nbsp;</p><p>语法分析 Done.</p>]]></content>
      <categories>
        <category>创作集</category>
      </categories>
  </entry>
  <entry>
    <title>一个完整编译器的实现(一) 词法分析</title>
    <url>/1754/</url>
    <content><![CDATA[<p><a href="https://github.com/DIYgod/Compiler" target="_blank" rel="noopener">GitHub地址</a> <a href="http://www.anotherhome.net/file/compiler/" target="_blank" rel="noopener">各阶段源码</a> <a href="http://www.anotherhome.net/1751" target="_blank" rel="noopener">各阶段说明集合</a></p><p>为了将一个程序从一种语言翻译成另一种语言，编译器必须首先把程序的各种成分拆开，并搞清其结构和含义，然后再用另一种方式把这些成分组合起来。编译器的前端执行分析，后端进行合成。</p><p>而分析一般分为3种：词法分析 语法分析 语义分析</p><p>本阶段进行的是词法分析，目的是将输入文件分解成一个个独立的词法符号，即单词。</p><p><strong>根据虎书的提示，在本阶段分了三个模块：</strong></p><p>1.错误处理模块（errormsg.c errormsg.h）：用来产生含文件名和行号的报错信息<br>2.词法分析模块（lexical.lex token.h）：通过Lex进行词法分析<br>3.常用工具模块（util.c util.h）：定义一些常用的函数</p><p>词法分析模块与错误处理模块：两者通过 errormsg.h 中声明的变量和函数进行通信：EM_tokPos 变量传递每个单词以字符为单位的位置；EM_newline()函数记录行号；EM_error() 输出报错信息。</p><p>错误处理模块与常用工具模块：错误处理模块使用 util.h 中声明的 checked_malloc() 分配内存函数</p><p>另外还包含了 驱动程序（driver.c）测试文件（test.c） makefile<a id="more"></a></p><p><strong>下面主要介绍本阶段最重要的词法分析模块。</strong></p><p><strong>tokens.h</strong>：定义词法单词常量以及yylval</p><pre class="lang:default decode:true">typedef union  {
    int ival;
        char cval;
        double dval;
    string sval;
    } YYSTYPE;
extern YYSTYPE yylval;</pre><p>上述代码定义了yylval，yylval是一个表示不同语义值的集合，其中的ival cval dval sval 分别用来保存 整数 字符 浮点数 字符串 单词的语义值。</p><pre class="lang:default decode:true"># define ID 128
# define STRING 129
# define COMMA 130
# define COLON 131
# define SEMICOLON 132
# define LPAREN 133
# define RPAREN 134
# define LBRACK 135
# define RBRACK 136
# define LBRACE 137
# define RBRACE 138
# define DOT 139
# define PLUS 140
# define MINUS 141
# define TIMES 142
# define DIVIDE 143
... ... ... ...</pre><p>这段定义了一些常数，这些常数供 lexical.lex 使用，它们指明被匹配的是何种类型的单词。</p><p><strong>lexical.lex</strong>：Lex的源文件，可以通过Lex生成一个词法分析器</p><p>Lex是一个可以将正则表达式转换城词法分析器的生成器，它由词法规范生成一个C程序（lex.yy.c）。该规范包含一个正则表达式和一个动作。这个动作将单词类型（可能和其他信息一起）传给编译器的下一处理阶段。</p><pre class="lang:default decode:true">%{
#include &lt;string.h&gt;
#include "util.h"
#include "tokens.h"
#include "errormsg.h"

int charPos=1;              //记录每个单词的位置

int yywrap(void)            //Lex函数, 返回1就停止解析, 可以用来解析多个文件
{
    charPos=1;
    return 1;
}

void adjust(void)           //计算单词位置, 并通过EM_tokPos传给错误信息模块
{
    EM_tokPos=charPos;
    charPos+=yyleng;
}

%}

%%
[" ""\t"]                   {adjust(); continue;}
"\n"                        {adjust(); EM_newline(); continue;}
(\")([A-Za-z0-9])*(\")      {adjust(); yylval.sval = yytext; return STRING_V;}
string                      {adjust(); return STRING;}
'[A-Za-z0-9]'               {adjust(); yylval.cval = yytext[1]; return CHAR_V;}
char                        {adjust(); return CHAR;}
short                       {adjust(); EM_error(EM_tokPos, "暂不支持short类型");}
-?[0-9]+                    {adjust(); yylval.ival=atoi(yytext); return INT_V;}
int                         {adjust(); return INT;}
unsigned                    {adjust(); EM_error(EM_tokPos, "暂不支持unsigned类型");}
long                        {adjust(); EM_error(EM_tokPos, "暂不支持long类型");}
float                       {adjust(); EM_error(EM_tokPos, "暂不支持float类型");}
-?[0-9]+(\.[0-9]+)?         {adjust(); yylval.dval = atof(yytext); return DOUBLE_V;}
do                          {adjust(); return DO;}
double                      {adjust(); return DOUBLE;}
struct                      {adjust(); return STRUCT;}
union                       {adjust(); return UNION;}
void                        {adjust(); return VOID;}
enum                        {adjust(); return ENUM;}
signed                      {adjust(); EM_error(EM_tokPos, "暂不支持signed类型");}
conust                      {adjust(); return CONUST;}
volatile                    {adjust(); EM_error(EM_tokPos, "暂不支持volatile");}
typedef                     {adjust(); return TYPEDEF;}
auto                        {adjust(); EM_error(EM_tokPos, "暂不支持auto");}
register                    {adjust(); EM_error(EM_tokPos, "暂不支持register");}
static                      {adjust(); return STATIC;}
extern                      {adjust(); return EXTERN;}
break                       {adjust(); return BREAK;}
case                        {adjust(); return CASE;}
continue                    {adjust(); return CONTINUE;}
default                     {adjust(); return DEFAULT;}
else                        {adjust(); return ELSE;}
for                         {adjust(); return FOR;}
goto                        {adjust(); return GOTO;}
if                          {adjust(); return IF;}
return                      {adjust(); return RETURN;}
switch                      {adjust(); return SWITCH;}
while                       {adjust(); return WHILE;}
sizeof                      {adjust(); return SIZEOF;}
[A-Za-z]+\[[0-9]+\]         {adjust(); return ARRAY;}
[A-Za-z_]([A-Za-z0-9_])*    {adjust(); yylval.sval = yytext; return ID;}
","                         {adjust(); return COMMA;}
":"                         {adjust(); return COLON;}
";"                         {adjust(); return SEMICOLON;}
"("                         {adjust(); return LPAREN;}
")"                         {adjust(); return RPAREN;}
"["                         {adjust(); return LBRACK;}
"]"                         {adjust(); return RBRACK;}
"{"                         {adjust(); return LBRACE;}
"}"                         {adjust(); return RBRACE;}
"."                         {adjust(); return DOT;}
"+"                         {adjust(); return PLUS;}
"-"                         {adjust(); return MINUS;}
"*"                         {adjust(); return TIMES;}
"/"                         {adjust(); return DIVIDE;}
"!="                        {adjust(); return NEQ;}
"=="                        {adjust(); return ASSIGN;}
"="                         {adjust(); return EQ;}
"&lt;="                        {adjust(); return LE;}
"&lt;"                         {adjust(); return LT;}
"&gt;="                        {adjust(); return GE;}
"&gt;"                         {adjust(); return GT;}
"&amp;"                         {adjust(); return AND;}
"|"                         {adjust(); return OR;}</pre><p>第一部分，即位于%{…%}之间的部分，包含有若干由此文件其余部分C代码使用的include和声明。</p><p>第二部分，即位于%}…%%之间的部分，包含正则表达式的简写形式和状态说明，比如你可以写上</p><pre class="lang:default decode:true">digits    [0-9]+</pre><p>那么第三部分中就可以用{digits}代替[0-9]+了。</p><p>第三部分，即位于%%后面的部分，包含正则表达式和动作。每个动作返回一个 int 类型的值（token.h定义的常数），指出匹配的是哪一种单词。<br>其中有两条匹配的原则来消除二义性：<br>规则优先：对于一个特定的最长初始子串，第一个与之匹配的正则式决定这个子串的单词类型；<br>最长匹配：通过规则优先确定正则式之后，子串取与正则式匹配的最长的字符串。</p><p>几个变量：yytext是正则式匹配的字符串；yyleng是所匹配的字符串的长度；charPos追踪每一个单词的位置，并告知EM_tokPos。</p><p>&nbsp;</p><p>词法分析 Done.</p>]]></content>
      <categories>
        <category>创作集</category>
      </categories>
  </entry>
  <entry>
    <title>一个完整编译器的实现</title>
    <url>/1751/</url>
    <content><![CDATA[<p><span style="font-size:8pt"><em>图灵生机器，机器生汇编，汇编生 C，C 生万物<br>(来自知乎用户 Joy Neop)</em></span></p><p>本系列将展示一个完整编译器从无到有的实现过程.</p><p>目标是从一个C语言的不完全子集翻译到x86汇编语言, 将借助 Lex Yacc LLVM 等工具, 另外暂定实现垃圾回收及面向对象.</p><p>全部代码托管在 <a href="https://github.com/DIYgod/Compiler" target="_blank" rel="noopener">GitHub</a>. 各阶段的源代码在 <a href="http://www.anotherhome.net/file/compiler/" target="_blank" rel="noopener">这里</a> 查看.</p><p>主要参考 虎书(《现代编译原理–C语言实现》), 根据此书, 暂将实现分为11个阶段: 词法分析 语法分析 语义动作 语义分析 栈帧布局 翻译 规范化 指令选择 控制流分析 数据流分析 寄存器分配 代码流出.</p><p>已完成：</p><p><a href="http://www.anotherhome.net/1754" target="_blank" rel="noopener">《一个完整编译器的实现—词法分析 | Anotherhome》</a></p><p><a href="http://www.anotherhome.net/1764" target="_blank" rel="noopener">《一个完整编译器的实现—语法分析 | Anotherhome》</a></p><p>To be continued…</p>]]></content>
      <categories>
        <category>创作集</category>
      </categories>
  </entry>
  <entry>
    <title>寂静之城 (The Silence City)</title>
    <url>/1666/</url>
    <content><![CDATA[<p><span style="font-size:8pt"><em>马伯庸《寂静之城》未删节版本全文<br>发表在 2005 年第 5 期《科幻世界》上的本文由于众所周知的原因进行了删节,这是发在马伯庸 个人网站上的原文</em></span></p><p>And in the naked light I saw ten thousand people, maybe more.<br>People talking without speaking, people hearing without listening.<br>People writing songs that voices never shared, no one dared disturb the sound of silence.</p><p>— The sound of silence</p><p>美利坚合众国,2015 年,纽约。</p><p>当电话响起来的时候,阿瓦登正趴在电脑前面睡觉。电话铃声十分急促,尖锐,每一次振动都让他的耳膜难受好久。他揉了揉干涩的眼睛十分不情愿地爬起来,觉得脑子沉滞无比。</p><p>其实他的脑子一直就很沉滞,这种感受既然是生理上的也是心理上的。他身处的房间很狭窄,空气不很好,唯一的两扇窗户紧闭着——即使打开窗户也 没用,外面的空气更加浑浊。这是一间大约只有三十平米的小屋子,屋子墙壁上泛黄的墙纸有好几处开始剥落,天花板上的水渍渗成奇怪的形状;一张老式的军绿色 行军床摆在墙角,床腿用白漆写着编号;紧挨着行军床的是一张三合板制成的电脑桌,桌上摆着一台浅白色的电脑,机箱后面五颜六色的电线纠缠在一起,把它们自己打成一个古怪的死结,杂乱无章地蔓延到地板与墙角,仿佛常春藤一样。<a id="more"></a></p><p>阿瓦登走到电话前,慢慢坐到地板上,目光呆滞地盯着电话,手却没有动。这部古怪的东西是老式的按键式电话,大概是十几年前的款式,这是阿瓦登有一次去费城出差时偶尔在一家杂货店里买到的;他拿回家以后稍微修理了一下,发现居然还能用,这让他当时小小地兴奋了一阵子。</p><p>电话继续在响着,已经是第七声。阿瓦登意识到自己不得不去接听了。于是他弓下腰,用两个指头拈起电话,慢慢把电话放到耳边。</p><p>“请说出你的网络编号?”话筒里传来的声音并不急噪,事实上它也不带其他任何的感情色彩,因为这是电脑合成的人工智能语音系统。</p><p>“19842015”</p><p>阿瓦登熟练地报出一连串数字,同时开始觉得胸有些更闷了。说实话他并不喜欢这些空洞的电子声音,他有时候想,假如打过电话来的一位声音圆润的女性该多好。阿瓦登知道这是一种不切实际的幻想,不过这幻想会让他的身体得到几秒钟的舒缓。</p><p>话筒里的声音仍旧在继续着。</p><p>“关于你在十月四日提交的网络论坛用户注册申请已经被受理,经有关部门审查后确认资格无误,请在三日内持本人身份证件、网络使用许可证及相关文件前往办理登记手续,并领取用户名及密码。”</p><p>“知道了,谢谢。”</p><p>阿瓦登谨慎地选择词语,同时努力挤出一副满足的微笑,好象话筒的另一侧有人在看着自己一样。放下电话,阿瓦登先是茫然地盯着它了大约两分钟,然后站起来活动一下手腕,坐回到电脑前面,缓慢地推动了一下鼠标。</p><p>电脑屏幕“啪”地一声亮了起来,显示出一个登陆的界面,还有一行英文:“请输入你的网络编号和姓名。”阿瓦登将那八位数字敲进去,又输入了自己的名字,点击“登陆”。随即机箱的指示灯开始频繁地闪动起来,整个机器发出细微的噪音。</p><p>每一个使用互联网的人都有一个网络编号,没有这个编号,就无法连接进互联网络。每一个编号都是独一无二的,每个人只有一个;这是使用者在网上的唯一代号,既不能修改,也不能取消。这些编号分别对应着使用者身份证上的名字,因此 19842015 就是阿瓦登,阿瓦登就是 19842015。阿瓦登知道有些记忆力不好的人会把自己的编号印在衣服的后面,那看起来颇为滑稽,也容易引发一些不正当的联想。</p><p>有关部门说使用网络实名制是为了规范网络秩序方便管理,杜绝因匿名使用网络而产生的一系列重大问题和混乱。阿瓦登不太清楚那一系列重大问题会 是什么,他自己没试过用假名上网,他所认识的任何人里也不曾有人尝试过——事实上,从技术角度来说,他根本没办法匿名登陆互联网络,没有编号就没有权限上网,而编号则连接着他的详细档案,换句话说,没人能在网上隐藏自己。有关部门把这一切都考虑的很周详。</p><p>“有关部门”,这是一个语意模糊、但却有着权威与震慑力的词组。它既是泛指,又是确指,其所涵盖的意义相当广泛。有时候,它指的是为阿瓦登颁 发网络编号的美国联邦网络管理委员会;有时候它是将最新通告及法规发到阿瓦登 EMAIL 信箱的服务器;还有时候它是监察网络的 FBI 特属网络调查科;总之一句话,有关部门是无处不在,无职不司的,总会在适当的时候出现,给予指导、监控或者警告,无论你是在网上还是网下。</p><p>简直就象是老大哥一样无微不至。</p><p>电脑仍旧在持续运转着,阿瓦登知道这得花上一阵子。这台电脑是有关部门配发给他的,具体型号和配置阿瓦登并不清楚,机箱是被焊死的,无法打开。于是他拿出一小瓶清凉油,用右手小拇指的指甲挑出一点抹在自己的太阳穴,然后从脚下堆积如山的杂物里翻出一个塑<br>料杯子,从桌子旁的饮水机里接了半杯蒸 馏水,就着一片镇痛片一饮而尽。蒸馏水穿过喉咙和狭长的食道滑进胃里,空泛的味道让他有些恶心。</p><p>音响里忽然传来一阵美国国歌的旋律,阿瓦登放下杯子,重新把目光投到电脑上去。这是已经连入互联网络的标志。屏幕上首先跳出来的是有关部门的通告,白底黑色四号字,里面陈述了使用互联网的意义以及最新的规章制度。</p><p>“缔造健康的互联网络,美国万岁!”</p><p>音响里传来激昂的男性呼声,阿瓦登不大情愿地跟着大声念了一遍。“缔造健康的互联网络,美国万岁!”</p><p>这段呼号持续了三十秒钟,然后消失,取而代之的是写着“缔造健康的互联网络”标语的桌面背景。另外一个窗口慢慢浮上开,上面开列出几个选项:工作、娱乐、电子信箱和BBS 论坛。其中 BBS 选项呈现灰色,说明这项功能还没有开通。</p><p>整个操作系统简洁明了,这台电脑的浏览器没有地址输入栏,只是在收藏夹里有几个无法修改的的网站地址。理由很简单,这些网站都是健康向上的, 假如其他站点和这些网站一样,那么只保留这些网站就够了;假如其他站点与这些网站不一样,那么就是不健康的,是低级趣味,不能保留。这是有关部门精心设计的,是为了公民的精神健康着想,生怕他们受到不良信息的侵染。</p><p>阿瓦登首先点开了“工作”,一连串和他工作相关的站点列表与相关软件在电脑上显示出来。阿瓦登是一名程序员,他每天的工作就是根据上级的要求编写程序。这份工作很无聊,不过可以保证他有稳定的收入。他不知道自己的源代码会被用到哪里去,上级也从来没有跟他说过。</p><p>他打算继续昨天的工作,但是很快发现自己很难继续下去。阿瓦登觉得今天的情绪比以前要烦躁,无法集中精神,大脑还是很呆滞,胸口仍旧发闷。他试图娱乐自己,但是他发现“娱乐”选项里只有纸牌与挖地雷,根据有关部门的说法,这是两个健康的游戏,没有暴力,没有色情,不会让人产生犯罪冲动,也不涉及任何政治色彩。据说美国境外也是有互联网络站点的,不过无法连上去,因为本国的互联网络自成格局,独立自主,普通人无法直接连接到国外——IE 浏览器没 有地址栏,就算知道地址也没有用处。</p><p>“您有一封新邮件。”</p><p>系统忽然跳出来提示,阿瓦登终于找到了可以暂停工作的理由,他很快移动鼠标到电子信箱的选项上,点开,很快一个新的界面出现了。</p><p>“To: 19842015<br>From:10045687<br>Subject: 模块、已经、完成、当前、项目、是否、开始。”</p><p>阿瓦登微微地叹了一口气,觉得有些失望。每一次他收到新的电子邮件,都希望能够有一次新鲜的刺激来撞击他日益迟钝的脑神经,每一次他都失望 了。其实他早就知道这一点,只不过他觉得保持期待至少能够享受到几秒钟快感。就好象他期待着打电话过来的是一个圆润温柔的女性声音一样。不给自己一些渺茫的希望,阿瓦登觉得自己迟早会疯掉的。</p><p>这封信很简短,但是内容很充实。19842015 是阿瓦登的网络编号,而 10045687 则是他的一位同事的编号,这种工作性质的信件通常都 以编号相称。信的内容是几个不连续的英文单词,这是有关部门所提倡的一种电子邮件书写方式,因为这样可以方便软件检查信件中是否含有敏感词汇。</p><p>阿瓦登打开回信的页面,同时另开了一个窗口,打开一份名字叫做“网络健康语言词汇列表”的 TXT 文档。这是有关部门要求每一位网民所必须使用的词汇。当他们书写电子邮件或者使用论坛服务的时候,都得从这个词汇列表中寻找适合的名词、形容词、副词或者动词来表达自己想要说的话。一旦过滤软件发现 网民使用了列表以外的词,那么这个词就会被自动屏蔽,取而代之的是“请使用健康语言”。</p><p>“屏蔽”是个专有名词,被屏蔽的词将不允许再度被使用,无论是在书信里还是口头都不允许。讽刺的是,“屏蔽”一词本身也是被屏蔽的词汇之一。</p><p>这个列表是经常更新的,每一次更新都会有几个词在列表上消失,于是阿瓦登不得不费劲脑汁寻找其他词语来代替那个被屏蔽掉的词语或者单字。比如在以前,“运动”这个词是可以使用的,但后来有关部门宣布这也是一个敏感词汇,阿瓦登只好使用“质点位移”来表达相同的意思。</p><p>他对照着这份列表,很快就完成了一封文字风格与来信差不多的 EMAIL——健康词汇表迫使人们不得不用最短的话来表达最多意思,而且要尽量减少不必要的修辞,所以这些信件就好象是那杯蒸馏水一样,淡而无味,阿瓦登有时候想,他早晚也会和这些水和信一样腐烂,因为这些信是他写的,水是他喝的。</p><p>接下来阿瓦登启动检查软件先扫了一遍,确保自己没无意中加入什么敏感词汇。等这一切都完成后,他按下了发送键,邮件被送出去了。</p><p>阿瓦登没有留下备份,因为他的机器里没有硬盘,也没有软驱、光驱或者 USB 接口。这个时代宽带技术已经得到了很大发展,应用软件可以集中在统一的一个服务器中,个人用户调用时的速度丝毫不会觉得迟滞。因此个人不需要硬盘,也不需要本地存储,他们在自己电脑里写的每一份文档、每一段程序、甚至每一个动作都会被自动传送到有关部门的公共服务器中,这样便于管理。换句话说,阿瓦登所使用的电脑,仅仅具备输入和输出两种功能。</p><p>完成了这封信后,阿瓦登再度陷入了软绵绵的焦躁状态,这是一个连续工作了三天的程序员的正常反应。这种情绪很危险,因为它让人效率低下精神低迷,而且没有渠道发泄。“疲劳”、“烦躁”以及其他负面词汇都属于危险词汇,如果他写信给别人抱怨的话,那么对方收到的将会是一封写满“请使用健康语言” 的 EMAIL。</p><p>这就是阿瓦登每天的生活,今天比昨天更糟糕,但应该比明天还稍微好一点。事实上这个叙述也很模糊,因为阿瓦登自己并不清楚什么是“好一点”,什么是“更糟糕”。“好”与“坏”是两个变量,而他的生活就是一个定量,只有一个常数叫“压抑”。</p><p>阿瓦登推开鼠标,把脑袋向后仰去,长长地呼了一口气。(至少“呼”这个字还没有被屏蔽)这是空虚的表现,他想哼些歌,但却又不记得什么,转而吹了几下口哨,但那听起来与一只生了肺结核的狗差不多,只得做罢。有关部门象幽灵一样充斥在整个房间里,让他无法舒展自己的烦闷。就好象一个人在泥沼里挣扎,刚一张口就被灌入泥水,甚至无法大声呼救。</p><p>他的头不安分地转了几转,眼神偶尔撇到了摆在地板上的老式电话机,他忽然想到还必须要去有关部门申请自己的 BBS 论坛浏览许可证。于是他关掉 “工作”和“电子邮件”窗口,退出了网络登陆。阿瓦登在做这些事的时候毫不犹豫,他很高兴能够暂时摆脱互联网络,在那上面他只是一串枯燥的数字和一些“健康词汇”的综合体。</p><p>阿瓦登找出一件破旧的黑色呢子大衣,那件大衣继承自他的父亲,袖口和领子已经磨损的很严重,个别地方有灰色的棉花露出来,但还是很耐寒。他把大衣套到身上,戴上一副墨绿色的护镜,用过滤口罩捂住嘴。他犹豫了一下,拿起“旁听者”别在耳朵上,然后走出家门去。</p><p>纽约的街上人很少,在这个时代,互联网的普及率相当地高,大部分事务在网上就可以解决,有关部门并不提倡太多的户外活动。太多的户外活动会导致和其他人发生物理接触,而两个人发生物理接触后会发生什么事则很难控制。</p><p>“旁听者”就是为了防止这种事而发生的,这是一种便携式的语言过滤器,当携带者说出敏感词汇的时候,它就会自动发出警报。每一位公民外出前都必须要携带这个装置,以便随时检讨自己的言语。当人们意识到旁听者存在的时候,他们往往会选择沉默,至少阿瓦登是如此。有关部门正逐步试图让网络和现实生活统一起来,一起“健康”。</p><p>这时候正是11月份，寒风凛冽，天空漂浮着令人压抑的铅灰阴云，街道两旁的 电线杆仿佛落光了叶子的枯树，行人们都把自己包裹在黑色或灰色的大衣里面，浓 缩成空旷街道上的一个个黑点飞快移动着。一层若有若无的烟雾将整个纽约笼罩起 来，不用过滤口罩在这样的空气里呼吸将会是一件很有挑战的事情。</p><p>距离上一次离开家门已经有两个月了吧，阿瓦登站在公共汽车站的站牌下，不 无感慨地想，周围的一切看起来很陌生，泛黄，而且干燥。那是上一次沙尘暴的痕迹。不过沙尘暴这个词也已经被屏蔽了，因此阿瓦登的脑海里只是闪过那么一下，思想很快就转移到别的事情上去了。</p><p>站在阿瓦登旁边的是一个穿着蓝色制服的高个男人。他先是狐疑地看了阿瓦登一眼，看到后者沉默地沉在黑色大衣里，他的两只脚交替移动，缓慢地凑了过去，装做漫不经心对阿瓦登说：</p><p>“烟，有吗？”</p><p>男人说，每一个字都说的很清晰，而且词与词之间间隔也足够长。这“旁听者”还没有精密到能够完全捕捉到每一个人语速和语调的程度，因此有关部门要求每一位公民都要保持这种说话风格，以方面检测发言人是否使用了规定以外的词汇。</p><p>阿瓦登转过头去，看了他一眼，舔舔自己干裂的嘴唇，回答说：</p><p>“没有。”</p><p>男人很失望，又一次不甘心地张开嘴。</p><p>“酒，有吗？”</p><p>“没有。”</p><p>阿瓦登又重复了一次这个词，他也已经很久没有收到烟和酒了，也许是缺货的关系吧，这是常有的事。不过有一点很奇怪，“旁观者”这一次却没有发出警报。以阿瓦登的经验，以往一旦烟、酒或者其他生活必需品发生短缺现象，这个词就会暂时成为被屏蔽掉的敏感词汇，直到恢复供给为止。</p><p>这个男人看起来很疲惫，红肿的眼睛是这个时代的人们普遍的特征，这是长时间挂在网上的关系。他的头发蓬乱，嘴边还留着青色的胡子碴，制服下的衬衣领口散发着刺鼻的霉味。能看的出，他也很久不曾到街上来了。</p><p>阿瓦登这时候才注意到，他的耳朵上空荡荡的，没有挂着那个银灰色的小玩意“旁听者”，这实在是一件严重的事情。不携带“旁听者”外出，就意味着语言不会再被过滤，一些不健康的思想和言论就有可能孳生，因此有关部门相当严厉地规定公民上街必须携带旁听者。而这个男人的耳朵旁却什么也没有。阿瓦登暗暗吃惊，一时间不知道是该去提醒还是装做没看到。他暗自想，也许向有关部门举报会更好。</p><p>这时候那个男人又朝他靠近了一点，眼神变的饥渴起来。阿瓦登心里一阵紧张，下意识地向后退去。这难道是一次抢劫？还是说他是个压抑太久的同性恋者？那个男人忽然扯住他的袖子，阿瓦登狼狈地挣扎却没有挣开。出乎他的意料，那个男人并没有进一步的动作，而是大吼一声，用一种阿瓦登已经不太习惯了的飞快语速向他倾泻起话语来。阿瓦登被这突如其来的爆发弄的莫名其妙，不知所措。</p><p>“我只是想和你多几句话，就几句，我很久没有说过话了。我叫斯多葛，今年三十二岁，记得，是三十二岁。我一直梦想有一套在湖边的房子，有一副钓鱼竿和一条小艇；我讨厌网络，打倒网管；我妻子是个可恶的网络中毒者，她只会用枯燥乏味的话叫我的网络编号；这个城市就是一个大疯人院，里面大疯子管着小疯子，并且把所有没疯的人变的和他们同样疯狂；敏感词汇都去他X的，老子够了……”</p><p>男人的话仿佛一瓶摇晃了很久然后突然打开的罐装碳酸饮料，迅猛，爆裂，而且全无条理。阿瓦登惊愕地望着这个突然狂躁起来的家伙，却不知道如何应对；更可怕的是，他发现自己居然对他产生了一点同情，那种“同病相怜”式的同情。男人的话这时候已经从唠叨变成了纯粹谩骂，全部都是最直抒胸臆的那种。阿瓦登已经有五、六年不曾说过这些脏话，最后一次听到这些也是四年前。有关部门认为这都有碍精神文明，于是全部都屏蔽掉了。</p><p>而现在这个男人就在公众场合对着他大吵大嚷，似乎要将被屏蔽掉的敏感词汇一口气全倒出来。他的目光和手势并不针对任何人，甚至也不针对阿瓦登，更象是在一个人在自说自话。阿瓦登的耳膜似乎不习惯这种分贝，开始有些隐隐做痛，他捂着耳朵，拿不定主意是干脆逃掉还是……这时候，远处街道出现两辆警车，一路闪着警灯直直冲着这座公共汽车站而来。</p><p>警车开到站台旁时，男人仍旧在痛骂着。警车门开了，涌出了五、六名全副武装的联邦警察。他们扑过去将那个男子按在地上，用橡皮棍痛打。男人两条腿挣扎着，嘴里的语速更快了，骂出来的话也越来越难听。其中一名警察掏出一卷胶带，“嚓”地一声扯下一条向男人的嘴贴去。男人在嘴被胶带封住之前，突然提高嗓门，冲着警察痛快无比地喊了一句：“FUXKYOU, YOUSONOFBITCH！”阿瓦登看到他的表情由疯狂变成享受，面带着微笑，似乎完全陶醉在那一句话所带来的无上快感和解脱感中。</p><p>联邦警察们七手八脚地将男人送进了警车，这时才有一名警察走到了阿瓦登的跟前。</p><p>“他，是，你朋友？”</p><p>“我，不，认识。”</p><p>警察盯了他一阵，取下他耳朵上的“旁观者”查看记录，发现他并没有提及任何敏感词汇，于是重新给他戴回去，警告他说那名男子说的全部都是极度反动的词汇，要求他立刻忘掉，然后转身押着那男子离开了。</p><p>阿瓦登松了一口气，其实刚才他有一瞬间涌现出一种冲动，也想在这空旷的街道上大喊一声“FUXKYOU, YOUSONOFBITCH”那一定很爽快，他心里想，因为那男子说出这句话的时候表情很享受。不过他也知道，这也是妄想的一种，“旁观者”紧帖在耳朵上的冰凉感觉时刻提醒着他。 　　街上很快就恢复了冷清，十分钟后，一辆公共汽车慢吞吞地开进站里，锈迹斑斑的车门哗啦一声打开，一个电子女声响彻整个空荡荡的车厢：“请乘客注意文明用语，严格按照健康词汇发言。”</p><p>阿瓦登把自己缩进大衣，压抑住自己异样的兴奋，决定继续保持沉默下去。</p><p>大约过了一个小时，公共汽车到了目的地。从破碎的车窗玻璃里吹进来的寒风让阿瓦登脸上挂起一层暗灰色的霜气，面部被风中的沙砾和煤渣刮的生疼。他听到电子女声报出了站名，就站起身来，象一条狗一样抖抖身上的土，走下车去。</p><p>车站对面就是阿瓦登要去的地方，那是有关部门负责受理BBS论坛申请的网络部。这是一间五层的大楼，正方形，全水泥混凝土结构，外表泛灰。如果没有那几个窗户的话，那么它的外貌将与水泥块没有任何区别：生硬、死气沉沉，让蚊子和蝙蝠都退避三舍。</p><p>BBS论坛是一种奇特的东西，从理论上来讲它完全多余，BBS的功能完全可以由EMAIL新闻组来取代，后者更容易管理和审查。而且申请使用BBS论坛资格不是件容易的事，申请人必须要通过十几道手续和漫长的审查才能有浏览资格，浏览资格三个月才会被允许在指定论坛发布帖子，至于自己开设BBS则几乎是不可能。</p><p>因此真正对BBS有兴趣的人少之有少。阿瓦登当初之所以决定申请BBS论坛资格，纯粹是因为他那种模糊但却顽强的怀旧心态，就好象他从杂货店里买的那部老式电话一样。他也不知道自己为什么会自找麻烦，也许是为了给生活带来些刺激，还是说为了强调自己和曾经旧时代的那么一点点联系，也许两者兼有之。</p><p>阿瓦登恍惚记得在他小的时候，互联网与现在并不太一样。并不是指技术上的不同，而是一种人文的感觉。他希望能通过使用BBS论坛回想起一些当年的事情。</p><p>阿瓦登走进网络部的大楼，大楼里和外面一样寒冷，而且阴森。走廊里没有路灯，蓝白色调的两侧墙壁贴满了千篇一律的网络规章条文与标语，冰冷的空气呼吸到肺里，让阿瓦登一阵痉挛。只有走廊尽头的小门缝隙里流泻出一丝光亮，小门的上面挂着一块牌子，上面写的是“网络部BBS论坛科。”</p><p>一走进这间屋子，阿瓦登立刻感觉到一阵温洋洋的热气。屋子里的暖气（或者是空调）开的很大，让阿瓦登冻麻了的手脚和脸麻酥酥的，有些发痒，他不禁想伸出手去挠挠。</p><p>“公民，请您站在原地不要动。”</p><p>一个电子女声忽然从天花板上的喇叭里传来，阿瓦登触电似地把手放下，恭敬地站在原地不同。他借这个机会观察了一下这间屋子。这屋子准确来说应该是一个狭长形的大厅，一道拔地而起的大理石柜台象长城一样将房间割裂成两部分，柜台上还装着一排银白色的圆柱形栅栏，直接连到天花板。屋子里没有任何装饰，没有观赏植物，没有塑料鲜花，甚至没有长椅和饮水机。</p><p>“缔造健康的互联网络，美国万岁。”</p><p>阿瓦登跟着声音重复了一遍。</p><p>“请前往八号窗口。”</p><p>电子女声的语调很流畅，因为这是电脑制作出来的，因此没有敏感词汇的限制。</p><p>阿瓦登转头看到在自己右手边的不远处，大理石柜台上的液晶屏幕显示着八号的字样。他走过去，拼命抬起头，因为柜台实在太高了，他只能勉强看到边缘，而无法看到柜台另一侧的情形。不过他能听到，一个人走到柜台对面，坐下去，并有翻动纸张与敲击键盘的声音。</p><p>“请把文件放入盒子里。”</p><p>柜台上的喇叭传来命令。出乎意料，这一次在喇叭里的声音却变了。虽然同样冷漠枯燥，但阿瓦登还是能分辨出它与电子女声的不同——这是一个真正的女性的声音。他惊讶地抬头望去，却什么都看不到，柜台太高了。</p><p>“请把文件放入盒子里。”</p><p>声音又重复了一次，语气里带着一丝烦躁，似乎对阿瓦登的迟钝很不满。</p><p>“是的，这是真正的女声……”阿瓦登想，电子女声永远是彬彬有礼不带任何感情色彩的。他把相关的电子身份证、网络许可证、网络编号和敏感词汇犯罪记录等一系列个人资料卡片一起放进柜台外的一个小金属盒子里，然后把盒子插进柜台上一个同样大小的凹槽中，关好门。 很快他听到“唰”的一声，他猜测这也许是对面的人——也许是个女人——将盒子抽出去的声音。</p><p>“你申请BBS服务的目的是什么？”</p><p>喇叭后的女声浸满了纯粹事务性的腔调。</p><p>“为了、提高、互联网络、工作效率、为了、缔造、一个、健康、的网络、环境，更好地、为、祖国、做出、贡献。”</p><p>阿瓦登一字一句地回答，心里知道这只是一道官方程序，只需要按标准回答就可以。</p><p>对面很快就陷入沉默，大约过了十五分钟，喇叭再度响起。</p><p>“最后手续确认，你已经获得BBS论坛浏览权。”</p><p>“谢谢。”</p><p>“砰”的一声，金属盒子从柜子里弹了出来，里面除了阿瓦登的证件以外还多了五张小尺寸光盘。</p><p>“这是有关部门核发给你的BBS论坛统一用户名与密码，BBS论坛列表、互联网BBS论坛使用指南及相应法规、以及最新健康网络词汇列表。”</p><p>阿瓦登向前踏了一步，从盒子里将这些东西一股脑全拿出来，揣进大衣的大兜里。那些东西其实是可以全部放在同一张光盘里的，不过有关部门认为每一张光盘装一份文件有助于用户理解这些文件的严肃性和重要性，并产生敬畏。</p><p>他心里盼望着那个喇叭能再说两句。让他失望的是，对面传来的是一个人起身并且离开的声音，从脚步声的韵律判断，阿瓦登愈发相信这是一名女性。</p><p>“手续办理完毕，请离开网络部回到自己的工作岗位上。”</p><p>甜美空洞的电子女声从天花板上传来，阿瓦登厌恶地抽动鼻翼，拿手揉了揉，转身离开这间温暖的大厅，重新进入到寒冷的走廊。</p><p>在回家的路上，阿瓦登蜷缩在公共汽车上一动不动，顺利申请到BBS的使用权让他有些虚无缥缈的兴奋。他闭着眼睛，找了一个合适的角度躲开破窗而入的寒风，右手在兜里不断摩挲那一系列光盘，还在怀念着那一个神秘的女声。</p><p>如果能再一次听到该多好，他不能抑制自己这样的想法，同时用拇指的指肚在光盘上轻轻地摩擦，幻想这几张光盘也曾经被她的手触摸过。他兴奋的几乎也想破口大骂一句“FUXKYOU, YOUSONOFBITCH”，真奇怪，那名男子的骂声在他的记忆里根深蒂固，并时不时不自觉地滑到唇边。</p><p>忽然，他的手指在光盘上发觉到一丝异常的感觉。阿瓦登下意识地朝四周望去，确认周围一个乘客也没有后，他小心翼翼地把光盘全拿出来，就着窗外的光亮仔细端详。</p><p>阿瓦登很快注意到，在装有BBS论坛列表的光盘背面，被人用指甲轻轻地划了一道刮痕。这条刮痕很轻，如果不是阿瓦登仔细地抚摩光盘的话，是很难发觉到的。这条刮痕很奇特，是一条直线，而在这条直线末端的不远处，则是另外一条极短的刮痕，似乎刻意想弯成一个圆点。整体看上去就好象是一个叹号，或者倒过来说，象是字母i。</p><p>很快他在其他四张光盘上也发现了类似的刮痕，它们造型都不同，但都似乎代表着某种符号。阿瓦登回想起喇叭里那个女声最后一句提到过的文件顺序，于是把这五张光盘按照BBS论坛统一用户名与密码、BBS论坛列表、互联网BBS论坛使用指南、相应法规、以及最新健康网络词汇列表的顺序排列好，接着依次把那五道刮痕用手指临摹到汽车窗户上。很快那些刮痕构成了一个英文单词：</p><p>title</p><p>题目？这是什么意思？</p><p>阿瓦登看着这个单词莫名其妙，这究竟是纯属无意的痕迹，还是有人刻意为之？如果是有人刻意为之，他这么做的用意是什么？</p><p>这时候汽车停住了，又有几名乘客走上车来。阿瓦登挪动一下身体，不让他们看到自己在车窗上写出来的字迹，然后装做打呵欠的样子抬起袖子，轻轻把那五个字母擦掉。</p><p>阿瓦登暗自庆幸，如果他没有在现在发现这些光盘上的痕迹，那么以后就永远没有机会发觉了。按照规定，个人电脑是不允许使用任何存储存设备的，因此阿瓦登的电脑并没有光驱。他下一步所要做的是将这些光盘送交到管区网络安全部，由他们将光盘内资料登陆到服务器中，再转发给阿瓦登。这是为了防止个人私自在家里制造、阅读或者传播黄色或者反动信息，网络安全部发出的通告是这么解释的。联邦的网络警察经常会突入到个人家中进行临时检查，看用户是否非法拥有信息贮存设备，阿瓦登曾经亲眼见过一个邻居被警察带走，原因仅仅是因为他私自藏了一张光盘在家里——其实他只是打算拿那个当茶杯垫用。那个邻居再没回来过。</p><p>无论这些符号代表的是什么意思，它都是一种全新的体验，这让阿瓦登感觉到兴奋。怀旧与渴望新奇是阿瓦登生活在这个时代的两根精神支柱，否则他会与这座城市一样变的僵硬，然后窒息而死。</p><p>他先来到网络安全分部，将光盘交给那里的负责人，负责人反复地检查光盘和阿瓦登的表情，好象所有使用BBS论坛的人都不可信赖一样。末了负责人终于找不到什么破绽，只得将光盘收下，然后举起右手，阿瓦登和他一起高呼“缔造健康的互联网络”。这句话是唯一被允许可以连贯着被说出来的句子。</p><p>回到家里，阿瓦登脱掉大衣，摘了过滤口罩，将旁观者扔到了行军床上，然后整个人也倒进枕头里。每次出去外面都会让他疲劳，这一半是因为他孱弱的肉体已经不大适合室外活动；另外一半原因是因为他必须花费大量的精力来应付旁观者。</p><p>过了四十分钟，他才悠悠地醒过来，头还是和平常一样地疼，胸口还是一如既往地闷。胡乱吃了一点东西以后，阿瓦登爬到电脑桌前，打开电脑，按程序登陆上网络，习惯性地先检查了一遍信箱。</p><p>信箱里有七、八封新的信件，其中两封是同事发来的事务信。另外五封则是网络安全部发给他的，内容就是他送交的那几张光盘。</p><p>阿瓦登打开了包含有BBS论坛的用户名、密码和BBS论坛列表的两封信。他看到自己的论坛通用用户名叫做19842015，和自己的网络编号完全一样，不由得有些失望。他依稀记得在小的时候，BBS论坛的用户名是可以自己决定的，而且每一个论坛都可以不同，一个人在网上并不单只是一串枯燥数字。</p><p>小时候的记忆往往是跟童话和幻想混杂在一起，未必与实际相符。现实中你只能使用有关部门指定的用户名和密码，理由很简单，用户名和密码内也可能含有敏感词汇。</p><p>阿瓦登又打开了那份BBS列表，全部都是有关部门开设的官方论坛，没有私人的——事实上个人能够合法持有的电脑设备从技术上来说也无法架设新BBS——这些论坛的主题各有侧重点不同，但基本上是围绕着如何更好响应国家号召，缔造健康互联网络来说的。比如其中一个电脑技术论坛，主题就是如何更好地屏蔽掉敏感词汇。</p><p>居然在这些论坛中还有一个是关于游戏的。里面正在讨论的是一个如何帮助别人使用健康词汇的网络游戏，玩家可以操纵一名小男孩在街上侦察，看是否有人使用了敏感词汇，小男孩可以选择上前指责或者通知警察，抓到的人越多，小男孩得到的褒奖就越高。</p><p>阿瓦登随便打开了几个论坛，里面的人都彬彬有礼，说话很“健康”，就好象街上的那些行人一样。不，准确地说，比街上的气氛还要压抑。在街上的人也许还有机会保留一下自己的小动作，比如阿瓦登刚才在公共汽车上就偷偷地写了TITLE五个字母；而在网上论坛，人的最后的一点隐私也全被暴露出来，有关部门随时可以调看你的一切行动，无从遁形，这就是科学技术发展所带来的进步。</p><p>一阵失落和失望袭上阿瓦登的心头，他合上眼睛，把鼠标甩开，重重地向后靠去。原来他天真地以为BBS论坛也许会少许宽松一些，现在看来甚至比现实中更叫人窒息，他感觉到自己好象陷入沉滞的电子淤泥之中，艰于呼吸。“FUXKYOU, YOUSONOFBITCH”再一次涌现到他的唇边，强烈无比，要化好大的力气才控制住。</p><p>忽然，他又想到了那个神秘的title，那究竟是什么意思？那五张光盘里或许隐藏着什么？也许这跟title有关系？</p><p>阿瓦登想到这里，把目光重新转向电脑屏幕，仔细去看网络安全部发来的五封信的title部分。五张光盘各隐藏着一个字母，凑到一起就是title，那么按照这个方式，那五封EMAIL的title凑到一起，就变成了一句话：去用户学习论坛。”</p><p>阿瓦登记得刚才他确实看到其中一个论坛的名字叫做“用户学习”，于是他抱着姑且一试的心态连接到这个论坛去。他希望这并不是一个巧合。</p><p>用户论坛是一个事务性论坛，里面是一些关于BBS用户资料的投诉帖和管理帖，斑竹的是一个叫19387465的人；发帖的人和回帖的人数量都很少，里面冷冷清清的。阿瓦登打开帖子列表，按照刚才的规律去搜寻每一个帖子的标题，并把它们综合到一起，很快他就得到了另外一句话： 　　“每周日辛普森大楼5层B户。”</p><p>又是一个谜团，阿瓦登想。但这却坚定了他的信心，这其中必定隐藏着玄机。光盘、EMAIL和BBS论坛，连续三次都可以通过首词组组合的方式得到暗示，绝非巧合。</p><p>究竟是什么人会在有关部门的官方文件中隐藏着这样的信息呢？每周日在效率<br>大楼5层B户又会发生什么事情呢？</p><p>阿瓦登终于找到了久违的兴奋感，未知事物的新奇刺激着他麻木很久的神经。更重要的是，这种在有关部门正式文件中玩弄的文字技巧，叫他有一种喘息的快感，仿佛一个密不透风的铁面罩上几个透进空气的小孔。</p><p>营造健康的互联网络。</p><p>FUXKYOU, YOUSONOFBITCH。</p><p>阿瓦登盯着屏幕上的桌面背景，用嘴唇比出了那句粗话的口型，并且比出了中指。</p><p>在接下来的日子里，阿瓦登一直处于一种潜藏的兴奋状态，就象是一个摆出无辜表情嘴里却藏着糖果的小孩子，在大人转身过去之后露出狡黠的笑容，尽情享受心中藏有秘密的乐趣。</p><p>日子一天一天地过去，健康词汇在列表里又少了几个，窗外的空气又浑浊了几分，这已经是生活的常态。阿瓦登自己已经开始拿网络健康词汇表当日历来用，划掉三个词就证明过了三天，划掉七个就证明过了一周，于是周日终于到来了。</p><p>阿瓦登抵达辛普森大楼的时间是中午，暗示的句子里并没有指明时间，阿瓦登认为在中午前往应该是比较可以接受的。当穿着深绿军大衣，耳朵上别着旁观者的阿瓦登来到辛普森大楼的入口时，他的心开始忐忑不安地跳跃起来。他在上一星期设想了无数种可能发生的情景，而现在这个谜底就要揭晓了。无论在周日效率大楼会发生什么，也不会比现在的生活更加糟糕，阿瓦登心里想，所以他并不怎么害怕。</p><p>他走进大楼内部，发现这里的人也很少，空旷的走廊里只听到他哒哒的脚步声与回音。一部老电梯里贴着“缔造美好网络家园”的广告，以及一个充满了正义感的男性头像海报，背景是星条旗，他在纸里用右手食指指向观看者，头上写着一行字是“公民，请使用健康词汇。”阿瓦登厌恶地转过身去，发现另外一侧也贴着同样的海报，避无可避。</p><p>值得庆幸的是五楼很快就到了，电梯的门一开，对面的门上就赫然挂着B户的牌子。门是掉了漆的绿色，门框上还点了几滴墨水，一部简易的电子门铃挂在右上角。</p><p>阿瓦登深深吸了一口气，伸手去按电纽。</p><p>电铃响起，很快屋子里传来脚步声。阿瓦登觉得这脚步的韵律很熟悉，似乎是在哪里见到过。门“咔拉”一声被打开一半，一名年轻女子一手握着把手，把身体前倾望着阿瓦登，警惕地说：</p><p>“你，找谁？”</p><p>女子疑惑地问道。阿瓦登一下子就认出了她的声音，就是那个在网络部BBS论坛科柜台后面的女性。她很漂亮，穿着墨绿色绒线衫，头上梳着这时代流行的短发，皮肤特别的白，只有嘴唇能看到一些血色。</p><p>看着女子的眼神，一瞬间阿瓦登不知道该说什么好，犹豫了一下，他举起右手，轻声回答说：“title。”</p><p>阿瓦登不知道这句话能否奏效，也不知道自己是否真的找对了地方，但这是他唯一能想到的回答了。他紧张地望着那女子，假如那女子忽然报警，那么自己就会被抓起来仔细审问为什么无缘无故跑到陌生人家里。“肆意游走罪”只比“使用敏感词汇罪”轻那么一点。</p><p>女子听到他这么说，脸上还是毫无表情，只是把头幅度很轻微地点了一下，右手谨慎地做了一个“进来”的手势。阿瓦登刚要张口，那女子严厉地瞪了他一眼，吓的他把话又吞回去了，乖乖地跟着她进了屋子。</p><p>一进屋子，女子首先做的就是把门关好，然后拉起来一层铅灰色的门帘挡在门口。阿瓦登不安地眨着眼睛，趁她拉门帘的时候环顾四周。这屋子是标准的两室一厅，在厅里摆放的是一套双人沙发与一个茶几，茶几上居然还有几束红紫色的塑料花。靠墙是电脑桌和电脑，墙上挂着普通的白色日历， 但被主人用粉红色的纸套了边，看起来颇为温馨。一盏粗笨的日光灯从天花板上垂下来，上面象是恶作剧一样挂了几缕绿色的电线，象是垂下藤蔓的葡萄架。阿瓦登注意到厅口的鞋架上有四双鞋，尺码不同，说明今天的客人并不只他一个。</p><p>阿瓦登正踌躇不安，忽然女子从背后拍了拍他的肩膀，示意他朝里面走。于是两个人穿过客厅另一侧的短小回廊来到其中一间卧室。卧室上挂着同样质地的铅灰色帘子，女子伸手举起帘布，推开了门。阿瓦登迈了进去，首先映入眼帘的是三名面带微笑的人类，以及一间用真正的鲜花装点的房间。屋子里有很多旧日记忆里的古老物品，比如一幅印象派的油画、一尊乌干达木雕，甚至还有一个银烛台，唯独没有电脑。</p><p>他正在迟疑，女子也进了屋子。她谨慎地拉好门帘关上门，将耳边的旁观者取下，回过身来对阿瓦登用曼妙的声音说道：</p><p>“欢迎加入说话会！”</p><p>“说话会？”</p><p>出于习惯，阿瓦登并没有把这三个字说出口，因为他不确定是否“健康”，只是用眼神表示自己的疑惑。</p><p>“在这里你可以随便说话，这个该死的东西不会起作用的。”女子把自己的旁观者晃了晃，那个小东西象死掉了一样，对女子句子里两个敏感词汇“随便”和“该死”充耳不闻。</p><p>阿瓦登一下子想到上星期在公共汽车站前碰到的男子，如果他摘下旁观者，会不会也会落到同一境地呢？那女子见他犹豫不决，指了指门口的铅灰色门帘说：“放心好了，这里是可以屏蔽掉旁观者信号的，不会有人觉察到。”</p><p>“你们，是什么，人，这，是，哪里？”</p><p>阿瓦登一边摘下耳朵上的旁观者，一边小声说道，语调还是改不了那种有关部门规定的说话方式。</p><p>“这里是说话会，是一个完全自由场所，在这里你可以畅所欲言，请不要拘束。”</p><p>另外一个人起身对他说道，这是一名瘦高的中年男子，鼻梁上的眼镜非常地厚。</p><p>阿瓦登嗫嚅着，却找不到发音的焦点，在四个人的注视下显得窘迫不堪，脸都要红起来。女子同情地看了他一眼：“可怜的家伙，不用太紧张，每一个刚到这里的人都是这样。慢慢就习惯了。”</p><p>她把手搭到阿瓦登的肩上：“我们其实见过的，当然，我见过你，而你没见过我。”她一边说，一边将自己的头发解下来，原来她留的是一头齐肩的乌黑长发，头发披下来的一瞬间阿瓦登觉得她真的很美。</p><p>“我……我记得你，记得你的声音。”阿瓦登终于说出了一句完整的话，虽然不够流畅。</p><p>“是吗，那可太好了。”女子笑起来，拉着他的手，让他坐到沙发上，递给他一杯水。阿瓦登注意到这是一个款式古老的茶杯，上面还刻着花纹，杯子里的水带着浓郁的香气，阿瓦登尝了一点，那种甜丝丝的味道对喝惯纯净水的舌头来说刺激格外地大。让他觉得浑身一下子被注进了许多活力。</p><p>“弄到这个可不容易，我们也不是每周都能喝到。”女子坐到他身边，两只乌黑的眼睛注视着他，“你是怎么知道这个集会的？”</p><p>阿瓦登把发现光盘暗示的过程说了一遍，其他四个人都赞许地点了点头。“果然是个聪明人，脑筋还没被陈腐的空气腐蚀掉。”一个三十多岁的胖子称赞道，他的嗓门大的要命。那个戴眼镜的中年人把两只手交叉在一起，表示赞同。</p><p>“这正是天生的说话会成员，聪明、敏锐，而且不甘屈从于沉默。”</p><p>“那么。”胖子提议，“先让我们鼓掌欢迎说话会的新成员吧。”</p><p>于是四个人鼓起掌来，小小的屋子里响起一片掌声。阿瓦登羞涩地举起杯子做回应，他还不太习惯这样的场面。等到掌声稍息，他抬起头怯生生地问道：</p><p>“可以问个问题吗？说话会到底是什么？”</p><p>带他进屋的女子伸出食指，在他鼻子前两公分的地方比了一比，解释道：</p><p>“说话会，就是可以畅所欲言的集会。在这里你不必顾忌什么，说出任何你想说的东西。这里没有敏感词汇，也没有健康互联网络。这里是绝对自由的空间，你可以尽情释放你的灵魂，舒展你的身体，没有任何禁锢与束缚。”说着说着，她的声音变的高亢、奔放，里面饱含了许多早已经被屏蔽掉的词汇，阿瓦登不曾听到这样流畅连贯的话语很久了。</p><p>“我们的宗旨就是，说话，就这么简单。”中年人扶扶眼镜，补充道。</p><p>“可是，要说些什么呢？”阿瓦登又问道。</p><p>“任何事情，你心里想的任何事情都可以说出来。”中年人露出宽和的笑容，“尤其是那些被美国政府限制的思想。”</p><p>这可真是一个大胆的集会啊，这分明就是犯罪，阿瓦登心想，但他发觉自己却被这种犯罪慢慢地吸引住了。</p><p>“当然，有件事我们会事先说明。说话会是危险的，每一个成员都冒着被有关部门拘捕的风险。联邦执法人员也随时可能破门而入，以非法集会以及非法使用不合法词语的名义把我们抓起来。你现在有权拒绝加入，并且离开。”</p><p>阿瓦登听到女子的警告，心里一度犹豫起来。但一想到此刻离去的话，那么又要开始持续那种窒息的泥沼生活，他就难以压抑自己的烦闷。阿瓦登第一次发现，原来“说话”对他来说是一个致命的诱惑，他先前并不知道自己原来是如此地渴望着说话。</p><p>“我不会离开的，我要加入你们，说话。”</p><p>“那太好了。唔，那么不妨就从自我介绍开始吧。”女子高兴地说，同时站起身来，把右手搭到胸前，“从我开始。我的名字叫阿尔特弥斯，至于网络编号和身份证号码，让他们见鬼去吧！谁会去管那个！我有我自己的名字，我不是数字。”</p><p>她的话让所有人包括阿瓦登都笑了起来。接着她继续说道：“不过，这其实只是一个假名，这是希腊神话里的女神。”</p><p>“假名？”</p><p>“是的，和我户籍本上的名字是不同的。”</p><p>“可是，为什么？”</p><p>“你不会对自己在档案里的名字厌倦吗？我想起一个自己喜欢的名字，哪怕只有一次机会也好，自己想叫什么就叫什么。在这个说话会里的每一个人都有一个自己喜欢的名字，我们彼此拿这个称呼。”</p><p>阿瓦登若有所思地点点头，他很理解阿尔特弥斯的想法。事实上当他在使用网络论坛的时候，也希望能够自己取一个称心如意的名字，而不是被分配一个用户名。</p><p>通过介绍，阿瓦登了解到阿尔特弥斯是网络部BBS论坛管理科的职员，今年23岁，未婚，最讨厌蟑螂和蜘蛛，喜欢缝纫与园艺，屋子里的花就是她偷偷从城市边缘摘回来的。</p><p>接下来是那名中年人，他自我介绍说名字叫兰斯洛特，41岁，是城市电厂的一名工程师；兰斯洛特这名字出自英国的亚瑟王传说，是一名忠贞的骑士。他有自己的老婆和两个孩子，一男一女；男孩三岁，女孩四岁，他们最喜欢吃的就是柠檬味道的水果糖。说到这里，兰斯洛特说希望下次聚会能把他们也带了，孩子们正是学说话的时候，他想教给他们真正的说话。</p><p>那个三十多岁的胖子是网络部的一名网管，叫瓦格纳。这个身份让阿瓦登吃惊不已，他的印象里网管都是些绷着脸全无表情的冷漠生物，但眼前的瓦格纳脸圆滚滚的，油光锃亮，嘴边两条翘起的小胡子神气十足。他喜欢的是雪茄和歌剧，利用网管的特权这两样东西都不难弄到。</p><p>“这个能屏蔽掉信号的门帘就是他弄的。”阿尔特弥斯补充说，瓦格纳冲她做了个“乐意为您效劳”的手势，然后点燃了雪茄，把它放到嘴里，很快屋子里就笼罩起一片稀薄的烟雾。</p><p>说话会的第四名成员是一位穿着黑色制服的女性，今年刚满三十。她的名字是杜拉丝，城市日报（那个时代的报纸已经全部都数字化了）的编辑，她比阿尔特弥斯还瘦，颧骨高高耸起，眼窝身陷，两片薄薄的嘴唇即使在最说话的时候也很少分开，看不到牙齿。爱好是饲养狗和猫，尽管她并没有养。</p><p>“那么，到你了。”阿尔特弥斯对阿瓦登说。阿瓦登想了想，结结巴巴地把自己的情况说了一遍，当谈到自己的爱好时候，他一时间居然想不到自己喜好什么，似乎什么都没有，在那之前他甚至从来没想过。</p><p>“那，你最想做的是什么事呢？”阿尔特弥斯把手再一次放在他肩上，诱导着问道。</p><p>“真的什么都可以？”</p><p>“什么都可以，在这里没有任何限制。”</p><p>阿瓦登觉得自己终于找到机会了，他咳了一声，抓抓头，脱口而出一句响亮的叫喊：“FUXKYOU, YOUSONOFBITCH！”</p><p>在一瞬间，在座的四个人都被他这句话震惊了。瓦格纳率先反应了过来，他先叼住雪茄，用力鼓掌，然后用右手把雪茄取下来，张嘴大声地赞叹道：“真棒，痛快，这简直是最完美的入会誓词。”</p><p>“我宁可听十遍这样的脏话，也不想再去碰那个乏味的电子女声。”兰斯洛特也是一脸陶醉，毫不掩饰自己对电子女声的厌恶。而阿尔特弥斯和杜拉丝全都咯咯地笑起来，杜拉丝发现自己的笑容幅度大了一点，不好意思地把嘴掩住。阿瓦登觉得他们与其说是觉得新奇，不如说是在享受这句脏话所带来的对体制的蔑视与挑战。</p><p>“那你叫希望自己叫什么名字呢？” 阿尔特弥斯歪着头问。</p><p>“唔……王二。“ 阿瓦登沉吟了一下，回答说。这是一个中式的名字，他以前有一个中国人朋友，喜欢讲故事，故事里的主角名字总是叫王二。</p><p>屋子里的气氛现在完全融洽了，大家都开始谈些比较自然的话题，每个人都摆出了最舒服的姿势，阿尔特弥斯不时拿起茶壶来为大家续水。阿瓦登紧张的心情逐渐放松下来，他感觉到自己的脑子前所未有地轻松。</p><p>“你知道的。”阿尔特弥斯又给他倒了一杯甜水，“我们一直想把说话会保持在一定规模，平日是没有办法畅所欲言的，我们需要空间。麻烦的是，我们没办法公开征集会员，又不可能直接通过物理接触去寻找，那风险太大。于是兰斯洛特就设计了一套暗示系统，只有发现这些暗示的人才能知道本会的存在。”</p><p>“这套系统考虑到的还不止是安全问题。”兰斯洛特把自己的眼镜摘下来仔细擦拭了一下，得意地说，“这其实也是一个会员资格验证。说话会所吸纳的成员，必须有智慧，有头脑，内心渴望激情，并且对自由有着渴望。”</p><p>瓦格纳用两根指头夹着雪茄，在事先准备好的烟灰缸里弹了弹烟灰，大声说道：“据我的经验，申请BBS论坛服务的人，大多数都是为了怀旧，或者说渴望一些新鲜的东西，这样的人往往都怀有激情，认为BBS论坛也许能给他们一些与现实不一样的东西——当然，事实上并非如此，美国政府对BBS论坛的管理甚至严厉过电子邮件——这暗示着他们心里渴望解脱束缚。因此我们将暗示隐藏在申请BBS论坛的光盘之中，只有申请人才有机会接触到这些暗示。而只有那些有智慧、观察敏锐的人才会发觉到这些暗示的存在，并顺利解读出来，找到这里。”</p><p>“归根到底，说话会也不过是一群渴望自由说话的秘密小团体罢了。”兰斯洛特笑道。</p><p>“你是第二个找到说话会的人，第一个是杜拉丝小姐。”</p><p>阿尔特弥斯告诉阿瓦登。阿瓦登敬佩地看了杜拉丝一眼，后者淡淡地回答道：“这没什么，这是我的工作，我的工作就是摆弄文字。”</p><p>阿瓦登想到上一周在公共汽车站碰到的那个疯狂男子，于是把这件事讲给其他成员听。听完之后，兰斯洛特摇了摇头，从嘴唇里滑出一声叹息：</p><p>“这样的事情我也是见过的，我的一个同事就是如此。所以说话会的存在是必要的，这是缓解压力的阀门。长时间的敏感词汇限制会让人都疯掉的，因为他们既无法思考又没办法表达。”</p><p>“这正是美国政府有关部门所希望看到的，这样只有傻瓜能够存活下来，一个全是傻瓜的社会是稳定的。” 瓦格纳费力地把自己肥胖的身躯挪了一下位置，轻蔑地说。</p><p>“你也是有关部门的一分子，瓦格纳先生。”阿尔特弥斯一边往茶杯里续了些热水，一边抬头轻声说道。</p><p>“阿尔特弥斯小姐，我只是一个能比普通人多使用几个敏感词汇的普通人而已。”</p><p>大家都笑了起来。阿瓦登从来没有见过这么多的人说这么多的话，这是前所未有的奇妙经验。他惊讶地发现自己居然很快就融进了这个小圈子里，隔阂与陌生感很快就消失了；同时消失的还有胸闷与头晕等习惯性的毛病。</p><p>很快话题就从说话会本身扩展到了更加宽泛随意的话题，阿尔特弥斯唱支歌，兰斯洛特说了几个笑话，杜拉丝则给大家讲了美国南部诸州的风土人情；瓦格纳甚至还唱了一段歌剧，虽然阿瓦登一个字也听不懂，但他一点也不吝惜掌声。在这个城市的某一个被屏蔽掉的角落里，五个不甘沉默的人正在享受着在这个时代视为奢侈品的事情——说话。</p><p>“王二，你可曾看过《1984》？”</p><p>阿尔特弥斯忽然问道，她就靠着阿瓦登坐下，阿瓦登摇摇头，反问道：“这是网络编号的一段么？”</p><p>“这是一本书的名字。”</p><p>“书？”阿瓦登听到这个名词，头摇的更大了。这是个古老的名词，在这个电脑技术非常发达的时代，网络可以承载一切信息，任何人都可以在网上图书馆查到电子版；因此有关部门认为实体书籍变成了一种没有必要存在的浪费，实体书也就逐渐消亡了。瓦格纳对此的评论是：“有关部门喜欢电子书籍的心情是可以理解的，电子书籍的话，只需要FIND和REPLACE两个命令就可以消灭掉全部不健康词汇，替一本书消毒；而实体书籍的校对与修订却是件旷日持久的工作。”</p><p>“这是一本伟大的书，是旧世界哲人们对我们这个时代的预言。”阿尔特弥斯认真地说。“它很早以前就洞察到了肉的束缚与解脱，灵的束缚与解脱，这是说话会的基石。”</p><p>阿瓦登不无惊奇地发现他的网络编号开头恰好是这这本书名字：19842015。</p><p>“那么，该怎么样才能看到呢？”阿瓦登盯着阿尔特弥斯乌黑色的眼睛问。</p><p>“我们也无法找到纸质版，网络图书馆不可能存在这样的书。”兰斯洛特摇摇头，然后重新露出笑容，左手向着杜拉丝摆了个请的姿势，“但我们的杜拉丝小姐应该为她的记忆力而自豪，她在很早已经有幸阅读过这两本书，并且能够记得里面的大部分文字。”</p><p>“太好了，然后她写下来了，对吗？”</p><p>“那太危险，这时代持有实体书是个大罪过，也容易让说话会暴露。我们只是在每次聚会的时候请杜拉丝小姐为我们背诵。既然是说话会，那么把这两个故事讲出来不是更名符其实吗？”</p><p>大家都安静下来，杜拉丝站起来走到屋子中央，其他四个人坐在旁边看着她。阿瓦登不经意地把手搂在阿尔特弥斯肩上，后者微微朝这边靠过来，女性头发的幽香“咝咝”地划过他的鼻子，让他的心里一阵荡漾。屋子里非常暖和，他分不清这是花香还是阿尔特弥斯的味道。</p><p>杜拉丝的声音并不高，不过却很清晰有力；她的记忆力确实惊人，不仅记得情节，包括一些细节和句子都可以复述下来。杜拉丝讲到了朱丽亚假装摔倒，然后偷偷递给温斯顿一张写着“我爱你”的纸条，绘声绘色，这让听众们都听的入神了，阿尔特弥斯听的尤其认真，以至于都没有注意到阿瓦登一直注视着她。</p><p>“1984的作者预见到了专制的进步，却没有预见到技术的进步。”瓦格纳在杜拉丝停下来喝水的时候发表自己的评论，阿瓦登觉得他与外貌不太相称，是个很有洞察力的技术官僚。</p><p>“在大洋国人们还可以靠传递纸条来偷偷表达自己的想法，但是现在不一样了。美国政府有关部门把我们全赶到了网上，而在网络技术发达的今天，我们即使想发一条短信都会被系统或者网管看的一清二楚，无从遁形。现实里呢，还有旁观者在。”瓦格纳在腿上敲了敲雪茄根部，“一句话，技术是中性的，但技术的进步会让自在的世界更自在，集权的世界更加集权。”</p><p>“这句话说的很有哲学家的味道哟。”阿尔特弥斯冲瓦格纳挤了挤眼睛，从抽屉里取来一把饼干和曲奇散发给大家。</p><p>“就好象同样是0和1，有的人就能写出工具软件，有人却拿那个编出恶性病毒？”</p><p>阿瓦登想到一个类似的比喻，瓦格纳听了以后满意地打了个响指。</p><p>“很不错的比喻，王二，就是如此，真不愧是程序员。”</p><p>谈话持续了不知道有多久，杜拉斯看了一眼墙壁上的挂钟，连忙提醒谈兴正浓的四个人时间快到了。说话会不能持续很长时间，旁听者被屏蔽的越久，暴露的危险就越大。</p><p>“那么好吧，我们就抓紧最后半个小时来完成今天的活动。”</p><p>阿尔特弥斯一边说着，一边将桌子上的空杯子收走。兰斯洛特和瓦格纳也都站起身来，活动一下已经有些酸疼的肩膀和腰，只有杜拉丝坐在位子上没有动。</p><p>“活动？还有什么活动？”</p><p>阿瓦登奇怪地问道，说话会除了说话还有其他活动？</p><p>“唔，对啊，我们还有其他活动。”阿尔特弥斯撩起额前的长发，对他妩媚一笑：“我们还会和对方完全交流。”</p><p>“完全交流？”</p><p>“就是intercourse”</p><p>“………………”阿瓦登一下子变的脸色苍白，呼吸急促起来，仿佛胃里被灌进去零下三十度的寒风，他几乎不相信自己的耳朵。</p><p>“说话会有说话的自由，也有选择与谁上床的自由。”阿尔特弥斯毫不羞涩地说，“我们互相谈话，然后选择合适的人做爱，就象我们选择我们喜欢的词汇说话一样。”</p><p>兰斯洛特看阿瓦登很窘迫，走过去拍拍他的肩膀，慢慢地说：“当然，我们不会强迫任何人，这完全是在自愿的基础上。今天我还要早点回去照顾小孩，你们人数正好合适。”</p><p>阿瓦登的脸色涨红，热的仿佛夏季的电脑CPU，他甚至不敢多看阿尔特弥斯一眼。他憧憬过女性很长时间，但如此接近还是第一次。</p><p>还要回家去照顾小孩子的兰斯洛特向大家道别后就先行离去了，阿尔特弥斯将房间留给瓦格纳与杜拉丝，然后带着惶恐不安的阿瓦登来到了另外一间房间。这间显然是阿尔特弥斯的卧室，屋子里很简单，但却收拾的十分干净，在床上枕头旁还摆着一个手制的布娃娃，床单和窗帘都是粉红色的。</p><p>最初的是由阿尔特弥斯主动开始的，丝毫没心理准备的阿瓦登只是被动地任她摆布。经过了几轮挑逗，阿瓦登才逐渐放开，任由潜藏在自己心内的原始欲望奔流出来，那种期待听到圆润女声的青春憧憬本来只是苦闷生活的意淫，而在今天它加倍实现了。很快这种憧憬与他在现实中被压抑的郁闷合流，转化成了猛烈的冲动，让他一次又一次与阿尔特弥斯融为一体。阿瓦登不知道这种冲动和他想大声说出“FUXKYOU, YOUSONOFBITCH”冲动有什么不同，不过现在不是考虑这个的时候，他现在脑子里想的只有尽情地、全无束缚地让自己释放激情，完全没有任何束缚。</p><p>强烈的刺激一波波地冲击着兴奋中枢，最终一阵快感浪潮在狂暴洋面扬起头来，达到了一个极高的顶端。阿瓦登在那一瞬间感觉到了前所未有的自由，那种轻盈无比的自由，以及因自由而生的快乐与疲惫。浑身是汗的他喘息着倒在了阿尔特弥斯身上，一阵舒畅的倦意如潮水般淹没了他的身体……</p><p>……当他醒来的时候，发现阿尔特弥斯躺在自己身边，赤裸的身体好象一尊白玉雕像，睡姿恬美静谧。他侧过身子去，慵懒地打了个呵欠，然后阿尔特弥斯睁开了眼睛。</p><p>“很舒服，对不对？”她问道。</p><p>“是啊……”阿瓦登不知道该说什么好，他顿了顿，犹豫地说道：“你以前和兰斯洛特、瓦格纳他们也……呃，我是说，象刚才那样子过吗？”</p><p>“是的。”阿尔特弥斯温柔地回答，她半支起胳膊，长发从肩膀披到了胸口。她的大方坦白反而让阿瓦登有些不知所措。屋子里出现了一段时间的沉默，然后阿尔特弥斯忽然开口问道：</p><p>“还记得今天杜拉丝讲的那段故事吗？女主角偷偷递给男主角写着“我爱你”的纸条。”</p><p>“唔，还记得。”阿瓦登回答，很高兴终于能从那个拙劣的话题摆脱出来了。</p><p>“在有关部门的健康互联网络词汇列表里，没有爱这个字呢。在我们这个时代，我爱你也是一个敏感词汇，被屏蔽掉了。”阿尔特弥斯的眼神里似乎是感慨，又象是失落。</p><p>“我爱你。”阿瓦登不禁脱口而出，他知道在这间屋子里可以说出任何自己想说的话，不必顾忌。</p><p>“谢谢你。”</p><p>阿尔特弥斯听到之后只是笑了笑，起身穿上衣服，催促阿瓦登时间差不多了。阿瓦登有些失望，因为她没有预期反应的热烈，仿佛他刚才说的只是有些无关紧要的东西。</p><p>这时候杜拉丝和瓦格纳已经离开了，屋子里只剩他们两个人。阿尔特弥斯把他送到门口，将旁观者交给他，然后叮嘱他说：“记得在外面绝对不要提及说话会的任何事情或者任何人，我们在说话会以外的地方是完全不认识的。”</p><p>“我记住了。”阿瓦登回答，然后转身要走。</p><p>“王二。”</p><p>阿尔特弥斯忽然叫道，阿瓦登连忙转身，还没等他反应过来，两片柔软温暖的嘴唇忽然贴到了他的双唇，然后是一个细切的声音在耳边响起：“谢谢你，我爱你。”</p><p>阿瓦登觉得眼睛有些湿润，他戴上旁观者，推开门，重新步入到那一片令人窒息的世界中去，但他此时已与来时的心境大不相同。</p><p>此后阿瓦登的精神面貌明显有了改善。他谨慎地享受着这种秘密集会的乐趣，并且乐在其中。每一周或者两周，他们五个人都会在周日秘密地举行说话会的活动，聊天，唱歌或者听杜拉丝讲1984的故事。阿瓦登同阿尔特弥斯又“完全交流”了几次，偶尔他也会跟杜拉丝“交流”。他有了两个身份，一个是现实中和网上的阿瓦登，编号19842015，还有一个是说话会里的王二。他很享受这个名字，觉得这就是自己另外的一个人生。</p><p>有一次集会，他们谈到了敏感词汇的问题。阿瓦登记得很早的时候——他对这方面的记忆有点模糊——有关部门给出的是一份敏感词汇列表，由网站的内部管理人员秘密参考使用，他对如何演变成现在的局面大惑不解。那一天瓦格纳带了一瓶葡萄酒，兴致很高，于是索性给他们讲了讲“屏蔽”的进化史，身为网管的他经常可以接触到这些资料。</p><p>在最开始美国政府只是单纯地屏蔽掉敏感词汇，但很快他们就发现这样的措施根本没有用处。很多人会采取在词组中夹杂符号或者数字的方式来绕开系统检查；于是有关部门不得不将这些近似敏感词汇也一一屏蔽掉。然而众所周知，数字与符号之间的组合方式是近乎无限的，只要你有想象力，就完全可以组合出一个新的词组而且不失掉他的原意。比如说“politic”这个词，就有“politi/c”、“政polit/ic”、“pol/itic”等近乎无限种表达方式。</p><p>当有关部门意识到这个问题时，他们采取了新的策略。既然无法辨识词组，那么就用单词屏蔽。这一举措在一开始是奏效的，违规交谈的人显著减少，但很快人们就发现可以用同音字或者谐音的方式来继续表达自己的危险思想。即使有关部门封掉全部敏感词汇的同音字，也无济于事，思想活跃的美国人充分发挥了自己的想象力，使用隐喻，借代、类比、引申及其他修辞方法，或者将一个敏感词用数个不敏感的字来代替。人类的思维方式要比电脑开阔许多。电脑屏蔽掉一条路，他们还会有更多的路可以选择。</p><p>这一场水面以下的角力看起来似乎是美国大众要取得胜利。这时候，一个具有逆向思维精神的人出现了。他的身份不明。有人说他是有关部门的主管；也有人说他是因过度使用敏感词汇而被捕的危险人士。无论他是谁，总之整个局面被扭转过来。他向有关部门建议，不再告诉大众禁止说什么，而是规定他们只能说什么，用什么方式去说。有关部门很快就心领神会，制订了新的规章制度：取消了敏感词汇列表，取而代之的是互联网络健康语言列表，并把这举措推广到了日常生活中的语言屏蔽系统中去。</p><p>这一次，大众终于处于下风。以往他们与有关部门尽情地在网络与现实中捉着迷藏，而现在他们却被有关部门扼住了咽喉。这样一来，有关部门可以有效率地掌握住言论，因为整个语言的框架都被彻底控制了。在有限的空间内，大众几乎是无计可施。</p><p>尽管如此，大众还是不屈不挠地将这场战争——或者说游戏——继续下去，他们挑选健康词汇列表中的合法字眼来表达不合法的意思：两个连续的“稳定”意思就是“反对”，“稳定”加“繁荣昌盛”则暗示“屏蔽”。美国政府不得不对这一动向保持着警惕，并日复一日地将更多的词汇从健康词汇列表里删掉，禁止大众使用。</p><p>“当然，这场战争会持续下去的。只要世界上还存在着两个不同的字或者词组，那么就可以继续自由交流——你知道莫尔斯电码吧？”</p><p>瓦格纳说到这里，拿起茶杯一饮而尽，满意地打了一个嗝。</p><p>“可是，这场战争的代价就是语言的失落。表达能力会越来越贫乏，越来越淡而无味，人们会越来越倾向于沉默，这对有关部门反而是好事。”兰斯洛特摆出一副忧虑的表情，有节奏地用指关节敲击着桌面，“这样一来，岂不就等于是大众的自由意识将语言推向死亡的边缘？真讽刺啊。按照这个趋势，有关部门是不会败的，他们会笑到最后。”</p><p>“不，不，笑这种情感他们是不会了解的。”瓦格纳淡淡地回答。</p><p>“我倒是觉得，美国是一直处于恐惧的情感之中呢，生怕人们掌握了太多的词汇，表达出太多的思想，变的难以掌握。”阿尔特弥斯说完摆出一副她在上班期间冷若冰霜的呆板脸孔，学着僵硬的腔调喊了一句：“营造健康的网络环境，美国万岁！”</p><p>杜拉丝、兰斯洛特与瓦格纳都哈哈大笑，唯一没笑的是王二（阿瓦登）。他对于兰斯洛特刚才的那句话始终耿耿于怀：大众与有关部门的对抗，其最终结局就是语言的消亡。那么他们现在这个小小的说话会，也只不过是在一列开向悬崖的列车里关上窗帘，享受坠毁前最后的宁静罢了。</p><p>不过他没有说出口，因为这太煞风景了。阿瓦登不希望破坏说话会的气氛，这对他很重要。</p><p>从说话会回到家里，阿瓦登躺在行军床上，双手枕着脑袋，陷入了沉思。自从加入说话会以后，他变的比以前更容易陷入思考。有时候他想的是这个社会、这个互联网络或者这座城市中存在的荒谬性；有时候他想的是自己的生活；还有时候他想的是阿尔特弥斯。他不知道是不是在一个压抑的世界里，人的情感会变的格外强烈，他现在陷入对阿尔特弥斯的迷恋无法自拔。阿瓦登一直很羡慕杜拉丝讲的《1984》里面的温斯顿，他和朱利亚有一间两个人独处的小屋，一个只属于他们两个人的小世界。</p><p>他在与阿尔特弥斯“完全交流”的时候曾经吐露过自己的心声，阿尔特弥斯没有直接回答，而是表示两个人的关系无法再比说话会更近一步——维持现在的状态就已经是个人行为的极限，有关部门可不会一直打瞌睡。“我们只能把感情生活压缩在每周一次的说话会活动里，这已经很奢侈了。”她对他说，同时温柔地抚摩他的胸膛。“只有在说话会里，我们才是阿尔特弥斯和王二。而在其他时间里，你是19842015，而我是19387465。”</p><p>对此，阿瓦登只能发出一声轻轻的叹息，确实他不该奢求更多。</p><p>除了感情，发生变化的还有互联网络。自从加入说话会以后，阿瓦登逐渐发现互联网表面下潜藏的一些东西。正如瓦格纳在一次活动的时候指出，普罗大众与有关部门的战争从未结束，总会有思想和言论从严厉管制的缝隙中流泻出来。阿瓦登发现，在完全公式化的EMAIL与网络论坛中其实隐藏着不少耐人寻味的细节，就好象那个title一样，存在着各式各样的密码与隐藏寓意。这些东西出自不同人的手里，样式和破译方式都不同，阿瓦登不知道那些密码背后隐藏的是怎样的内容。不过有一点可以确知的是，说话会并不是唯一的一个地下集会，瓦格纳说的对，始终还是有人在试图用“健康”词汇表达“不健康”思想。</p><p>讽刺的是，给阿瓦登感触最深的，是有关部门的管制。以往他只是模糊地感觉到自己被绑缚起来，现在他能清晰地看清这种束缚与压抑的脉络，以及加诸在自己身上的各种手段。在小小说话会中享受到的自在让他更加深刻地感受到在宽阔现实中的不自在。</p><p>“FUXKYOU, YOUSONOFBITCH！”</p><p>每一次的聚会，三位男士都会轻蔑地一起高喊这一句粗话。他们清楚这不会给有关部门带来什么不良影响，不过这确实很痛快。</p><p>这一周，阿瓦登特别地忙碌，他的同事因为不明原因而被屏蔽掉了，这样一来整个项目就全压在了他一个人身上。这项目是为有关部分设计一种软件，用来控制大功率主动式“旁观者”的能源分配控制。软件很复杂，他不得不每天在电脑前工作十几个小时，只有在身体实在支撑不住的时候才停下来随便吃一点东西，喝一口纯净水，困了就躺在旁边的行军床上睡上一觉，爬起来继续工作。屋子里满是浑浊的烟味与袜子脏衣服的酸臭味，阿瓦登就在这种环境下蓬头垢面地敲着键盘，并不时揉揉满布血丝的眼睛。</p><p>偏偏在这个时候屋子里的暖气坏掉了。洋灰色的暖气片从昨天开始就变的冰凉，不再有热水流动。阿瓦登检查了一下，发现并不是管道问题，而且邻居们也碰到同样的事，看来是供热系统出了问题。这一变故的正面影响是稍微淡化了屋子内的酸臭味，负面影响是整个屋子变的有如冰窖一样。紧闭的窗户和门能挡住寒风，却挡不住寒冷，低温让本来就寒酸的房间更笼罩上一层霜气。无论是那把木椅还是行军床都象是冷酷的冰雕，屋子里唯一还有些热气的就只剩下电脑。阿瓦登不得不披上所有的御寒衣物，蜷缩在床上，把电脑的散热口对准自己。</p><p>有关部门宣布“供热”和“暖气”暂时也被列入敏感词汇，于是阿瓦登没办法写信向供热部门询问，只好静待，除了用来敲键盘的指头以外，尽量保持全身一动不动，以节约热量。在停止供暖后的第四天，暖气片里终于传来“哗啦哗啦”的声音，带着热气的水开始流动，屋子里恢复了温暖，“供热”和“暖气”又可以恢复使用了。于是EMAIL与网络论坛上全都是“庆祝有关部门恢复供应暖气，急人民之所急”的帖子，EMAIL新闻组里也全是类似主题。</p><p>不过这对阿瓦登来说太晚了，他生了病，感冒，而且是重感冒。他面色苍白，全身软弱无力，头疼的象是被一枚达姆弹射入头部，只能躺在床上等医生。医生来到他家里，给他做了两三次点滴，喂了一些叫不上名字的药片，叫他静养。这一场病足足持续了数天，他不得不放弃参加这一星期的说话会，身体状况实在太差了，阿瓦登甚至怀疑自己搞不好会因此而死掉。</p><p>阿瓦登躺在床上，心里懊悔不已，说话会是他唯一的乐趣，现在他却没办法参加。他把头蒙在被子里胡思乱想，瓦格纳这一次会带什么特别的东西来呢？兰斯洛特有没有把两个孩子也领过来？还有阿尔特弥斯，他没参加的话，她会和谁“完全交流”呢？瓦格纳还是兰斯洛特？他还想到了杜拉丝，上一次的聚会里，杜拉丝讲到了温斯顿在秘密幽会的屋子里对朱丽亚说“我们已经死了”，朱丽亚附和着说“我们已经死了”，这时候第三个声音说道“你们已经死了。”</p><p>杜拉丝就讲到这里，就停住了。阿瓦登急切地想知道接下来发生了什么，第三个声音是谁，是党吗？温斯顿和朱丽亚是否会被捕，他们会有什么样的下场？不光是他，阿尔特弥斯也很希望知道后续情节的发展，不过她并没有去追问杜拉丝。</p><p>“让这成为一个悬疑，这样接下来的一周我们的生活都会在期待的乐趣中度过。”她对阿瓦登说，然后两个人继续沉溺于intercourse的快乐。</p><p>“也许他们都会死。”阿尔特弥斯在交流结束后，看着天花板说。</p><p>“也许那只是奥布林的声音，他去探望他们。”阿瓦登安慰她道，但是他的心里也不确定。</p><p>阿瓦登的病持续了十天，然后他终于痊愈了。他痊愈后的第一件事就是从床上爬起来，然后去看墙上的日历：这一天恰好是星期日，说话会活动的日子。阿瓦登已经缺席了一周，这已经令他如饥似渴，甚至做梦都在和他们一起喋喋不休地说着话——所幸他并没有说梦话的习惯，所以24小时工作的旁观者并没发出任何警报。</p><p>阿瓦登简单地洗了一下脸，用一把有些生锈的剃刀沾着肥皂仔细地刮掉脸上粗硬的胡须，然后咕噜咕噜地刷了刷牙齿，用手和毛巾沾着热水将自己蓬起的乱发压下去。因为生病，有关部门发了一些补贴给他，其中包括两块羊角面包、两瓶姜汁啤酒和一份精制砂糖。他将这些东西都用塑料布仔细包好，揣到宽大的军大衣里，打算带到说话会上去与大家分享。</p><p>今天的天气和往常一样地冷，阿瓦登把自己裹在大衣里，登上前往效率大楼的公共汽车。一路上车厢里的广播重复着“营造健康的互联网络”以及一些优秀网络用户的先进事迹；车厢前面的电子屏幕不断滚动显示着最新的健康词汇列表，一个旁观者自车顶垂下来睥睨着车内的每一个表情呆滞的人。阿瓦登坐在最后一排，望着窗外不断向后移动的建筑物与枯黄的树木发呆。</p><p>车子很快就到达了辛普森大楼附近的车站，阿瓦登下了车，把手放到怀里摸了摸塑料布包着的食物，朝着大楼走去。他在半路无意中抬起头，忽然一阵冰冷的寒流刺入他的胸腔，迫使他停住了脚步。</p><p>有什么地方不对劲！</p><p>他看到了效率大楼的第五层阿尔特弥斯家的窗户发生了一些奇怪的变化。以前阿尔特弥斯家面向大街的窗户总是挂着粉红色的窗帘，而现在窗帘则被扯到了两边，窗户大开，用肉眼可以勉强看到窗玻璃和屋子里雪白的墙壁。假如今天有说话会的话，阿尔特弥斯绝对不会把有屏蔽效果的窗帘打开。而且打开窗户这件事也绝不寻常，在这个城市里的室外空气十分浑浊，几乎不会有人会去开窗换气。</p><p>也就是说，今天并没有说话集会召开，而是发生了另外一些事情。阿瓦登望着那窗户，心情开始变的有些慌乱，他把手从兜里掏出来，叼起一支香烟，把身体靠在一根电线杆旁故做镇静，以免被行人怀疑。究竟说话会发生了什么，为什么这一周停办了呢？要知道，只要还有复数的成员能够出席，说话会就会一直办下去，难道说瓦格纳、兰斯洛特、杜拉丝和阿尔特弥斯同时无法出席？这种概率实在太小了。阿瓦登一边这样想着，一边向四周不安地张望。忽然他看到了一样东西，一个念头霎时占据了他的全部心灵，让他几乎眩晕过去。</p><p>“说话会本周不会有了，以后也不会有了。”阿瓦登嘴唇默默地蠕动着，面如死灰。</p><p>他看到在街道内侧一处不起眼的地方隐藏着一个类似雷达天线的东西，其造型很象是两个背部贴在一起的大碗。阿瓦登心里清楚这是什么东西：这正是他负责软件设计的大功率主动式“旁观者”，这造型他很熟悉。这装置可以主动发射电波去探测人们的声音，并检查其中是否存在敏感词汇。</p><p>这样的装置居然就安放在阿尔特弥斯家附近，那么就等于说话会完全暴露在了有关部门的监控之下。主动式旁观者的强大刺探电波会轻易刺穿她家中的铅质窗帘，把所有成员的话原封不动地传到有关部门耳朵里。</p><p>这是一个划时代的发明，这一技术的突破意味着有关部门可以不再被动地等待警报，可以主动出击去刺探人们在任何时间任何地点说的任何话语。阿瓦登可以想象接下来会发生什么，阿尔特弥斯他们的每一句话都被有关部门记录下来，会有机器统计出到底有多少违禁词汇被他们使用过；然后联邦警察会冲进她的屋子，将正在聚会的成员们都带走，只留下搜查过后空荡荡的房间和窗户。</p><p>阿瓦登想到这里，心如刀绞，他一点也不为自己的侥幸逃脱而感到幸运。他的胃袋翻腾起来，一种恶心的感觉从胃里直接升到嘴边，让他想吐，却又不能吐——因为“呕”也是个敏感词汇；大病初愈的孱弱身躯无法承受这种打击，象害了风寒一样颤抖起来，几乎站立不住。</p><p>他不敢继续朝前走去，仓皇地转过身去，登上另外一辆公共汽车，把嘴闭的更紧了。等阿瓦登回到自己家楼下，看到楼房附近另外一架新的主动式旁观者正在兴建中，漆黑的天线在半空舒展开来，仿佛一面巨大的蜘蛛网。看来有关部门已经着手在整个纽约市部署这种新兴高科技产品。</p><p>他不敢驻足观看，低着头从那巨大装置旁边走过，一路不停地走回家，然后把自己的脸紧紧地压在枕头里，却不敢哭出声音来，连一句“FUXKYOU, YOUSONOFBITCH”都不能说。</p><p>从那以后，阿瓦登的生活回到了普通状态——就是说和原来一样沉滞、压抑、欠缺激情，健康向上，缺乏低级趣味。兰斯洛特说过：“战争的结果就是，大众的自由意识会将语言推向死亡的边缘”，现在看来，他的预言是很准确的：说话会的覆灭，导致“说话”、“歌剧”、“完全”、“交流”几个词先后被剔除出了健康词汇列表，成为敏感词汇。</p><p>另外，虽然阿拉伯数字还能用，但“1984”这一个数字组合也被屏蔽掉了，这让包括阿瓦登在内的程序员在编写程序时不得不谨慎地检查数字是否违规，这额外增加了很多工作量，让他更加疲惫。</p><p>阿瓦登不是没有担心过，也许在某一天的深夜，他就会忽然接到一封EMAIL，让他留在家里不要动，不要试图在网络做任何动作；接着电话会响起，电子女声会把这一要求重复再重复，直到警察打开他家的大门，把他带去未知的地方，那里有未知的命运等待着他。《1984》后面的情节发展阿瓦登始终不知道，唯一知道的杜拉丝已经彻底失踪了，所以温斯顿和朱丽亚的结局始终是个谜；就好象兰斯洛特、瓦格纳、杜拉丝和阿尔特弥斯的结局一样，也不从得知。其实这两件事对于阿瓦登来说没什么本质性的区别，所以它们也可以看做是同一个谜。</p><p>其实他最担心的，是阿尔特弥斯。每次想到这个名字，阿瓦登就难以抑制心中的郁闷。她究竟会怎么样，彻底被屏蔽掉吗？如果是那样，那么她在这世界上遗留下来的唯一痕迹，就是一个程序员记忆里的假名而已了。</p><p>说话会消失后三个星期，仍旧风平浪静，没有任何人来找过阿瓦登，他也没收到过任何类似内容的EMAIL，阿瓦登一直在想，也许是他们没有吐露出自己的下落，也可能是因为他们根本不知道——他们认识的只是一个叫王二的程序员。这个城市里有数以千计的程序员，而王二是个假名。</p><p>因此，生活一如既往地平静。不，确切地说，还是有一点不同的，那就是互联网络健康词汇列表：那上面的词组消失的速度比以前要快的快，每小时每分钟都有词与单字飞快地在名单上消失，阿瓦登不得不花上大量时间去更新列表，以跟紧当前形势。</p><p>与词汇列表更新速度相对的，EMAIL和网络论坛上的东西越来越乏味。因为人们不得不用极有限的词去表达广泛的意思，大家都变得寡言少语。就连那些秘密的暗语和联系方式也少了许多；整个网络就象是前些天阿瓦登家里出了问题的暖气片一样：虽然名义上是给人带来温暖的东西，但却变的冰冷、僵硬，让人如坠冰窟。</p><p>这一天，阿瓦登从电脑前抬起头来，他看了看窗外迷茫的灰色天空，胸口一阵抽搐，不由得痛苦地咳了一声。他拿起塑料杯，将杯子里的纯净水一饮而尽，杯子丢进同样是塑料质地的垃圾桶里，发出钝钝的撞击声，他觉得自己的脑子也是一团垃圾，举起手敲了敲，果然发出同样钝钝的撞击声。</p><p>然后他拿起大衣，戴上墨绿色的护目镜，走出门去。阿瓦登没带便携式的旁观者，那东西已经不需要了，城市里到处都是主动式的旁观者，随时监听是否有违禁词汇的存在。整个纽约现在就象是互联网络一样，被有关部门营造成十分健康。</p><p>阿瓦登这一次外出是有正当理由的，他决定去取消网络论坛服务，这服务已经用不着了，因为无论EMAIL，新闻组，BBS论坛还是其他什么现在全部都变成了一样的东西。</p><p>从日历来说现在应该是春季，但外面还是很冷，高大的灰色建筑矗立在平地上，仿佛绝对零度下的石林。大团大团的风裹着黄沙与废气穿行其间，风沙无处不在，让人置身其中而难以摆脱。阿瓦登把手揣进兜里，脖子缩进领口，畏缩着向网络部的大楼走去。</p><p>忽然，他停下了脚步，惊讶地站在原地无法动弹。他看到阿尔特弥斯正站在前面的路灯下，穿着黑色的制服。可是她的变化有多么大啊，面容象是老了十岁，满脸都是衰老的皱纹，年轻的活力荡然无存；她听到脚步声，转过头来，两个乌黑的大眼睛显得异常空洞，目光越过阿瓦登延伸到远方，没有一个明晰的焦点。</p><p>阿瓦登万万没有想到会在这个时间这个地点碰到她，这让他已经沉寂已久的心灵泛起了几点火花，可惜他迟钝的神经已经无法表达出“激动”这一个简单的情感了。两个人互相对视了一阵，他终于木然走到她身边，张了张嘴唇，想对她说些什么。但是他掏出今天新发布的健康词汇列表，发现上面是一片空白——终于连最后一个词组也被有关部门屏蔽了。于是阿瓦登只好保持着沉默，默默地与面无表情的她擦肩而过，继续向前走去。他的身影逐渐融入同样安静的灰色人群之中，整个城市都显得寂静极了。</p>]]></content>
      <categories>
        <category>分享境</category>
      </categories>
  </entry>
  <entry>
    <title>慢慢的 就没有了 就像从未存在过</title>
    <url>/1655/</url>
    <content><![CDATA[<p><span style="font-size:8pt"><em>一盏一盏的灯，灭了。四面八方的光源，消失了。我们生活的五光十色的世界，变成了一片黑色。<br>天黑了，那么睡觉吧，但愿长醉不复醒，卧槽泥马勒戈壁。<br>最后，我们变成了一群做梦的人，这个梦的名字，叫根据相关法律法规，相关搜索结果不予显示梦。</em></span></p><p>版权声明：转载自 <a href="http://weibo.com/p/1001603781133723654255" target="_blank" rel="noopener">《慢慢的 就没有了 就像从未存在过》</a></p><p>作者: 小海</p><p>几年以前，我曾经嘲笑过某科技界大佬。当时他说：也许90后、95后会慢慢不知道谷歌是什么网站。</p><p>那一年，这对于我来说简直就是世界上最好笑的笑话。谷歌，全世界最卓越的互联网公司，活在互联网的一代中国人，会不知道他们的网站？</p><p>今天，我收回这句嘲笑。因为这件不可能的事，它慢慢变成了现实。</p><p>没有人再关注什么谷歌不谷歌。对他们来说，百度也蛮好用的，反正他们几乎没用过谷歌。没有谷歌又怎样？大家还是开心的刷微博，看微信，听歌，看娱乐节目。对于从来就不知道谷歌的人来说，少了谷歌又有什么影响？</p><p>多年前，我们也是可以登陆Facebook的。其实这个网站和校内一样，也挺蠢的。可在上面你能看到老外们的生活，可以轻易的跟一万公里以外的人互相拜访，可以看到很多根本不会开到校内上的主页。你用汉语回复，下面给你聊起来的可能是香港仔，可能是台湾人。你用英语回复，说不定有比你英语用的更蹩脚的寂寞的北欧人来跟你搭讪。你感觉地球真的变成了地球村，你还没拉门走出去，别人就推门走了进来。</p><p>然后，它就没有了。起初，它的失踪激起了很大的声音，后来，声音就消失了。<a id="more"></a></p><p>多年前，我们也是可以登陆Twitter的。其实这个网站和微博一样，也不过是些信息流，刷上一整天，也不见得有什么用处。但至少，你可以以最快速度获取你想知道的任何新事，你会真正了解什么事情在全世界是流行的，而不是经过各种截图、翻译、转发，甚至曲解、断章取义、黑白颠倒的东西。你知道的是真相，赤裸裸的，也许有点太短的真相。但至少中间不会有无数人的加工与再加工，偏激、片面，就在这个过程中产生了，不管后来者有意还是无意。</p><p>然后，它就没有了。首先是它的本体没有了，然后它的模仿者也没有了，模仿者的模仿者也没有了。只剩一个模仿者的模仿者的模仿者，现在你每天能在上面看到无数广告。</p><p>多年前，我们也是可以登陆YouTube的。对于有的人来说，这个网站就是个大型优酷，当年有人信誓旦旦的说，没有YouTube，我们中国人会很快让优酷超过YouTube。可这么多年过去了，视频还是那么卡，内容还是那么垃圾，原创还是那么容易被盗窃，视频丰富度还是那么的可怜。在YouTube上，你能看到全世界最棒的手艺人，最逗乐的笑话，最天马行空的创意，最激荡人心的音乐，最美好的完美瞬间，可在优酷上，你想看一分钟视频，请先看半分钟广告。</p><p>哦，对了。Instagram，有些人可能感觉它和QQ空间也差不多。可我在上面关注了六百多个摄影师，它们都是顶好顶好的影像记录者，每天看他们的作品，我感觉到很幸福，那种即使没有到那里去，也身临其境的幸福。我还在上面认识了一个日本的爱自拍的帅小伙，一个爱喝酒的韩国大叔，一个十年前到过中国今天会在每张我发的紫禁城照片下点赞的美国大爷，一个美丽无比的俄罗斯妹子，我和他们基本上都难以交流，语言是很大的障碍，但几个简单的单词，心意也就到了，这种感觉，有时候比多年老友相聚还兴奋。因为这是人类不同族群自由交流互相沟通的过程，这种过程很神奇，真的很神奇。</p><p>可现在，它没有了，它之所以没有就因为在某个特定的时间你在搜索特定的词汇时，会搜出来特定的照片。虽然这么搜的人并不多，虽然看到的人也不会大惊小怪，也不会觉得天黑了，天亮了，天要塌了，天要变了。可它就是没了，Instagram，就这么没了。谷歌也是这么没的，Twitter也是这么没的，Facebook也是这么没的。不知道是什么人，在什么场合，说了什么话，下了什么决定。就要有超过十亿人像陷于哥谭市的孤岛里一样，看着一座又一座桥梁被炸掉，又被炸掉，又被炸掉，然后，就什么都没了。</p><p>我时常觉得悲哀，真的好悲哀，一个我根本不认识也不知道是谁的人，也许是一个群体，在不断抢走我身边的东西，而我却无能为力。我抱怨一声，他听不到，任何人都听不到。我怒吼一句，身边的大多数人却像看疯子一样的看着我。我哀嚎一声，这声音被阻碍在黑黑的幕墙以里。我发出尖锐的嘶吼，这声音传不了多远，就和我那被抢走的东西一样，消失了，不见了，就像从来没存在过一样。</p><p>对于本来就没存在过的东西，有谁又会觉得在意呢？那些本来拥有又被掠夺的人的哀愁，后来的人又怎么懂呢？我曾经是拥有一切的，我曾经是拥有世界的，我站在这片土地上，呼吸的是自由的空气，饮下的是自由的琼浆玉液。就在长的无法计数的时间里，我自由生命的一部分又一部分就这么被杀死了，突然就杀死了。可我还始终觉得，它们还奄奄一息的活着，就像它们是慢慢的死去的一样。</p><p>可它们终归是死了，而且随着它们的死，愈来愈多的事情慢慢的发生了，很慢很慢，几乎不被人察觉，可还是发生了。</p><p>没有谷歌，我可以用百度呀。可某些结果被越挪越后，越挪越后，最后就不见了。就像本来就不该搜出这个结果一样。</p><p>没有Facebook，我可以用校内呀。可你想发只有在Facebook上能发的文章，很快在校内上就失踪了。接着，校内变成了人人，话题变成了人人都关心的话题。大家都在抢着看星座、明星、八卦、娱乐。没有人会关心什么消失了，反正它们本来也没多少存在感。<br>没有YouTube，我可以用优酷呀。可你却经常只能在优酷上看到抄袭别人的作品，而且还不署名，而且还洋洋得意，而且还自我陶醉，就好像那个idea本来属于他自己一样。你看了还要惊呼，他是如此的有创意！好一个抄袭的创意，可你却不知道，因为你不知道这个世界上有个网站叫YouTube。</p><p>没有Twitter，我还可以用微博呀。可你想知道最近发生了什么，你搜的越勤快，越能看到越明显的 “根据相关法律法规，相关搜索结果不予显示 ”。时间长了，你想，反正知道了也没什么用，不如不看了。</p><p>慢慢的，一扇又一扇的门关上了。今天你打开世界上最大的博客网站，发现它没了。明天你一看，世界上最好的设计师分享网站没了，一开始是刷新的很慢很慢，后来它就没了。过两天再一看，平常每天都会读两篇文章的媒体网站没了，那里的文章缤纷多彩，最后都变成了该页无法显示几个字。再过几个月，大学的网站不让上了，摄影师的网站不让上了，就连百度日本这种自家网站，也没了。</p><p>接着，漫画看不了了，接着，动画看不成了。接着，美剧英剧失踪了。下载美剧英剧的网站又又又又又失踪了。尊重正版，保护权益，行吧，然后字幕网站也没了。</p><p>游戏没了，你习惯性登陆的游戏网站，发现下载栏正在整治中。论坛关了，天天都在看的论坛，突然接到相关部门的电话，因为 “报备问题 ”不让办了。个人网站，私人博客，对不起，说没就没有，你在上面存了多少多年辛勤耕耘的东西都没用。</p><p>你关注的人，有一天你登陆微博，发现他怎么好久都没说话了，然后你搜索了一下，发现他的账号不存在了，而且你搜他的名字，他的名字未予显示。</p><p>一盏一盏的灯，灭了。四面八方的光源，消失了。我们生活的五光十色的世界，变成了一片黑色。</p><p>天黑了，那么睡觉吧，但愿长醉不复醒，卧槽泥马勒戈壁。</p><p>最后，我们变成了一群做梦的人，这个梦的名字，叫根据相关法律法规，相关搜索结果不予显示梦。</p>]]></content>
      <categories>
        <category>分享境</category>
      </categories>
  </entry>
  <entry>
    <title>博客搬家到恒创主机</title>
    <url>/1495/</url>
    <content><![CDATA[<p><a href="http://www.anotherhome.net/530" target="_blank" rel="noopener">Hoster</a>的贝壳快用完了，然后正好赶上<a href="http://my.henghost.com/aff.php?aff=1878" target="_blank" rel="noopener">恒创科技9月主机促销活动</a>（推广链接，在意勿点），果断买了半年的 香港PHP600M入门型 PHP虚拟主机，10GB 月流量目测够用了。</p><p><span style="font-size:6pt">活动时间：2014年9月1日—9月5日<br>①、全场主机，年付7折优惠，优惠码：heng7<br>②、在享受7折同时，独立IP主机磁盘翻倍、VPS云主机内存翻倍<br>③、买3年送2年，买5年送5年，优惠不叠加<br>④、预存1000元送200元、预存3000送1000元 、预存5000送2000元（代理商也可参加）<br>老客户续费：可享受7折优惠，磁盘及内存翻倍，但不与之前优惠相叠加</span></p><p>另外近期对博客做了这些优化：<a id="more"></a></p><p>使用 WP Minify Fix 插件合并压缩JS和CSS文件</p><p>使用 WP Super Cache 插件启用缓存</p><p>去除所有友链favicon的显示</p><p>去除多余的jQuery</p><p>精简主题</p><p>压缩背景图片</p><p>启用DNSPod</p><p>使用 Images Lazyload and Slideshow 插件来延迟加载图片</p><p>……</p>]]></content>
      <categories>
        <category>事件簿</category>
      </categories>
  </entry>
  <entry>
    <title>世界，你好！</title>
    <url>/1/</url>
    <content><![CDATA[<p>欢迎使用WordPress。这是系统自动生成的演示文章。编辑或者删除它，然后开始您的博客！</p>]]></content>
      <categories>
        <category>事件簿</category>
      </categories>
  </entry>
</search>
